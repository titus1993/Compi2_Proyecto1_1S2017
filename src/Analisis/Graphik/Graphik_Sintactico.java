
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 04 08:29:49 CST 2017
//----------------------------------------------------

package Analisis.Graphik;

import Constante.Constante;
import Funciones_GraphiK.*;
import Ejecucion_GraphiK.*;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 04 08:29:49 CST 2017
  */
public class Graphik_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Graphik_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Graphik_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Graphik_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\005\000\002\021" +
    "\003\000\002\021\002\000\002\022\004\000\002\022\003" +
    "\000\002\023\007\000\002\016\003\000\002\016\002\000" +
    "\002\017\004\000\002\017\003\000\002\020\005\000\002" +
    "\026\004\000\002\026\003\000\002\025\011\000\002\024" +
    "\004\000\002\024\002\000\002\034\004\000\002\034\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\013\000" +
    "\002\030\003\000\002\030\003\000\002\030\004\000\002" +
    "\030\004\000\002\005\012\000\002\003\006\000\002\004" +
    "\011\000\002\004\007\000\002\004\007\000\002\006\011" +
    "\000\002\032\003\000\002\032\002\000\002\033\005\000" +
    "\002\033\003\000\002\031\004\000\002\050\003\000\002" +
    "\050\002\000\002\053\004\000\002\053\003\000\002\054" +
    "\004\000\002\054\004\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\004\000" +
    "\002\054\004\000\002\054\004\000\002\054\005\000\002" +
    "\054\004\000\002\054\007\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\005\000\002\012\004" +
    "\000\002\012\006\000\002\012\005\000\002\013\005\000" +
    "\002\013\004\000\002\013\006\000\002\013\005\000\002" +
    "\010\010\000\002\007\006\000\002\055\007\000\002\055" +
    "\007\000\002\055\010\000\002\055\007\000\002\052\007" +
    "\000\002\052\006\000\002\052\005\000\002\052\004\000" +
    "\002\052\003\000\002\052\003\000\002\061\004\000\002" +
    "\061\004\000\002\067\006\000\002\057\006\000\002\057" +
    "\002\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\002\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\051\011\000\002\051\015\000\002\047" +
    "\012\000\002\047\011\000\002\044\004\000\002\044\003" +
    "\000\002\045\006\000\002\066\005\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\042\015\000\002\043\003\000\002\043\003\000\002\041" +
    "\006\000\002\041\010\000\002\040\011\000\002\037\012" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\004\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\062\005\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\004" +
    "\000\002\062\003\000\002\062\005\000\002\062\004\000" +
    "\002\062\003\000\002\062\003\000\002\062\006\000\002" +
    "\036\005\000\002\035\005\000\002\035\003\000\002\063" +
    "\004\000\002\063\003\000\002\064\004\000\002\064\007" +
    "\000\002\015\010\000\002\015\007\000\002\015\007\000" +
    "\002\014\003\000\002\014\002\000\002\065\006\000\002" +
    "\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\010\070\ufffe\071\010\106\ufffe\001\002\000" +
    "\006\070\022\106\ufff9\001\002\000\010\070\uffff\071\010" +
    "\106\uffff\001\002\000\010\070\ufffc\071\ufffc\106\ufffc\001" +
    "\002\000\004\002\015\001\002\000\004\004\011\001\002" +
    "\000\004\107\012\001\002\000\004\072\013\001\002\000" +
    "\004\075\014\001\002\000\010\070\ufffb\071\ufffb\106\ufffb" +
    "\001\002\000\004\002\001\001\002\000\010\070\ufffd\071" +
    "\ufffd\106\ufffd\001\002\000\006\070\022\106\ufffa\001\002" +
    "\000\004\106\025\001\002\000\006\070\ufff7\106\ufff7\001" +
    "\002\000\004\004\023\001\002\000\004\075\024\001\002" +
    "\000\006\070\ufff6\106\ufff6\001\002\000\004\004\031\001" +
    "\002\000\006\002\ufff4\106\ufff4\001\002\000\006\002\000" +
    "\106\025\001\002\000\006\002\ufff5\106\ufff5\001\002\000" +
    "\010\041\ufff1\050\ufff1\073\033\001\002\000\006\041\uffad" +
    "\050\036\001\002\000\004\004\034\001\002\000\006\041" +
    "\ufff2\050\ufff2\001\002\000\004\041\042\001\002\000\010" +
    "\045\041\046\040\047\037\001\002\000\012\036\uffae\041" +
    "\uffae\043\uffae\075\uffae\001\002\000\012\036\uffaf\041\uffaf" +
    "\043\uffaf\075\uffaf\001\002\000\012\036\uffb0\041\uffb0\043" +
    "\uffb0\075\uffb0\001\002\000\022\004\061\044\060\100\045" +
    "\101\055\102\065\103\057\104\062\105\054\001\002\000" +
    "\004\004\u0147\001\002\000\004\075\u0146\001\002\000\004" +
    "\004\uffac\001\002\000\004\004\u013d\001\002\000\024\004" +
    "\uffea\042\uffea\044\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\105\uffea\001\002\000\024\004\uffef\042\uffef\044" +
    "\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef" +
    "\001\002\000\024\004\uffeb\042\uffeb\044\uffeb\100\uffeb\101" +
    "\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\001\002\000\004" +
    "\075\u013c\001\002\000\024\004\061\042\u013b\044\060\100" +
    "\045\101\055\102\065\103\057\104\062\105\054\001\002" +
    "\000\004\004\uffa8\001\002\000\004\004\uffaa\001\002\000" +
    "\004\004\uff6f\001\002\000\004\004\uffab\001\002\000\016" +
    "\004\u0127\100\045\101\055\103\057\104\062\105\054\001" +
    "\002\000\020\004\uffa7\020\362\021\364\022\213\036\363" +
    "\037\214\107\170\001\002\000\004\004\uffa9\001\002\000" +
    "\010\023\uffb6\050\uffb6\075\uffb6\001\002\000\010\023\uffb7" +
    "\050\uffb7\075\uffb7\001\002\000\010\004\uffed\055\067\064" +
    "\070\001\002\000\004\004\uffee\001\002\000\004\022\254" +
    "\001\002\000\004\022\071\001\002\000\004\023\072\001" +
    "\002\000\004\041\073\001\002\000\004\056\075\001\002" +
    "\000\010\057\232\060\233\061\234\001\002\000\004\036" +
    "\076\001\002\000\036\004\111\005\102\006\110\007\115" +
    "\010\106\011\107\012\101\014\116\022\100\035\117\041" +
    "\112\065\120\066\114\067\113\001\002\000\056\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\040\uff76\042\uff76\043\uff76\050" +
    "\uff76\075\uff76\001\002\000\036\004\111\005\102\006\110" +
    "\007\115\010\106\011\107\012\101\014\116\022\100\035" +
    "\117\041\112\065\120\066\114\067\113\001\002\000\056" +
    "\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\040\uff7b\042\uff7b\043" +
    "\uff7b\050\uff7b\075\uff7b\001\002\000\056\013\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\040\uff80\042\uff80\043\uff80\050\uff80\075" +
    "\uff80\001\002\000\004\004\225\001\002\000\056\013\uff75" +
    "\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\040\uff75\042\uff75\043\uff75\050" +
    "\uff75\075\uff75\001\002\000\044\013\125\014\124\015\142" +
    "\016\135\017\123\020\143\021\130\024\133\025\126\026" +
    "\141\027\136\030\132\031\131\032\134\033\140\034\137" +
    "\075\224\001\002\000\056\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\040\uff7d\042\uff7d\043\uff7d\050\uff7d\075\uff7d\001\002" +
    "\000\056\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\040\uff7c\042" +
    "\uff7c\043\uff7c\050\uff7c\075\uff7c\001\002\000\056\013\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\040\uff7f\042\uff7f\043\uff7f\050" +
    "\uff7f\075\uff7f\001\002\000\064\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\022\213\023\uff79\024" +
    "\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\034\uff79\037\214\040\uff79\042\uff79\043\uff79\050" +
    "\uff79\075\uff79\107\170\001\002\000\036\004\111\005\102" +
    "\006\110\007\115\010\106\011\107\012\101\014\116\022" +
    "\100\035\117\041\112\065\120\066\114\067\113\001\002" +
    "\000\004\004\204\001\002\000\004\004\164\001\002\000" +
    "\056\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\040\uff7e\042\uff7e" +
    "\043\uff7e\050\uff7e\075\uff7e\001\002\000\036\004\111\005" +
    "\102\006\110\007\115\010\106\011\107\012\101\014\116" +
    "\022\100\035\117\041\112\065\120\066\114\067\113\001" +
    "\002\000\036\004\111\005\102\006\110\007\115\010\106" +
    "\011\107\012\101\014\116\022\100\035\117\041\112\065" +
    "\120\066\114\067\113\001\002\000\004\022\121\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\044\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\127\024\133" +
    "\025\126\026\141\027\136\030\132\031\131\032\134\033" +
    "\140\034\137\001\002\000\036\004\111\005\102\006\110" +
    "\007\115\010\106\011\107\012\101\014\116\022\100\035" +
    "\117\041\112\065\120\066\114\067\113\001\002\000\036" +
    "\004\111\005\102\006\110\007\115\010\106\011\107\012" +
    "\101\014\116\022\100\035\117\041\112\065\120\066\114" +
    "\067\113\001\002\000\036\004\111\005\102\006\110\007" +
    "\115\010\106\011\107\012\101\014\116\022\100\035\117" +
    "\041\112\065\120\066\114\067\113\001\002\000\036\004" +
    "\111\005\102\006\110\007\115\010\106\011\107\012\101" +
    "\014\116\022\100\035\117\041\112\065\120\066\114\067" +
    "\113\001\002\000\056\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\017\uff74\020\uff74\021\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\040\uff74\042\uff74\043\uff74\050\uff74\075\uff74\001\002\000" +
    "\056\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83" +
    "\021\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\040\uff83\042\uff83" +
    "\043\uff83\050\uff83\075\uff83\001\002\000\036\004\111\005" +
    "\102\006\110\007\115\010\106\011\107\012\101\014\116" +
    "\022\100\035\117\041\112\065\120\066\114\067\113\001" +
    "\002\000\036\004\111\005\102\006\110\007\115\010\106" +
    "\011\107\012\101\014\116\022\100\035\117\041\112\065" +
    "\120\066\114\067\113\001\002\000\036\004\111\005\102" +
    "\006\110\007\115\010\106\011\107\012\101\014\116\022" +
    "\100\035\117\041\112\065\120\066\114\067\113\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\036\004\111\005\102\006" +
    "\110\007\115\010\106\011\107\012\101\014\116\022\100" +
    "\035\117\041\112\065\120\066\114\067\113\001\002\000" +
    "\036\004\111\005\102\006\110\007\115\010\106\011\107" +
    "\012\101\014\116\022\100\035\117\041\112\065\120\066" +
    "\114\067\113\001\002\000\036\004\111\005\102\006\110" +
    "\007\115\010\106\011\107\012\101\014\116\022\100\035" +
    "\117\041\112\065\120\066\114\067\113\001\002\000\036" +
    "\004\111\005\102\006\110\007\115\010\106\011\107\012" +
    "\101\014\116\022\100\035\117\041\112\065\120\066\114" +
    "\067\113\001\002\000\036\004\111\005\102\006\110\007" +
    "\115\010\106\011\107\012\101\014\116\022\100\035\117" +
    "\041\112\065\120\066\114\067\113\001\002\000\036\004" +
    "\111\005\102\006\110\007\115\010\106\011\107\012\101" +
    "\014\116\022\100\035\117\041\112\065\120\066\114\067" +
    "\113\001\002\000\056\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\040\uff84\042\uff84\043\uff84\050\uff84\075\uff84\001\002\000" +
    "\056\013\uff87\014\uff87\015\uff87\016\uff87\017\123\020\143" +
    "\021\130\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\040\uff87\042\uff87" +
    "\043\uff87\050\uff87\075\uff87\001\002\000\056\013\125\014" +
    "\124\015\142\016\135\017\123\020\143\021\130\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\040\uff8d\042\uff8d\043\uff8d\050\uff8d" +
    "\075\uff8d\001\002\000\056\013\125\014\124\015\142\016" +
    "\135\017\123\020\143\021\130\023\uff93\024\133\025\126" +
    "\026\141\027\136\030\132\031\131\032\134\033\uff93\034" +
    "\137\040\uff93\042\uff93\043\uff93\050\uff93\075\uff93\001\002" +
    "\000\056\013\125\014\124\015\142\016\135\017\123\020" +
    "\143\021\130\023\uff92\024\133\025\126\026\141\027\136" +
    "\030\132\031\131\032\134\033\uff92\034\uff92\040\uff92\042" +
    "\uff92\043\uff92\050\uff92\075\uff92\001\002\000\056\013\125" +
    "\014\124\015\142\016\135\017\123\020\143\021\130\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\040\uff8c\042\uff8c\043\uff8c\050" +
    "\uff8c\075\uff8c\001\002\000\056\013\uff86\014\uff86\015\uff86" +
    "\016\uff86\017\123\020\143\021\130\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\034\uff86\040\uff86\042\uff86\043\uff86\050\uff86\075\uff86\001" +
    "\002\000\056\013\125\014\124\015\142\016\135\017\123" +
    "\020\143\021\130\023\uff91\024\133\025\126\026\141\027" +
    "\136\030\132\031\131\032\uff91\033\uff91\034\uff91\040\uff91" +
    "\042\uff91\043\uff91\050\uff91\075\uff91\001\002\000\056\013" +
    "\125\014\124\015\142\016\135\017\123\020\143\021\130" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\034\uff8f\040\uff8f\042\uff8f\043\uff8f" +
    "\050\uff8f\075\uff8f\001\002\000\056\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\040\uff8b\042\uff8b\043\uff8b\050\uff8b\075\uff8b" +
    "\001\002\000\056\013\125\014\124\015\142\016\135\017" +
    "\123\020\143\021\130\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\040" +
    "\uff8a\042\uff8a\043\uff8a\050\uff8a\075\uff8a\001\002\000\056" +
    "\013\125\014\124\015\142\016\135\017\123\020\143\021" +
    "\130\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\040\uff8e\042\uff8e\043" +
    "\uff8e\050\uff8e\075\uff8e\001\002\000\056\013\uff89\014\uff89" +
    "\015\142\016\135\017\123\020\143\021\130\023\uff89\024" +
    "\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89" +
    "\033\uff89\034\uff89\040\uff89\042\uff89\043\uff89\050\uff89\075" +
    "\uff89\001\002\000\056\013\uff88\014\uff88\015\142\016\135" +
    "\017\123\020\143\021\130\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88" +
    "\040\uff88\042\uff88\043\uff88\050\uff88\075\uff88\001\002\000" +
    "\056\013\uff85\014\uff85\015\uff85\016\uff85\017\123\020\143" +
    "\021\130\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\040\uff85\042\uff85" +
    "\043\uff85\050\uff85\075\uff85\001\002\000\056\013\125\014" +
    "\124\015\142\016\135\017\123\020\143\021\130\023\uff90" +
    "\024\133\025\126\026\141\027\136\030\132\031\131\032" +
    "\uff90\033\uff90\034\uff90\040\uff90\042\uff90\043\uff90\050\uff90" +
    "\075\uff90\001\002\000\056\013\uff82\014\uff82\015\142\016" +
    "\135\017\123\020\143\021\130\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034" +
    "\uff82\040\uff82\042\uff82\043\uff82\050\uff82\075\uff82\001\002" +
    "\000\006\022\201\107\170\001\002\000\004\004\167\001" +
    "\002\000\004\004\uff70\001\002\000\006\022\171\107\170" +
    "\001\002\000\004\004\uff6e\001\002\000\040\004\111\005" +
    "\102\006\110\007\115\010\106\011\107\012\101\014\116" +
    "\022\100\023\uff68\035\117\041\112\065\120\066\114\067" +
    "\113\001\002\000\004\023\177\001\002\000\050\013\125" +
    "\014\124\015\142\016\135\017\123\020\143\021\130\023" +
    "\uff71\024\133\025\126\026\141\027\136\030\132\031\131" +
    "\032\134\033\140\034\137\042\uff71\043\uff71\001\002\000" +
    "\006\023\uff69\043\175\001\002\000\036\004\111\005\102" +
    "\006\110\007\115\010\106\011\107\012\101\014\116\022" +
    "\100\035\117\041\112\065\120\066\114\067\113\001\002" +
    "\000\050\013\125\014\124\015\142\016\135\017\123\020" +
    "\143\021\130\023\uff72\024\133\025\126\026\141\027\136" +
    "\030\132\031\131\032\134\033\140\034\137\042\uff72\043" +
    "\uff72\001\002\000\060\013\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\023\uff6c\024\uff6c\025\uff6c\026" +
    "\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c" +
    "\040\uff6c\042\uff6c\043\uff6c\050\uff6c\075\uff6c\107\200\001" +
    "\002\000\004\004\uff6d\001\002\000\040\004\111\005\102" +
    "\006\110\007\115\010\106\011\107\012\101\014\116\022" +
    "\100\023\uff68\035\117\041\112\065\120\066\114\067\113" +
    "\001\002\000\004\023\203\001\002\000\060\013\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\040\uff6b\042\uff6b\043\uff6b\050\uff6b" +
    "\075\uff6b\107\200\001\002\000\004\022\205\001\002\000" +
    "\040\004\111\005\102\006\110\007\115\010\106\011\107" +
    "\012\101\014\116\022\100\023\uff68\035\117\041\112\065" +
    "\120\066\114\067\113\001\002\000\004\023\207\001\002" +
    "\000\056\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020" +
    "\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\040\uff6a\042" +
    "\uff6a\043\uff6a\050\uff6a\075\uff6a\001\002\000\006\042\211" +
    "\043\175\001\002\000\056\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\040\uff73\042\uff73\043\uff73\050\uff73\075\uff73\001\002" +
    "\000\060\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020" +
    "\uff77\021\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\037\221\040" +
    "\uff77\042\uff77\043\uff77\050\uff77\075\uff77\001\002\000\040" +
    "\004\111\005\102\006\110\007\115\010\106\011\107\012" +
    "\101\014\116\022\100\023\uff68\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\036\004\111\005\102\006" +
    "\110\007\115\010\106\011\107\012\101\014\116\022\100" +
    "\035\117\041\112\065\120\066\114\067\113\001\002\000" +
    "\044\013\125\014\124\015\142\016\135\017\123\020\143" +
    "\021\130\024\133\025\126\026\141\027\136\030\132\031" +
    "\131\032\134\033\140\034\137\040\216\001\002\000\062" +
    "\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021" +
    "\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66" +
    "\031\uff66\032\uff66\033\uff66\034\uff66\036\uff66\037\uff66\040" +
    "\uff66\042\uff66\043\uff66\050\uff66\075\uff66\001\002\000\004" +
    "\023\220\001\002\000\004\107\200\001\002\000\036\004" +
    "\111\005\102\006\110\007\115\010\106\011\107\012\101" +
    "\014\116\022\100\035\117\041\112\065\120\066\114\067" +
    "\113\001\002\000\044\013\125\014\124\015\142\016\135" +
    "\017\123\020\143\021\130\024\133\025\126\026\141\027" +
    "\136\030\132\031\131\032\134\033\140\034\137\040\223" +
    "\001\002\000\062\013\uff67\014\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\021\uff67\023\uff67\024\uff67\025\uff67\026\uff67" +
    "\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\036" +
    "\uff67\037\uff67\040\uff67\042\uff67\043\uff67\050\uff67\075\uff67" +
    "\001\002\000\010\057\uffe6\060\uffe6\061\uffe6\001\002\000" +
    "\064\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\022\213\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\037\214" +
    "\040\uff7a\042\uff7a\043\uff7a\050\uff7a\075\uff7a\107\170\001" +
    "\002\000\060\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\037\221" +
    "\040\uff78\042\uff78\043\uff78\050\uff78\075\uff78\001\002\000" +
    "\044\013\125\014\124\015\142\016\135\017\123\020\143" +
    "\021\130\023\230\024\133\025\126\026\141\027\136\030" +
    "\132\031\131\032\134\033\140\034\137\001\002\000\056" +
    "\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\040\uff81\042\uff81\043" +
    "\uff81\050\uff81\075\uff81\001\002\000\004\042\253\001\002" +
    "\000\004\022\245\001\002\000\004\022\241\001\002\000" +
    "\004\022\235\001\002\000\036\004\111\005\102\006\110" +
    "\007\115\010\106\011\107\012\101\014\116\022\100\035" +
    "\117\041\112\065\120\066\114\067\113\001\002\000\044" +
    "\013\125\014\124\015\142\016\135\017\123\020\143\021" +
    "\130\023\237\024\133\025\126\026\141\027\136\030\132" +
    "\031\131\032\134\033\140\034\137\001\002\000\004\075" +
    "\240\001\002\000\004\042\uffe3\001\002\000\036\004\111" +
    "\005\102\006\110\007\115\010\106\011\107\012\101\014" +
    "\116\022\100\035\117\041\112\065\120\066\114\067\113" +
    "\001\002\000\044\013\125\014\124\015\142\016\135\017" +
    "\123\020\143\021\130\023\243\024\133\025\126\026\141" +
    "\027\136\030\132\031\131\032\134\033\140\034\137\001" +
    "\002\000\004\075\244\001\002\000\004\042\uffe4\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\044\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\247\024\133" +
    "\025\126\026\141\027\136\030\132\031\131\032\134\033" +
    "\140\034\137\001\002\000\004\036\250\001\002\000\036" +
    "\004\111\005\102\006\110\007\115\010\106\011\107\012" +
    "\101\014\116\022\100\035\117\041\112\065\120\066\114" +
    "\067\113\001\002\000\044\013\125\014\124\015\142\016" +
    "\135\017\123\020\143\021\130\024\133\025\126\026\141" +
    "\027\136\030\132\031\131\032\134\033\140\034\137\075" +
    "\252\001\002\000\004\042\uffe5\001\002\000\024\004\uffe7" +
    "\042\uffe7\044\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104" +
    "\uffe7\105\uffe7\001\002\000\004\023\255\001\002\000\004" +
    "\041\256\001\002\000\040\004\300\042\uffdb\044\060\053" +
    "\257\054\303\062\274\063\310\066\302\067\113\074\305" +
    "\076\273\077\275\111\270\113\304\114\261\001\002\000" +
    "\004\022\u011a\001\002\000\004\042\u0119\001\002\000\004" +
    "\022\u0113\001\002\000\004\075\u0112\001\002\000\044\004" +
    "\uffd9\042\uffd9\044\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\062\uffd9\063\uffd9\066\uffd9\067\uffd9\074\uffd9\076\uffd9\077" +
    "\uffd9\111\uffd9\113\uffd9\114\uffd9\001\002\000\004\075\u0111" +
    "\001\002\000\044\004\uffd3\042\uffd3\044\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\062\uffd3\063\uffd3\066\uffd3\067\uffd3" +
    "\074\uffd3\076\uffd3\077\uffd3\111\uffd3\113\uffd3\114\uffd3\001" +
    "\002\000\004\075\uffcc\001\002\000\044\004\uffd6\042\uffd6" +
    "\044\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\062\uffd6\063" +
    "\uffd6\066\uffd6\067\uffd6\074\uffd6\076\uffd6\077\uffd6\111\uffd6" +
    "\113\uffd6\114\uffd6\001\002\000\004\022\u0107\001\002\000" +
    "\004\075\u0106\001\002\000\044\004\uffd4\042\uffd4\044\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\062\uffd4\063\uffd4\066" +
    "\uffd4\067\uffd4\074\uffd4\076\uffd4\077\uffd4\111\uffd4\113\uffd4" +
    "\114\uffd4\001\002\000\004\075\u0105\001\002\000\004\022" +
    "\u0102\001\002\000\004\075\u0101\001\002\000\044\004\uffd5" +
    "\042\uffd5\044\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\062" +
    "\uffd5\063\uffd5\066\uffd5\067\uffd5\074\uffd5\076\uffd5\077\uffd5" +
    "\111\uffd5\113\uffd5\114\uffd5\001\002\000\004\075\u0100\001" +
    "\002\000\016\020\362\021\364\022\213\036\363\037\214" +
    "\107\170\001\002\000\004\075\uffca\001\002\000\006\004" +
    "\164\064\355\001\002\000\004\041\346\001\002\000\004" +
    "\022\321\001\002\000\036\004\111\005\102\006\110\007" +
    "\115\010\106\011\107\012\101\014\116\022\100\035\117" +
    "\041\112\065\120\066\114\067\113\001\002\000\044\004" +
    "\300\042\uffdc\044\060\051\uffdc\052\uffdc\053\257\054\303" +
    "\062\274\063\310\066\302\067\113\074\305\076\273\077" +
    "\275\111\270\113\304\114\261\001\002\000\004\075\uffcb" +
    "\001\002\000\004\022\311\001\002\000\036\004\111\005" +
    "\102\006\110\007\115\010\106\011\107\012\101\014\116" +
    "\022\100\035\117\041\112\065\120\066\114\067\113\001" +
    "\002\000\044\013\125\014\124\015\142\016\135\017\123" +
    "\020\143\021\130\024\133\025\126\026\141\027\136\030" +
    "\132\031\131\032\134\033\140\034\137\043\313\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\044\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\315\024\133" +
    "\025\126\026\141\027\136\030\132\031\131\032\134\033" +
    "\140\034\137\001\002\000\004\075\uffc1\001\002\000\044" +
    "\004\uffda\042\uffda\044\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\062\uffda\063\uffda\066\uffda\067\uffda\074\uffda\076\uffda" +
    "\077\uffda\111\uffda\113\uffda\114\uffda\001\002\000\044\013" +
    "\125\014\124\015\142\016\135\017\123\020\143\021\130" +
    "\024\133\025\126\026\141\027\136\030\132\031\131\032" +
    "\134\033\140\034\137\075\320\001\002\000\044\004\uffcf" +
    "\042\uffcf\044\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\062" +
    "\uffcf\063\uffcf\066\uffcf\067\uffcf\074\uffcf\076\uffcf\077\uffcf" +
    "\111\uffcf\113\uffcf\114\uffcf\001\002\000\036\004\111\005" +
    "\102\006\110\007\115\010\106\011\107\012\101\014\116" +
    "\022\100\035\117\041\112\065\120\066\114\067\113\001" +
    "\002\000\044\013\125\014\124\015\142\016\135\017\123" +
    "\020\143\021\130\023\323\024\133\025\126\026\141\027" +
    "\136\030\132\031\131\032\134\033\140\034\137\001\002" +
    "\000\004\041\324\001\002\000\004\051\325\001\002\000" +
    "\012\005\341\006\342\007\337\010\343\001\002\000\010" +
    "\042\332\051\325\052\333\001\002\000\010\042\uffa1\051" +
    "\uffa1\052\uffa1\001\002\000\004\042\336\001\002\000\010" +
    "\042\uffa2\051\uffa2\052\uffa2\001\002\000\044\004\uffa3\042" +
    "\uffa3\044\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\062\uffa3" +
    "\063\uffa3\066\uffa3\067\uffa3\074\uffa3\076\uffa3\077\uffa3\111" +
    "\uffa3\113\uffa3\114\uffa3\001\002\000\004\050\334\001\002" +
    "\000\040\004\300\042\uffdb\044\060\053\257\054\303\062" +
    "\274\063\310\066\302\067\113\074\305\076\273\077\275" +
    "\111\270\113\304\114\261\001\002\000\004\042\uff9f\001" +
    "\002\000\044\004\uffa4\042\uffa4\044\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\062\uffa4\063\uffa4\066\uffa4\067\uffa4\074" +
    "\uffa4\076\uffa4\077\uffa4\111\uffa4\113\uffa4\114\uffa4\001\002" +
    "\000\004\050\uff9b\001\002\000\004\050\344\001\002\000" +
    "\004\050\uff9e\001\002\000\004\050\uff9d\001\002\000\004" +
    "\050\uff9c\001\002\000\044\004\300\042\uffdb\044\060\051" +
    "\uffdb\052\uffdb\053\257\054\303\062\274\063\310\066\302" +
    "\067\113\074\305\076\273\077\275\111\270\113\304\114" +
    "\261\001\002\000\010\042\uffa0\051\uffa0\052\uffa0\001\002" +
    "\000\040\004\300\042\uffdb\044\060\053\257\054\303\062" +
    "\274\063\310\066\302\067\113\074\305\076\273\077\275" +
    "\111\270\113\304\114\261\001\002\000\004\042\350\001" +
    "\002\000\004\114\351\001\002\000\004\022\352\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\044\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\354\024\133" +
    "\025\126\026\141\027\136\030\132\031\131\032\134\033" +
    "\140\034\137\001\002\000\004\075\uff94\001\002\000\004" +
    "\022\356\001\002\000\004\023\357\001\002\000\004\075" +
    "\360\001\002\000\044\004\uffcd\042\uffcd\044\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\062\uffcd\063\uffcd\066\uffcd\067" +
    "\uffcd\074\uffcd\076\uffcd\077\uffcd\111\uffcd\113\uffcd\114\uffcd" +
    "\001\002\000\012\020\374\021\376\036\375\037\221\001" +
    "\002\000\010\023\uffc8\050\uffc8\075\uffc8\001\002\000\040" +
    "\004\111\005\102\006\110\007\115\010\106\011\107\012" +
    "\101\014\116\022\100\035\117\041\112\065\120\066\114" +
    "\067\113\110\366\001\002\000\010\023\uffc4\050\uffc4\075" +
    "\uffc4\001\002\000\010\023\uffb8\050\uffb8\075\uffb8\001\002" +
    "\000\004\004\371\001\002\000\050\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\023\uffb5\024\133" +
    "\025\126\026\141\027\136\030\132\031\131\032\134\033" +
    "\140\034\137\050\uffb5\075\uffb5\001\002\000\010\023\uffb4" +
    "\050\uffb4\075\uffb4\001\002\000\004\022\372\001\002\000" +
    "\004\023\373\001\002\000\010\023\uffb3\050\uffb3\075\uffb3" +
    "\001\002\000\010\023\uffc6\050\uffc6\075\uffc6\001\002\000" +
    "\036\004\111\005\102\006\110\007\115\010\106\011\107" +
    "\012\101\014\116\022\100\035\117\041\112\065\120\066" +
    "\114\067\113\001\002\000\010\023\uffc2\050\uffc2\075\uffc2" +
    "\001\002\000\050\013\125\014\124\015\142\016\135\017" +
    "\123\020\143\021\130\023\uffba\024\133\025\126\026\141" +
    "\027\136\030\132\031\131\032\134\033\140\034\137\050" +
    "\uffba\075\uffba\001\002\000\044\004\uffce\042\uffce\044\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\062\uffce\063\uffce\066" +
    "\uffce\067\uffce\074\uffce\076\uffce\077\uffce\111\uffce\113\uffce" +
    "\114\uffce\001\002\000\044\004\uffd0\042\uffd0\044\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\062\uffd0\063\uffd0\066\uffd0" +
    "\067\uffd0\074\uffd0\076\uffd0\077\uffd0\111\uffd0\113\uffd0\114" +
    "\uffd0\001\002\000\036\004\111\005\102\006\110\007\115" +
    "\010\106\011\107\012\101\014\116\022\100\035\117\041" +
    "\112\065\120\066\114\067\113\001\002\000\044\013\125" +
    "\014\124\015\142\016\135\017\123\020\143\021\130\023" +
    "\u0104\024\133\025\126\026\141\027\136\030\132\031\131" +
    "\032\134\033\140\034\137\001\002\000\004\075\uffc0\001" +
    "\002\000\044\004\uffd1\042\uffd1\044\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\062\uffd1\063\uffd1\066\uffd1\067\uffd1\074" +
    "\uffd1\076\uffd1\077\uffd1\111\uffd1\113\uffd1\114\uffd1\001\002" +
    "\000\044\004\uffd7\042\uffd7\044\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\062\uffd7\063\uffd7\066\uffd7\067\uffd7\074\uffd7" +
    "\076\uffd7\077\uffd7\111\uffd7\113\uffd7\114\uffd7\001\002\000" +
    "\036\004\111\005\102\006\110\007\115\010\106\011\107" +
    "\012\101\014\116\022\100\035\117\041\112\065\120\066" +
    "\114\067\113\001\002\000\044\013\125\014\124\015\142" +
    "\016\135\017\123\020\143\021\130\023\u0109\024\133\025" +
    "\126\026\141\027\136\030\132\031\131\032\134\033\140" +
    "\034\137\001\002\000\004\041\u010a\001\002\000\040\004" +
    "\300\042\uffdb\044\060\053\257\054\303\062\274\063\310" +
    "\066\302\067\113\074\305\076\273\077\275\111\270\113" +
    "\304\114\261\001\002\000\004\042\u010c\001\002\000\046" +
    "\004\uffa6\042\uffa6\044\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\062\uffa6\063\uffa6\066\uffa6\067\uffa6\074\uffa6\076\uffa6" +
    "\077\uffa6\111\uffa6\112\u010d\113\uffa6\114\uffa6\001\002\000" +
    "\004\041\u010e\001\002\000\040\004\300\042\uffdb\044\060" +
    "\053\257\054\303\062\274\063\310\066\302\067\113\074" +
    "\305\076\273\077\275\111\270\113\304\114\261\001\002" +
    "\000\004\042\u0110\001\002\000\044\004\uffa5\042\uffa5\044" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\062\uffa5\063\uffa5" +
    "\066\uffa5\067\uffa5\074\uffa5\076\uffa5\077\uffa5\111\uffa5\113" +
    "\uffa5\114\uffa5\001\002\000\044\004\uffd8\042\uffd8\044\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\062\uffd8\063\uffd8\066" +
    "\uffd8\067\uffd8\074\uffd8\076\uffd8\077\uffd8\111\uffd8\113\uffd8" +
    "\114\uffd8\001\002\000\044\004\uffd2\042\uffd2\044\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\062\uffd2\063\uffd2\066\uffd2" +
    "\067\uffd2\074\uffd2\076\uffd2\077\uffd2\111\uffd2\113\uffd2\114" +
    "\uffd2\001\002\000\036\004\111\005\102\006\110\007\115" +
    "\010\106\011\107\012\101\014\116\022\100\035\117\041" +
    "\112\065\120\066\114\067\113\001\002\000\044\013\125" +
    "\014\124\015\142\016\135\017\123\020\143\021\130\023" +
    "\u0115\024\133\025\126\026\141\027\136\030\132\031\131" +
    "\032\134\033\140\034\137\001\002\000\004\041\u0116\001" +
    "\002\000\040\004\300\042\uffdb\044\060\053\257\054\303" +
    "\062\274\063\310\066\302\067\113\074\305\076\273\077" +
    "\275\111\270\113\304\114\261\001\002\000\004\042\u0118" +
    "\001\002\000\044\004\uff95\042\uff95\044\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\062\uff95\063\uff95\066\uff95\067\uff95" +
    "\074\uff95\076\uff95\077\uff95\111\uff95\113\uff95\114\uff95\001" +
    "\002\000\024\004\uffe2\042\uffe2\044\uffe2\100\uffe2\101\uffe2" +
    "\102\uffe2\103\uffe2\104\uffe2\105\uffe2\001\002\000\006\004" +
    "\300\044\u011b\001\002\000\016\004\u0127\100\045\101\055" +
    "\103\057\104\062\105\054\001\002\000\004\050\u011f\001" +
    "\002\000\004\050\uff99\001\002\000\004\050\uff98\001\002" +
    "\000\036\004\111\005\102\006\110\007\115\010\106\011" +
    "\107\012\101\014\116\022\100\035\117\041\112\065\120" +
    "\066\114\067\113\001\002\000\044\013\125\014\124\015" +
    "\142\016\135\017\123\020\143\021\130\024\133\025\126" +
    "\026\141\027\136\030\132\031\131\032\134\033\140\034" +
    "\137\050\u0121\001\002\000\004\004\300\001\002\000\004" +
    "\023\u0123\001\002\000\004\041\u0124\001\002\000\040\004" +
    "\300\042\uffdb\044\060\053\257\054\303\062\274\063\310" +
    "\066\302\067\113\074\305\076\273\077\275\111\270\113" +
    "\304\114\261\001\002\000\004\042\u0126\001\002\000\044" +
    "\004\uff9a\042\uff9a\044\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a\074\uff9a\076\uff9a" +
    "\077\uff9a\111\uff9a\113\uff9a\114\uff9a\001\002\000\004\004" +
    "\uffa7\001\002\000\004\004\u0129\001\002\000\006\036\363" +
    "\037\214\001\002\000\006\036\u012c\037\221\001\002\000" +
    "\004\050\uff97\001\002\000\036\004\111\005\102\006\110" +
    "\007\115\010\106\011\107\012\101\014\116\022\100\035" +
    "\117\041\112\065\120\066\114\067\113\001\002\000\044" +
    "\013\125\014\124\015\142\016\135\017\123\020\143\021" +
    "\130\024\133\025\126\026\141\027\136\030\132\031\131" +
    "\032\134\033\140\034\137\050\uff96\001\002\000\004\004" +
    "\u012f\001\002\000\014\036\uffad\037\214\043\uffad\050\036" +
    "\075\uffad\001\002\000\012\036\uffad\037\221\050\036\075" +
    "\uffad\001\002\000\010\036\363\043\u0132\075\uffb1\001\002" +
    "\000\004\004\u0135\001\002\000\004\075\uffbf\001\002\000" +
    "\004\075\uffbe\001\002\000\010\043\uffad\050\036\075\uffad" +
    "\001\002\000\006\043\u0132\075\uffb1\001\002\000\004\075" +
    "\uffb2\001\002\000\006\036\363\075\uffbc\001\002\000\004" +
    "\075\uffbd\001\002\000\024\004\ufff0\042\ufff0\044\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\001\002" +
    "\000\006\002\ufff3\106\ufff3\001\002\000\024\004\uffe8\042" +
    "\uffe8\044\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\105\uffe8\001\002\000\016\020\u013f\021\u0141\022\213\036" +
    "\363\037\214\107\170\001\002\000\012\020\u0142\021\u0144" +
    "\036\u0143\037\221\001\002\000\010\023\uffc9\050\uffc9\075" +
    "\uffc9\001\002\000\010\023\uffb9\050\uffb9\075\uffb9\001\002" +
    "\000\010\023\uffc5\050\uffc5\075\uffc5\001\002\000\010\023" +
    "\uffc7\050\uffc7\075\uffc7\001\002\000\036\004\111\005\102" +
    "\006\110\007\115\010\106\011\107\012\101\014\116\022" +
    "\100\035\117\041\112\065\120\066\114\067\113\001\002" +
    "\000\010\023\uffc3\050\uffc3\075\uffc3\001\002\000\050\013" +
    "\125\014\124\015\142\016\135\017\123\020\143\021\130" +
    "\023\uffbb\024\133\025\126\026\141\027\136\030\132\031" +
    "\131\032\134\033\140\034\137\050\uffbb\075\uffbb\001\002" +
    "\000\024\004\uffe9\042\uffe9\044\uffe9\100\uffe9\101\uffe9\102" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002\000\004\022\u0148" +
    "\001\002\000\020\004\u0127\023\uffe0\100\045\101\055\103" +
    "\057\104\062\105\054\001\002\000\004\023\u0150\001\002" +
    "\000\004\004\u014f\001\002\000\006\023\uffe1\043\u014d\001" +
    "\002\000\006\023\uffde\043\uffde\001\002\000\016\004\u0127" +
    "\100\045\101\055\103\057\104\062\105\054\001\002\000" +
    "\006\023\uffdf\043\uffdf\001\002\000\006\023\uffdd\043\uffdd" +
    "\001\002\000\006\041\uffad\050\036\001\002\000\004\041" +
    "\u0152\001\002\000\040\004\300\042\uffdb\044\060\053\257" +
    "\054\303\062\274\063\310\066\302\067\113\074\305\076" +
    "\273\077\275\111\270\113\304\114\261\001\002\000\004" +
    "\042\u0154\001\002\000\024\004\uffec\042\uffec\044\uffec\100" +
    "\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec\001\002" +
    "\000\006\070\ufff8\106\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\012\002\006\021\003\022\004\023\005\001" +
    "\001\000\010\016\017\017\016\020\020\001\001\000\004" +
    "\023\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0154\001\001\000\006\025\025\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\027\001\001\000\002\001\001\000\004\024" +
    "\031\001\001\000\004\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\050\006\046\012\063\013\062\027\042\030\047\034" +
    "\052\052\051\055\043\056\065\063\045\064\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\050\006" +
    "\046\012\063\013\062\027\042\030\u0139\052\051\055\043" +
    "\056\065\063\045\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u012d\001\001\000\006\061\364\065\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\073" +
    "\001\001\000\004\004\230\001\001\000\002\001\001\000" +
    "\014\015\103\036\076\062\104\063\102\064\055\001\001" +
    "\000\002\001\001\000\014\015\103\036\076\062\226\063" +
    "\102\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\211\001\001\000\016\015\103\035\207\036" +
    "\076\062\172\063\102\064\055\001\001\000\002\001\001" +
    "\000\006\063\164\064\055\001\001\000\002\001\001\000" +
    "\014\015\103\036\076\062\162\063\102\064\055\001\001" +
    "\000\014\015\103\036\076\062\161\063\102\064\055\001" +
    "\001\000\002\001\001\000\014\015\103\036\076\062\121" +
    "\063\102\064\055\001\001\000\002\001\001\000\014\015" +
    "\103\036\076\062\160\063\102\064\055\001\001\000\014" +
    "\015\103\036\076\062\157\063\102\064\055\001\001\000" +
    "\014\015\103\036\076\062\156\063\102\064\055\001\001" +
    "\000\014\015\103\036\076\062\155\063\102\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\103" +
    "\036\076\062\154\063\102\064\055\001\001\000\014\015" +
    "\103\036\076\062\153\063\102\064\055\001\001\000\014" +
    "\015\103\036\076\062\152\063\102\064\055\001\001\000" +
    "\014\015\103\036\076\062\151\063\102\064\055\001\001" +
    "\000\014\015\103\036\076\062\150\063\102\064\055\001" +
    "\001\000\014\015\103\036\076\062\147\063\102\064\055" +
    "\001\001\000\014\015\103\036\076\062\146\063\102\064" +
    "\055\001\001\000\014\015\103\036\076\062\145\063\102" +
    "\064\055\001\001\000\014\015\103\036\076\062\144\063" +
    "\102\064\055\001\001\000\014\015\103\036\076\062\143" +
    "\063\102\064\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\171\015\103\035\173" +
    "\036\076\062\172\063\102\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\103" +
    "\036\076\062\175\063\102\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\201" +
    "\015\103\035\173\036\076\062\172\063\102\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\205\015\103\035\173\036\076\062\172\063" +
    "\102\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\216\015\103\035\173\036\076\062\172\063\102" +
    "\064\055\001\001\000\014\015\103\036\076\062\214\063" +
    "\102\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\103\036" +
    "\076\062\221\063\102\064\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\103\036\076\062\235\063\102" +
    "\064\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\103\036\076\062\241\063\102" +
    "\064\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\103\036\076\062\245\063\102" +
    "\064\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\103\036\076\062\250\063\102\064\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\007\300\010\306" +
    "\011\276\012\063\013\062\015\265\037\261\040\264\042" +
    "\271\047\275\050\257\051\266\052\270\053\305\054\262" +
    "\055\263\063\045\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\364\065\360\001\001\000\002\001\001\000\006\063" +
    "\164\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\103\036\076\062\316\063\102\064\055\001" +
    "\001\000\042\007\300\010\306\011\276\012\063\013\062" +
    "\015\265\037\261\040\264\042\271\047\275\051\266\052" +
    "\270\054\315\055\263\063\045\064\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\103\036\076\062" +
    "\311\063\102\064\055\001\001\000\002\001\001\000\014" +
    "\015\103\036\076\062\313\063\102\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\103\036\076\062" +
    "\321\063\102\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\325\045\326\001\001\000\004\046" +
    "\337\001\001\000\006\045\330\066\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\300\010\306\011\276" +
    "\012\063\013\062\015\265\037\261\040\264\042\271\047" +
    "\275\050\334\051\266\052\270\053\305\054\262\055\263" +
    "\063\045\064\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\007\300\010" +
    "\306\011\276\012\063\013\062\015\265\037\261\040\264" +
    "\042\271\047\275\050\344\051\266\052\270\053\305\054" +
    "\262\055\263\063\045\064\055\001\001\000\002\001\001" +
    "\000\046\007\300\010\306\011\276\012\063\013\062\015" +
    "\265\037\261\040\264\042\271\047\275\050\346\051\266" +
    "\052\270\053\305\054\262\055\263\063\045\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\103\036\076\062\352\063\102\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\103\036\076" +
    "\062\366\063\102\064\055\067\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\103\036\076" +
    "\062\376\063\102\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\103\036\076\062\u0102\063\102\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\103\036\076\062\u0107\063\102\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\007\300\010\306\011\276\012\063\013\062\015\265\037" +
    "\261\040\264\042\271\047\275\050\u010a\051\266\052\270" +
    "\053\305\054\262\055\263\063\045\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\007\300\010\306\011\276\012\063\013\062\015\265\037" +
    "\261\040\264\042\271\047\275\050\u010e\051\266\052\270" +
    "\053\305\054\262\055\263\063\045\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\103\036\076\062\u0113\063\102\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\007\300\010\306\011\276\012\063\013\062\015\265\037" +
    "\261\040\264\042\271\047\275\050\u0116\051\266\052\270" +
    "\053\305\054\262\055\263\063\045\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\063\013\062\041\u011c\043\u011b\052\u011d\063\045\064" +
    "\055\001\001\000\004\056\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\103\036" +
    "\076\062\u011f\063\102\064\055\001\001\000\002\001\001" +
    "\000\014\012\063\013\062\052\u0121\063\045\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\007\300" +
    "\010\306\011\276\012\063\013\062\015\265\037\261\040" +
    "\264\042\271\047\275\050\u0124\051\266\052\270\053\305" +
    "\054\262\055\263\063\045\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\061\u012a\065\u0129\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\103\036\076\062\u012c\063\102" +
    "\064\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\060\u0130\065\u012f\001\001\000\004\060\u0137\001\001" +
    "\000\006\057\u0132\061\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u0135\001\001" +
    "\000\004\057\u0136\001\001\000\002\001\001\000\004\061" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\u013f\065\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\103\036" +
    "\076\062\u0144\063\102\064\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\u014b\032\u0148\033\u014a\056\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u014d\056\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0150\001\001\000\002\001" +
    "\001\000\046\007\300\010\306\011\276\012\063\013\062" +
    "\015\265\037\261\040\264\042\271\047\275\050\u0152\051" +
    "\266\052\270\053\305\054\262\055\263\063\045\064\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Graphik_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Graphik_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Graphik_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public Archivo Ejecucion = null;
    public String archivonombre = "";

    public void syntax_error(Symbol s){
        TitusNotificaciones.InsertarError("Sintactico",s.value + " no reconocido", s.left, s.right);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Graphik_Sintactico$actions {

//Codigo de acciones
      

  private final Graphik_Sintactico parser;

  /** Constructor */
  CUP$Graphik_Sintactico$actions(Graphik_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Graphik_Sintactico$do_action(
    int                        CUP$Graphik_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Graphik_Sintactico$parser,
    java.util.Stack            CUP$Graphik_Sintactico$stack,
    int                        CUP$Graphik_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Graphik_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Graphik_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LISTA_DIMENSIONES ::= TCorchete_Abre EXP TCorchete_Cierra 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 
                                                        ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                                        lista.add((FNodoExpresion)exp);
                                                        RESULT = lista;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LISTA_DIMENSIONES ::= LISTA_DIMENSIONES TCorchete_Abre EXP TCorchete_Cierra 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                            ArrayList<FNodoExpresion> listadimension = (ArrayList<FNodoExpresion>)ld;
                                                            listadimension.add((FNodoExpresion)exp);
                                                            RESULT = listadimension;

                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LISTA_EXP_FUNCION ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<FNodoExpresion>(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LISTA_EXP_FUNCION ::= LISTA_EXP 
            {
              Object RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = L;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LLAMADA_FUNCION ::= TLlamarHk Id TParentesis_Abre LISTA_EXP_FUNCION TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Haskell);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        RESULT = lo; 
                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LLAMADA_FUNCION ::= TLlamar Id TParentesis_Abre LISTA_EXP_FUNCION TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        RESULT = lo; 
                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LLAMADA_FUNCION ::= TLlamar OBJETO Id TParentesis_Abre LISTA_EXP_FUNCION TParentesis_Cierra 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                                                                        flo.InsertarHijo(lo);
                                                                                                        RESULT = flo; 
                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // HIJO ::= Id TParentesis_Abre LISTA_EXP_FUNCION TParentesis_Cierra TPunto 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		
                                                                                    FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                    FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                    RESULT = lo;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HIJO",50, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // HIJO ::= Id TPunto 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                        RESULT = lo;
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HIJO",50, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OBJETO ::= HIJO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OBJETO",49, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OBJETO ::= OBJETO HIJO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                FLlamadaObjeto padre = (FLlamadaObjeto)p;
                                FLlamadaObjeto hijo = (FLlamadaObjeto)h;
                                padre.InsertarHijo(hijo);
                                RESULT = padre;
                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OBJETO",49, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LISTA_EXP ::= EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                lista.add((FNodoExpresion)t);
                                RESULT = lista; 
                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",27, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LISTA_EXP ::= LISTA_EXP TComa EXP 
            {
              Object RESULT =null;
		int listauxleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int listauxright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object listaux = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                    ArrayList<FNodoExpresion> lista = (ArrayList<FNodoExpresion>)listaux;
                                                    lista.add((FNodoExpresion)exp);
                                                    RESULT = lista;
                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",27, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARREGLO ::= TLlave_Abre LISTA_EXP TLlave_Cierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                    FNodoArreglo fa = new FNodoArreglo((ArrayList<FNodoExpresion>)t);
                                                    FNodoExpresion fe = new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, aleft, aright, fa); 
                                                    RESULT = fe;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",28, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= TColumna TParentesis_Abre EXP TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TColumna, Constante.TColumna, tleft, tright, (FNodoExpresion)exp); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, (FLlamadaObjeto)t); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= ARREGLO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = t; 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= Id LISTA_DIMENSIONES 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int listatleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int listatright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object listat = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)listat);
                                                FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, hijo);  
                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= OBJETO Id LISTA_DIMENSIONES 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, flo); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= Id 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                        RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, hijo); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= OBJETO Id 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		                            
                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                            flo.InsertarHijo(hijo);
                            RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, flo); 
                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= Falso 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, tleft, tright, false); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= Verdadero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, tleft, tright, true); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TCadena, Constante.TCadena, tleft, tright, t.toString().toLowerCase().substring(1, t.toString().toLowerCase().length()-1)); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= Caracter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t.toString().toLowerCase().substring(1, t.toString().toLowerCase().length()-1)); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= Decimal 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t.toString().toLowerCase()); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= Entero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, tleft, tright, t.toString().toLowerCase()); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= TParentesis_Abre EXP TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                            RESULT = t; 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= TMenos EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= EXP TDisminucion 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, null, Constante.TDecremento, Constante.TDecremento, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP TAumento 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, null, Constante.TAumento, Constante.TAumento, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP TPotencia EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPotenciaG, Constante.TPotenciaG, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP TDivision EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDivision, Constante.TDivision, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP TPor EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPor, Constante.TPor, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP TMenos EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP TMas EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMas, Constante.TMas, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP TDiferenciacion EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDiferenciacion, Constante.TDiferenciacion, tleft, tright, null); 
                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP TIgualacion EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                            RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIgualacion, Constante.TIgualacion, tleft, tright, null); 
                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP TMenorIgual EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenorIgual, Constante.TMenorIgual, tleft, tright, null); 
                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP TMayorIgual EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayorIgual, Constante.TMayorIgual, tleft, tright, null); 
                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP TMenor EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenor, Constante.TMenor, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP TMayor EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayor, Constante.TMayor, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= TNot EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                            RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TNot, Constante.TNot, tleft, tright, null); 
                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP TAnd EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAnd, Constante.TAnd, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= EXP TXor EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TXor, Constante.TXor, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP TOr EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TOr, Constante.TOr, tleft, tright, null); 
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_HACER_MIENTRAS ::= THacer TLlave_Abre CUERPO TLlave_Cierra TMientras TParentesis_Abre EXP TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		  
                                                                                                                        Ambito ambito = new Ambito(Constante.TMientras, (ArrayList<Simbolo>)c);
                                                                                                                        for(Simbolo sim: ambito.TablaSimbolo){
                                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                                        }
                                                                                                                        FHacerMientras m = new FHacerMientras((FNodoExpresion)exp, ambito);
                                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.THacer, Constante.THacer, Constante.THacer, tleft, tright, m.Ambito, m);
                                                                                                                        RESULT = s;
                                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HACER_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_MIENTRAS ::= TMientras TParentesis_Abre EXP TParentesis_Cierra TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		  
                                                                                                                        Ambito ambito = new Ambito(Constante.TMientras, (ArrayList<Simbolo>)c);
                                                                                                                        for(Simbolo sim: ambito.TablaSimbolo){
                                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                                        }
                                                                                                                        FMientras m = new FMientras((FNodoExpresion)exp, ambito);
                                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TMientras, Constante.TMientras, Constante.TMientras, tleft, tright, m.Ambito, m);
                                                                                                                        RESULT = s;
                                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION_PARA ::= TVar TIPO_DATO Id LISTA_DIMENSIONES TIgual EXP 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                                FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)d, (FNodoExpresion)exp);
                                                                                FDeclaracion fd = new FDeclaracion(Constante.TPublico, Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                                Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                RESULT = s;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",31, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION_PARA ::= TVar TIPO_DATO Id VALOR_ASIGNACION 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                                FDeclaracion fd = new FDeclaracion(Constante.TPublico ,Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp, tleft, tright); 
                                                                                Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                RESULT = s;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",31, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACCION_ANTERIOR ::= ASIGNACION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION_ANTERIOR",33, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCION_ANTERIOR ::= DECLARACION_PARA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION_ANTERIOR",33, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_PARA ::= TPara TParentesis_Abre ACCION_ANTERIOR TDosPuntos EXP TDosPuntos ASIGNACION TParentesis_Cierra TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                            Ambito ambito = new Ambito(Constante.TPara, (ArrayList<Simbolo>)c);
                            for(Simbolo sim: ambito.TablaSimbolo){
                                sim.Ambito.Padre = ambito;
                            }
                            FPara fp = new FPara((Simbolo)aa,(FNodoExpresion)exp,(Simbolo)ap, ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TPara, Constante.TPara, Constante.TPara, tleft, tright, fp.Ambito, fp);
                            RESULT = s;
                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",32, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PUNTUAL ::= Caracter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t.toString().toLowerCase());  
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTUAL",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PUNTUAL ::= Cadena 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TCadena, Constante.TCadena, tleft, tright, t.toString().toLowerCase());  
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTUAL",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PUNTUAL ::= Decimal 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t.toString().toLowerCase());  
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTUAL",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PUNTUAL ::= Entero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, tleft, tright, t.toString().toLowerCase());  
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTUAL",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DEFECTO ::= TDefecto TDosPuntos CUERPO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                Ambito ambito = new Ambito(Constante.TCaso, (ArrayList<Simbolo>)c);
                                                for(Simbolo sim : ambito.TablaSimbolo){
                                                    sim.Ambito.Padre = ambito;
                                                }
                                                FCaso caso = new FCaso(null, ambito);
                                                RESULT = caso;
                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",52, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASOS ::= TCaso PUNTUAL TDosPuntos CUERPO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        Ambito ambito = new Ambito(Constante.TCaso, (ArrayList<Simbolo>)c);
                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                            sim.Ambito.Padre = ambito;
                                                        }
                                                        FNodoExpresion puntual = (FNodoExpresion)p;
                                                        FCaso caso = new FCaso(puntual, ambito);
                                                        RESULT = caso;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",35, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTA_CASOS ::= CASOS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                ArrayList<FCaso> lista = new ArrayList<>();
                                lista.add((FCaso)c);
                                RESULT = lista;
                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",34, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_CASOS ::= LISTA_CASOS CASOS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                            ArrayList<FCaso> lista = (ArrayList<FCaso>)l;
                                            lista.add((FCaso)c);
                                            RESULT = lista;
                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",34, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_SELECCION ::= TSeleccion TParentesis_Abre EXP TParentesis_Cierra TLlave_Abre LISTA_CASOS TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                            Ambito ambito = new Ambito(Constante.TSeleccion, (ArrayList<Simbolo>)l);
                            ArrayList<FCaso> casos = (ArrayList<FCaso>)l;
                            for(FCaso caso: casos){
                                for(Simbolo sim: caso.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                                }
                            }

                            FSelecciona fs = new FSelecciona((FNodoExpresion)exp, casos,null,ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, tleft, tright, fs.Ambito, fs);
                            RESULT = s;
                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_SELECCION ::= TSeleccion TParentesis_Abre EXP TParentesis_Cierra TLlave_Abre LISTA_CASOS DEFECTO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                            Ambito ambito = new Ambito(Constante.TSeleccion, (ArrayList<Simbolo>)l);
                            ArrayList<FCaso> casos = (ArrayList<FCaso>)l;
                            for(FCaso caso: casos){
                                for(Simbolo sim: caso.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                                }
                            }
                            FCaso defecto = (FCaso)d;
                            for(Simbolo sim: defecto.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                            }
                            FSelecciona fs = new FSelecciona((FNodoExpresion)exp,casos,defecto,ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, tleft, tright, fs.Ambito, fs);
                            RESULT = s;
                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_IF ::= TSi TParentesis_Abre EXP TParentesis_Cierra TLlave_Abre CUERPO TLlave_Cierra TSino TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int csnleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int csnright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object csn = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                    Ambito ambitosi = new Ambito(Constante.TSi, (ArrayList<Simbolo>)cs);
                    Ambito ambitosino = new Ambito(Constante.TSiNo, (ArrayList<Simbolo>)csn);
                    Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
                            
                    for(Simbolo sim: ambitosi.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }
                    
                    for(Simbolo sim: ambitosino.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }        
                    FSi fs = new FSi((FNodoExpresion)exp, ambitosi, ambitosino, ambito);
                    Simbolo s = new Simbolo(Constante.TPublico, Constante.TSi, Constante.TSi, Constante.TSi, tleft, tright, fs.Ambito, fs);
                    RESULT = s;
                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",39, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_IF ::= TSi TParentesis_Abre EXP TParentesis_Cierra TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                    Ambito ambitosi = new Ambito(Constante.TSi, (ArrayList<Simbolo>)cs);
                    Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
                            
                    for(Simbolo sim: ambitosi.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }                    
                            
                    FSi fs = new FSi((FNodoExpresion)exp, ambitosi, null, ambito);
                    Simbolo s = new Simbolo(Constante.TPublico, Constante.TSi, Constante.TSi, Constante.TSi, tleft, tright, fs.Ambito, fs);
                    RESULT = s;
                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",39, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_DATO ::= Id 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		RESULT = t.toString().toLowerCase();
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_DATO ::= TBool 
            {
              Object RESULT =null;
		RESULT = Constante.TBool;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO_DATO ::= TCaracter 
            {
              Object RESULT =null;
		RESULT = Constante.TCaracter;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO_DATO ::= TCadena 
            {
              Object RESULT =null;
		RESULT = Constante.TCadena;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO_DATO ::= TDecimal 
            {
              Object RESULT =null;
		RESULT = Constante.TDecimal;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO_DATO ::= TEntero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		RESULT = Constante.TEntero;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VISIBILIDAD ::= 
            {
              Object RESULT =null;
		RESULT = Constante.TPublico;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VISIBILIDAD ::= TDosPuntos TProtegido 
            {
              Object RESULT =null;
		RESULT = Constante.TProtegido;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VISIBILIDAD ::= TDosPuntos TPrivado 
            {
              Object RESULT =null;
		RESULT = Constante.TPrivado;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VISIBILIDAD ::= TDosPuntos TPublico 
            {
              Object RESULT =null;
		RESULT = Constante.TPublico;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_ID ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<FDeclaracion>();
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",45, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_ID ::= TComa Id VISIBILIDAD LISTA_ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase() ,Constante.TVariable, "", t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright);
                                                        ArrayList<FDeclaracion> lista = (ArrayList<FDeclaracion>)l;
                                                        lista.add(fd);
                                                        RESULT = lista;          
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",45, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NUEVO_OBJETO ::= TNuevo Id TParentesis_Abre TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		 RESULT = new FNodoExpresion(null, null, Constante.TNuevo, t.toString().toLowerCase(), tleft, tright, null); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("NUEVO_OBJETO",53, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR_ASIGNACION ::= TIgual NUEVO_OBJETO 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_ASIGNACION",47, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR_ASIGNACION ::= TIgual EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_ASIGNACION",47, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= LLAMADA_DISMINUCION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= LLAMADA_AUMENTO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= Id VALOR_ASIGNACION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAsignacion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= OBJETO Id VALOR_ASIGNACION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAsignacion, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= Id LISTA_DIMENSIONES TIgual EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAsignacion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= OBJETO Id LISTA_DIMENSIONES TIgual EXP 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAsignacion,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= TVar TIPO_DATO Id LISTA_DIMENSIONES VISIBILIDAD 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                    FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, null);
                                                                    FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                    Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                    ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= TVar TIPO_DATO Id LISTA_DIMENSIONES VISIBILIDAD VALOR_ASIGNACION 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                                FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, (FNodoExpresion)exp);
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= TVar TIPO_DATO Id VISIBILIDAD VALOR_ASIGNACION 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp, tleft, tright); 
                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= TVar TIPO_DATO Id VISIBILIDAD LISTA_ID 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright); 
                                                                                ArrayList<FDeclaracion> listad = (ArrayList<FDeclaracion>)l;
                                                                                listad.add(fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();
                                                                                for(FDeclaracion dec : listad){
                                                                                    dec.Tipo = td.toString().toLowerCase();
                                                                                    Simbolo s = new Simbolo(dec.Visibilidad, dec.Tipo, dec.Nombre, Constante.TDeclaracion, tleft, tright, new Ambito(dec.Nombre, new ArrayList<Simbolo>()), dec);
                                                                                    lista.add(s);
                                                                                }
                                                                                RESULT = lista;
                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMADA_IMPRIMIR ::= TImprimir TParentesis_Abre EXP TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                FImprimir fg = new FImprimir((FNodoExpresion)exp);
                                                                                Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TImprimir, Constante.TImprimir, tleft, tright, fg.Ambito, fg);
                                                                                RESULT = s;
                                                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA_GRAPHIKAR ::= TGraphikar_Funcion TParentesis_Abre EXP TComa EXP TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        FGraphikar fg = new FGraphikar((FNodoExpresion)exp1 ,(FNodoExpresion)exp2, new Ambito(Constante.TGraficarFuncion, new ArrayList<Simbolo>()));
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TGraficarFuncion, Constante.TGraficarFuncion, tleft, tright, fg.Ambito, fg);
                                                                                                        RESULT = s;
                                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_GRAPHIKAR",6, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADA_DISMINUCION ::= Id LISTA_DIMENSIONES TDisminucion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TDisminucion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_DISMINUCION",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LLAMADA_DISMINUCION ::= OBJETO Id LISTA_DIMENSIONES TDisminucion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TDisminucion,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_DISMINUCION",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADA_DISMINUCION ::= Id TDisminucion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TDisminucion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_DISMINUCION",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LLAMADA_DISMINUCION ::= OBJETO Id TDisminucion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TDisminucion, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_DISMINUCION",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLAMADA_AUMENTO ::= Id LISTA_DIMENSIONES TAumento 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAumento, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_AUMENTO",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADA_AUMENTO ::= OBJETO Id LISTA_DIMENSIONES TAumento 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAumento,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_AUMENTO",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADA_AUMENTO ::= Id TAumento 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAumento, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_AUMENTO",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAMADA_AUMENTO ::= OBJETO Id TAumento 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAumento, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_AUMENTO",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAMADA_METODO ::= LLAMADA_IMPRIMIR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",7, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMADA_METODO ::= LLAMADA_GRAPHIKAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",7, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAMADA_METODO ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                    FLlamadaObjeto lo = (FLlamadaObjeto)t; 
                                    RESULT = new Simbolo(Constante.TPublico, Constante.TMetodo, Constante.TMetodo, Constante.TMetodo, lo.Fila, lo.Columna, new Ambito(Constante.TMetodo, new ArrayList<Simbolo>()), lo); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",7, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= TLlamar TDatos TParentesis_Abre TParentesis_Cierra TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		Simbolo s = new Simbolo(Constante.TPublico, Constante.TDatos, Constante.TDatos, Constante.TDatos, tleft, tright, new Ambito(Constante.TDatos, new ArrayList<Simbolo>()), null); 
                                                                                    ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                                                    l.add(s);
                                                                                    RESULT = l;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= LLAMADA_METODO TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= TRetornar EXP TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 Simbolo s = new Simbolo(Constante.TPublico, Constante.TRetornar, Constante.TRetornar, Constante.TRetornar, tleft, tright, new Ambito(Constante.TRetornar, new ArrayList<Simbolo>()), (FNodoExpresion)exp); 
                                                        ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                        l.add(s);
                                                        RESULT = l;
                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= TTerminar TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 Simbolo s = new Simbolo(Constante.TPublico, Constante.TTerminar, Constante.TTerminar, Constante.TTerminar, tleft, tright, new Ambito(Constante.TTerminar, new ArrayList<Simbolo>()), null); 
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l;
                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= TContinuar TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 Simbolo s = new Simbolo(Constante.TPublico, Constante.TContinuar, Constante.TContinuar, Constante.TContinuar, tleft, tright, new Ambito(Constante.TContinuar, new ArrayList<Simbolo>()), null);
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SENTENCIA_HACER_MIENTRAS TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= ASIGNACION TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= DECLARACION TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)s;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Simbolo>();
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",38, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO ::= LISTA_SENTENCIAS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",38, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= TIPO_DATO Id 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 
                                        FDeclaracion fd = new FDeclaracion(Constante.TPublico, Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright); 
                                        Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                        ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                        lista.add(s);
                                        RESULT = lista;
                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_PARAMETRO ::= PARAMETRO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = p; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_PARAMETRO ::= LISTA_PARAMETRO TComa PARAMETRO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)p;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",25, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_PARAMETROS ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Simbolo>(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_PARAMETROS ::= LISTA_PARAMETRO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO_INICIO ::= TVacio TInicio TParentesis_Abre TParentesis_Cierra TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        Ambito ambito = new Ambito(Constante.TInicio, (ArrayList<Simbolo>)c);
                                                                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                        }
                                                                                                        FMetodo metodo = new FMetodo(Constante.TPublico, new ArrayList<Simbolo>(), ambito, tleft, tright, Constante.TVacio, t.toString().toLowerCase());
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TInicio, Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                        lista.add(s);
                                                                                                        RESULT = lista;
                                                                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_INICIO",4, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DONDE ::= TDondeTodo TParentesis_Abre EXP TParentesis_Cierra TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		 RESULT = new FDonde(Constante.TDondeTodo, (FNodoExpresion)exp1, null, tleft, tright);
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDE",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DONDE ::= TDondeCada TParentesis_Abre EXP TParentesis_Cierra TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		 RESULT = new FDonde(Constante.TDondeCada, (FNodoExpresion)exp1, null, tleft, tright);
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDE",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DONDE ::= TDonde TParentesis_Abre EXP TParentesis_Cierra TIgual EXP TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 RESULT = new FDonde(Constante.TDonde, (FNodoExpresion)exp1, (FNodoExpresion)exp2, tleft, tright);
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDE",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROCESAR ::= TProcesar TIgual EXP TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 RESULT = new FProcesar((FNodoExpresion)exp, tleft, tright); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PROCESAR",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO_DATOS ::= TVacio TDatos TParentesis_Abre TParentesis_Cierra TLlave_Abre PROCESAR DONDE TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                        Ambito ambito = new Ambito(Constante.TDatos, new ArrayList<>());
                                                                                                        Simbolo a = new Simbolo(Constante.TPublico, Constante.TProcesar, Constante.TProcesar, Constante.TProcesar, tleft, tright, null, (FProcesar)p);                                                                                                         
                                                                                                        Simbolo b = new Simbolo(Constante.TPublico, Constante.TDonde, Constante.TDonde, Constante.TDonde, tleft, tright, null, (FDonde)d);                                                                                                         
                                                                                                        ambito.TablaSimbolo.add(a);
                                                                                                        ambito.TablaSimbolo.add(b);
                                                                                                        FMetodo metodo = new FMetodo(Constante.TPublico, new ArrayList<Simbolo>(), ambito, tleft, tright, Constante.TVacio, t.toString().toLowerCase());
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TDatos, Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                        lista.add(s);
                                                                                                        RESULT = lista;
                                                                                                        
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_DATOS",3, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODO ::= ASIGNACION TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                            ArrayList<Simbolo> lista = new ArrayList<>();
                                            lista.add((Simbolo)t);
                                            RESULT = lista; 
                                            
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO ::= DECLARACION TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 RESULT = t;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODO ::= METODO_INICIO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= METODO_DATOS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO ::= TIPO_DATO_METODO Id TParentesis_Abre LISTA_PARAMETROS TParentesis_Cierra VISIBILIDAD TLlave_Abre CUERPO TLlave_Cierra 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                                                                                Ambito ambito = new Ambito(t.toString().toLowerCase(), (ArrayList<Simbolo>)c);
                                                                                                                                                for(Simbolo sim : ambito.TablaSimbolo){
                                                                                                                                                    sim.Ambito.Padre = ambito;
                                                                                                                                                }
                                                                                                                                                ArrayList<Simbolo>pp = (ArrayList<Simbolo>)p;
                                                                                                                                                for(Simbolo sim : pp){
                                                                                                                                                    sim.Ambito.Padre = ambito;
                                                                                                                                                }
                                                                                                                                                FMetodo metodo = new FMetodo(v.toString().toLowerCase(), pp, ambito, tleft, tright, td.toString().toLowerCase(), t.toString().toLowerCase());
                                                                                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                                                                ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                                                                lista.add(s);
                                                                                                                                                RESULT = lista;
                                                                                                                                                
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO_METODO ::= TVacio 
            {
              Object RESULT =null;
		 RESULT = Constante.TVacio; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_METODO",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO_METODO ::= TIPO_DATO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t.toString().toLowerCase(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_METODO",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_METODOS ::= METODO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_METODOS",26, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_METODOS ::= LISTA_METODOS METODO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)s;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_METODOS",26, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // HERENCIA ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HERENCIA",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // HERENCIA ::= THereda Id 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t.toString().toLowerCase(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HERENCIA",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALS ::= TAls Id HERENCIA VISIBILIDAD TLlave_Abre LISTA_METODOS TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		
                                                                                        Ambito ambito = new Ambito(t.toString().toLowerCase(), (ArrayList<Simbolo>)c);
                                                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                                                            sim.Ambito.Padre = ambito;
                                                                                        }
                                                                                        FAls als = new FAls(t.toString().toLowerCase(), h.toString().toLowerCase(), ambito);
                                                                                        Simbolo s = new Simbolo(v.toString().toLowerCase(), Constante.TAls, t.toString().toLowerCase(), Constante.TAls, tleft, tright, ambito, als); 
                                                                                        ArrayList<Simbolo> listapadre = new ArrayList<>();
                                                                                        listapadre.add(s);
                                                                                        Ambito ambitopadre = new Ambito(t.toString().toLowerCase(), listapadre);
                                                                                        ambito.Padre = ambitopadre;
                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                        lista.add(s);
                                                                                        RESULT = lista;
                                                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_ALS ::= ALS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ALS",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_ALS ::= LISTA_ALS ALS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)m;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ALS",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HASKELL ::= TIncluye Id TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(t.toString().toLowerCase()); RESULT = lista; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HASKELL",14, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_HASKELL ::= HASKELL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_HASKELL",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_HASKELL ::= LISTA_HASKELL HASKELL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<String> lista = (ArrayList<String>)l;
                                                        ArrayList<String> sent = (ArrayList<String>)m;
                                                        for(String sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_HASKELL",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADA_HASKELL ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_HASKELL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LLAMADA_HASKELL ::= LISTA_HASKELL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_HASKELL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GRAPHIK ::= TImportar Id TPunto TGk TInterrogacion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(t.toString().toLowerCase()); RESULT = lista; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAPHIK",17, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_GRAPHIK ::= GRAPHIK 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_GRAPHIK",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_GRAPHIK ::= LISTA_GRAPHIK GRAPHIK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		
                                                        ArrayList<String> lista = (ArrayList<String>)l;
                                                        ArrayList<String> sent = (ArrayList<String>)m;
                                                        for(String sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_GRAPHIK",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES_GRAPHIK ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES_GRAPHIK",15, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES_GRAPHIK ::= LISTA_GRAPHIK 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES_GRAPHIK",15, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES_GRAPHIK LLAMADA_HASKELL LISTA_ALS 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.peek()).value;
		 Archivo archivo = new Archivo(parser.archivonombre, (ArrayList<Simbolo>)a, (ArrayList<String>)h, (ArrayList<String>)g); 
                                                                        ArrayList<Simbolo> als = (ArrayList<Simbolo>)a;
                                                                        for(Simbolo sim : als){
                                                                            FAls f = (FAls)sim.Valor;
                                                                            f.ArchivoPadre = archivo;

                                                                        }
                                                                        parser.Ejecucion = archivo; 
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Graphik_Sintactico$parser.done_parsing();
          return CUP$Graphik_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

