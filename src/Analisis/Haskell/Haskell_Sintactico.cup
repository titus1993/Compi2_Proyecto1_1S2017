package Analisis.Haskell;

import Constante.Constante;
import Funciones.*;
import Ejecucion.*;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;
import java.util.ArrayList;
import Ejecucion.Ambito;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    public Haskell_Ejecucion Ejecucion = null;

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

:}

action code
{://Codigo de acciones
      
:}

terminal Id, Numero, Caracter, Cadena, TMas, TMenos, TPor, TDivision, TModulo, TPotencia, TRaiz, TDolar, TParentesis_Abre, TParentesis_Cierra;

terminal TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion, TAnd, TOr, TIgual, TCorchete_Abre, TCorchete_Cierra;

terminal TLet, TCalcular, TSucc, TDecc, TMin, TMax;

terminal TSum, TProduct, TRevers, TImpr, TPar, TAsc, TDesc, TLength, TAumento, TIndiceLista;

terminal TEnd, TIf, TThen, TElse, TCase, TLlave_Abre, TLlave_Cierra, TComa, TPuntoyComa, TDosPuntos;

nonterminal INICIO, LISTA_FUNCION, FUNCION, LISTA_PARAMETROS, CUERPO, LISTA_SENTENCIAS, SENTENCIA, SENTENCIA_IF, EXP, LLAMADA_METODO;

nonterminal DECLARACION_LISTA, ARREGLO, LISTA_EXP, METODO; 

nonterminal METODO_CONCATENACION, METODO_INDICE, METODO_OPERACION_LISTAS;

nonterminal SENTENCIA_CASE, LISTA_CASOS, CASO, VALOR, METODO_CUALQUIERA, LOGICO, RELACIONAL, METODO_LISTA;

precedence left TAnd, TOr;
precedence left TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion;

precedence left TIndiceLista;
precedence left TAumento;
precedence left TMas, TMenos;
precedence left TPor, TDivision, TModulo; 
precedence right TPotencia, TRaiz; 



start with INICIO;

INICIO     ::=  LISTA_FUNCION:funcion   {: 
                                            Ambito global = new Ambito("Global", (ArrayList<Simbolo>)funcion, null);
                                            for(Simbolo sim: global.TablaSimbolo){
                                                sim.Ambito.Padre = global;
                                            }
                                            parser.Ejecucion = new Haskell_Ejecucion(global);
                                        :}; 

LISTA_FUNCION ::= LISTA_FUNCION:listaf FUNCION:funcion  {: 
                                                            ArrayList<Simbolo> lista = (ArrayList<Simbolo>)listaf;
                                                            lista.add((Simbolo)funcion);
                                                            RESULT = lista;  
                                                        :}
                | FUNCION:funcion   {: 
                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                        lista.add((Simbolo)funcion);
                                        RESULT = lista;  
                                    :};



FUNCION ::=     Id:t LISTA_PARAMETROS:parametros TIgual CUERPO:cuerpo TEnd  {: 
                                                                                ArrayList<Simbolo> simbolo = (ArrayList<Simbolo>)cuerpo;
                                                                                Ambito afuncion = new Ambito(t.toString(), simbolo, null);
                                                                                FFuncion f = new FFuncion((ArrayList<Simbolo>)parametros, afuncion);
                                                                                for(Simbolo sim: f.Ambito.TablaSimbolo){
                                                                                    sim.Ambito.Padre = f.Ambito;
                                                                                }
                                                                                RESULT = new Simbolo(Constante.TMetodo, t.toString(), Constante.TMetodo, tleft, tright, f.Ambito, f);
                                                                            :} 
                | Id:t TIgual CUERPO:cuerpo TEnd    {: 
                                                        ArrayList<Simbolo> simbolo = (ArrayList<Simbolo>)cuerpo;
                                                        Ambito afuncion = new Ambito(t.toString(), simbolo, null);
                                                        FFuncion f = new FFuncion(new ArrayList<Simbolo>(), afuncion);
                                                        for(Simbolo sim: f.Ambito.TablaSimbolo){
                                                            sim.Ambito.Padre = f.Ambito;
                                                        }
                                                        RESULT = new Simbolo(Constante.TMetodo, t.toString(), Constante.TMetodo, tleft, tright, f.Ambito, f);
                                                    :};

LISTA_PARAMETROS ::=    LISTA_PARAMETROS:listap TComa Id:t  {:
                                                                ArrayList<Simbolo> lista = (ArrayList<Simbolo>)listap;
                                                                lista.add(new Simbolo(Constante.TVacio, t.toString(), Constante.TVariable, tleft, tright, new Ambito(t.toString()), null));
                                                                RESULT = lista; 
                                                            :}
                        | Id:t  {:
                                    ArrayList<Simbolo> lista = new ArrayList<>();
                                    lista.add(new Simbolo(Constante.TVacio, t.toString(), Constante.TVariable, tleft, tright, new Ambito(t.toString()), null));
                                    RESULT = lista; 
                                :};

CUERPO ::=  LISTA_SENTENCIAS:t {: RESULT = t; :};


LISTA_SENTENCIAS ::=    LISTA_SENTENCIAS:listasent SENTENCIA:sentencia  {:
                                                                            ArrayList<Simbolo> tabla = (ArrayList<Simbolo>)listasent;
                                                                            tabla.add((Simbolo)sentencia);
                                                                            RESULT = tabla;
                                                                        :}
                        | SENTENCIA:sentencia   {:
                                                    ArrayList<Simbolo> tabla = new ArrayList<>();
                                                    tabla.add((Simbolo)sentencia);
                                                    RESULT = tabla;
                                                :};

SENTENCIA ::=   SENTENCIA_IF:t  {: RESULT = t; :}
                | SENTENCIA_CASE:t {: RESULT = t; :}
                | LOGICO:t  {: 
                                        FNodoExpresion nodo = (FNodoExpresion)t;
                                        if(nodo.Tipo == Constante.TMetodo){
                                            FLlamadaMetodo metodo = (FLlamadaMetodo)nodo.Metodo;                                            
                                            RESULT = new Simbolo(Constante.TMetodo, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo.Ambito, metodo);

                                        }else{
                                            TitusNotificaciones.ImprimirConsola("No se puede llamar una expresion");
                                            RESULT = new Simbolo(Constante.TError, Constante.TError, Constante.TError, tleft, tright, new Ambito(Constante.TError), null);
                                        }
                            :}
                | DECLARACION_LISTA:t   {: RESULT = t; :};

DECLARACION_LISTA ::=   TLet Id:nombre TIgual LOGICO:valor   {: RESULT = new Simbolo(Constante.TArreglo, nombre.toString(), Constante.TVariable, nombreleft, nombreright, new Ambito(nombre.toString()), (FNodoExpresion)valor); :};

SENTENCIA_IF ::=    TIf:t LOGICO:cond TThen CUERPO:cue TElse CUERPO:cue2 TEnd   {:
                                                                                    ArrayList<Simbolo> si = (ArrayList<Simbolo>)cue;
                                                                                    ArrayList<Simbolo> sino = (ArrayList<Simbolo>)cue2;
                                                                                    Ambito asi = new Ambito(Constante.TIf, si, null);
                                                                                    Ambito asino = new Ambito(Constante.TElse, sino, null);
                                                                                    FIf fsi = new FIf((FNodoExpresion)cond, asi, asino);
                                                                                    for(Simbolo sim: fsi.Ambito.TablaSimbolo){
                                                                                        sim.Ambito.Padre = fsi.Ambito;
                                                                                    }
                                                                                    for(Simbolo sim: fsi.Else.TablaSimbolo){
                                                                                        sim.Ambito.Padre = fsi.Ambito;
                                                                                    }
                                                                                    RESULT = new Simbolo(Constante.TIf, Constante.TIf, Constante.TIf, tleft, tright, fsi.Ambito, fsi);

                                                                                :};

SENTENCIA_CASE ::=  TCase:t LOGICO:exp LISTA_CASOS:listac TEnd  {:
                                                                    ArrayList<FCaso> lista = (ArrayList<FCaso>)listac;
                                                                    FCase fcase = new FCase((FNodoExpresion)exp, lista, new Ambito(Constante.TCase), null);
                                                                    for(FCaso caso: lista){
                                                                        caso.Padre = fcase.Ambito;
                                                                        for(Simbolo sim: caso.Ambito.TablaSimbolo){
                                                                            sim.Ambito.Padre = fcase.Ambito;
                                                                        }
                                                                    }
                                                                    RESULT = new Simbolo(Constante.TCase, Constante.TCase, Constante.TCase, tleft, tright, fcase.Ambito, fcase);
                                                                :};

LISTA_CASOS ::=     LISTA_CASOS:listac CASO:caso     {:
                                                        ArrayList<FCaso> lista = (ArrayList<FCaso>)listac;
                                                        lista.add((FCaso)caso);
                                                        RESULT = lista;
                                                    :}
                    |CASO:caso  {:
                                    ArrayList<FCaso> lista = new ArrayList<>();
                                    lista.add((FCaso)caso);
                                    RESULT = lista;
                                :};

CASO ::=    VALOR:valor TDosPuntos CUERPO:cuerpo TPuntoyComa    {:
                                                                    Ambito ambito = new Ambito(Constante.TCase, (ArrayList<Simbolo>)cuerpo, null);
                                                                    FCaso caso = new FCaso((FNodoExpresion)valor, ambito);
                                                                    RESULT = caso;
                                                                :};

VALOR ::=   Numero:t  {: RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t); :}
            | Caracter:t  {: char c = t.toString().charAt(1); RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, c); :};

LOGICO ::=  LOGICO:izq TAnd:t LOGICO:der    {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAnd, Constante.TAnd, tleft, tright, null);
                                            :}
            | LOGICO:izq TOr:t LOGICO:der   {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TOr, Constante.TOr, tleft, tright, null);
                                            :}
            | RELACIONAL:t  {:
                                RESULT = t;
                            :};

RELACIONAL ::=  RELACIONAL:izq TMayor:t RELACIONAL:der      {:
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayor, Constante.TMayor, tleft, tright, null);
                                                            :}
                | RELACIONAL:izq TMenor:t RELACIONAL:der    {:
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenor, Constante.TMenor, tleft, tright, null);
                                                            :}
                | RELACIONAL:izq TMayorIgual:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayorIgual, Constante.TMayorIgual, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TMenorIgual:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenorIgual, Constante.TMenorIgual, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TIgualacion:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIgualacion, Constante.TIgualacion, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TDiferenciacion:t RELACIONAL:der   {:
                                                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDiferenciacion, Constante.TDiferenciacion, tleft, tright, null);
                                                                    :}
                | EXP:t     {:
                                RESULT = t;
                            :};

EXP ::=     EXP:izq TMas:t EXP:der  {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMas, Constante.TMas, tleft, tright, null);                                    
                                    :}
            | EXP:izq TMenos:t EXP:der    {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null);                                    
                                :}
            | EXP:izq TPor:t EXP:der  {:
                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPor, Constante.TPor, tleft, tright, null); 
                            :}
            | EXP:izq TDivision:t EXP:der {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDivision, Constante.TDivision, tleft, tright, null); 
                                :}
            | EXP:izq TModulo:t EXP:der   {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TModulo, Constante.TModulo, tleft, tright, null); 
                                :}
            | EXP:izq TPotencia:t EXP:der {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPotenciaH, Constante.TPotenciaH, tleft, tright, null); 
                                :}
            | EXP:izq TRaiz:t EXP:der   {:
                                            RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TRaiz, Constante.TRaiz, tleft, tright, null); 
                                        :}         
            | TMenos:t EXP:der  {:
                                    RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                :}
            | Numero:t      {:
                                RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t); 
                            :}
            | Id:t  {:
                        RESULT = new FNodoExpresion(null, null, Constante.TVariable, t.toString(), tleft, tright, null); 
                    :}
            | LLAMADA_METODO:t  {:
                                    FNodoExpresion a = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, t); 
                                    a.ResolverExpresion();
                                    RESULT = a;
                                :}
            | TParentesis_Abre LOGICO:t TParentesis_Cierra  {:
                                                                RESULT = t; 
                                                            :}
            | Cadena:t  {:
                            RESULT =  new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo(t.toString(), tleft, tright));
                        :}
            | ARREGLO:t     {:
                                RESULT =  t;
                            :}
            | Caracter:t    {:
                                char c = t.toString().charAt(1);                              
                                RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, c);
                            :}
            | EXP:izq TAumento:t EXP:der     {:
                                                ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                aux.add((FNodoExpresion)izq);
                                                aux.add((FNodoExpresion)der);
                                                FLlamadaMetodo metodo = new FLlamadaMetodo(Constante.TAumento, aux, tleft, tright);
                                                RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo);
                                            :}
            | EXP:izq TIndiceLista:t EXP:der    {:
                                                    ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                    aux.add((FNodoExpresion)izq);
                                                    aux.add((FNodoExpresion)der);
                                                    FLlamadaMetodo metodo = new FLlamadaMetodo(Constante.TIndiceLista, aux, tleft, tright);
                                                    RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo);
                                                :};

LLAMADA_METODO ::= TDolar METODO:t TDolar {: RESULT = t; :};

METODO ::=  METODO_OPERACION_LISTAS:t   {: RESULT = t; :}
            | METODO_CUALQUIERA:t {: RESULT = t; :};

METODO_CUALQUIERA ::= Id:t TLlave_Abre LISTA_EXP:lista TLlave_Cierra    {:
                                                                            RESULT = new FLlamadaMetodo(t.toString(), (ArrayList<FNodoExpresion>)lista, tleft, tright);
                                                                        :};

METODO_OPERACION_LISTAS ::=     TSum:t LOGICO:exp  {:
                                                    ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                    aux.add((FNodoExpresion)exp);
                                                    RESULT = new FLlamadaMetodo(Constante.TSum, aux, tleft, tright);
                                                :}
                                | TProduct:t LOGICO:exp    {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TProduct, aux, tleft, tright);
                                                        :}
                                | TRevers:t LOGICO:exp     {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TRevers, aux, tleft, tright);
                                                        :}
                                | TImpr:t LOGICO:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TImpr, aux, tleft, tright);
                                                    :}
                                | TPar:t LOGICO:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TPar, aux, tleft, tright);
                                                    :}
                                | TAsc:t LOGICO:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TAsc, aux, tleft, tright);
                                                    :}
                                | TDesc:t LOGICO:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDesc, aux, tleft, tright);
                                                    :}
                                | TLength:t LOGICO:exp     {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TLength, aux, tleft, tright);
                                                        :}
                                | TDecc:t LOGICO:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDecc, aux, tleft, tright);
                                                    :}
                                | TSucc:t LOGICO:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TSucc, aux, tleft, tright);
                                                    :}
                                | TMax:t LOGICO:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMax, aux, tleft, tright);
                                                    :}
                                | TMin:t LOGICO:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMin, aux, tleft, tright);
                                                    :}
                                | TCalcular:t LOGICO:exp   {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TCalcular, aux, tleft, tright);
                                                        :};


ARREGLO ::= TCorchete_Abre:t LISTA_EXP:arreglo TCorchete_Cierra   {:
                                                                    RESULT = new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo((ArrayList<FNodoExpresion>)arreglo));
                                                                :};

LISTA_EXP ::=   LISTA_EXP:listaaux TComa LOGICO:exp     {:
                                                                ArrayList<FNodoExpresion> lista = (ArrayList<FNodoExpresion>)listaaux;
                                                                lista.add((FNodoExpresion)exp);
                                                                RESULT = lista;
                                                            :}
                | LOGICO:t   {:
                                ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                lista.add((FNodoExpresion)t);
                                RESULT = lista; 
                            :};