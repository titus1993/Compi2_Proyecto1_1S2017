/* The following code was generated by JFlex 1.6.0 */


package Analisis.Graphik;

import Constante.Constante;
import java_cup.runtime.Symbol;
import Interface.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Graphik_Lexico.jflex</tt>
 */
public class Graphik_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 52, 49, 53, 52, 52,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52, 33, 50, 51,  0,  0, 34, 48, 28, 29, 25, 23, 40, 24, 42, 26, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 41,  0, 31, 32, 30, 20, 
     0,  2, 13,  9,  8,  4, 18, 15, 19, 44, 43, 46, 12, 11,  5,  7, 
    14, 43,  3, 45,  6, 16,  1, 43, 43, 43, 43, 36,  0, 37, 27, 22, 
     0,  2, 13,  9,  8,  4, 18, 15, 19, 44, 43, 46, 12, 11,  5,  7, 
    14, 43,  3, 45,  6, 16,  1, 43, 43, 43, 43, 38, 35, 39,  0,  0, 
     0,  0,  0,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\11\2\1\1\5\2\1\1\2\2\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\2\1\26\1\1\1\27\1\1"+
    "\1\30\14\2\3\0\7\2\2\31\1\0\1\32\3\2"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\3\2\1\32\3\0\1\44\2\30\1\45\2\2"+
    "\2\46\12\2\1\0\3\2\4\0\5\2\1\0\3\2"+
    "\2\0\10\2\1\47\1\50\2\0\7\2\1\0\5\2"+
    "\2\51\2\2\5\0\2\2\1\52\1\53\2\2\1\0"+
    "\3\2\1\0\1\54\1\0\10\2\1\54\1\0\2\55"+
    "\3\2\1\56\1\0\1\2\2\57\1\0\2\2\1\60"+
    "\2\2\1\0\2\2\5\0\4\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\61\1\62\6\2\1\30\2\2\1\63"+
    "\1\0\1\2\1\0\5\2\1\64\1\0\2\2\1\0"+
    "\1\65\3\0\1\2\1\66\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\67\1\2"+
    "\1\65\5\2\1\0\1\2\2\70\1\71\3\2\1\0"+
    "\1\2\1\72\4\0\2\2\1\0\1\2\1\0\1\2"+
    "\2\73\2\74\1\0\1\2\1\0\5\2\1\75\2\76"+
    "\2\2\1\77\1\0\1\2\1\0\1\100\1\101\2\102"+
    "\2\103\1\0\1\2\2\104\1\0\1\2\1\0\1\2"+
    "\1\100\1\101\1\2\1\105\1\106\1\107\2\110\1\0"+
    "\2\111\1\0\1\2\1\112\1\2\1\112\1\113\1\0"+
    "\1\2\1\113\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\66\0\u0438\0\u046e\0\66"+
    "\0\66\0\66\0\66\0\66\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\u057c\0\u05b2\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u05e8\0\u061e\0\u0654\0\u068a\0\66\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\66\0\u01b0"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u06c0\0\66\0\u0e22\0\u0e58"+
    "\0\u01b0\0\u0e8e\0\u0ec4\0\66\0\u01b0\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u0db6\0\66\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\66\0\u01b0\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u01b0\0\u01b0"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\66"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u01b0\0\u1f38\0\66\0\u01b0\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u01b0\0\u2010\0\u2046\0\66\0\u01b0\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\66\0\u01b0\0\u01b0"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\66\0\u26d0"+
    "\0\u2706\0\u01b0\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u01b0\0\u28ec\0\u2922\0\u2958\0\u298e\0\66"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u01b0"+
    "\0\u2cee\0\u01b0\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32"+
    "\0\u2e68\0\66\0\u01b0\0\u01b0\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u01b0\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba"+
    "\0\u30f0\0\u3126\0\u315c\0\u3192\0\66\0\u01b0\0\66\0\u01b0"+
    "\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342"+
    "\0\u01b0\0\66\0\u01b0\0\u3378\0\u33ae\0\u01b0\0\u33e4\0\u341a"+
    "\0\u3450\0\66\0\66\0\66\0\u01b0\0\66\0\u01b0\0\u3486"+
    "\0\u34bc\0\66\0\u01b0\0\u34f2\0\u3528\0\u355e\0\u3594\0\u01b0"+
    "\0\u01b0\0\u35ca\0\u01b0\0\u01b0\0\u01b0\0\66\0\u01b0\0\u3600"+
    "\0\66\0\u01b0\0\u3636\0\u366c\0\66\0\u36a2\0\u01b0\0\66"+
    "\0\u36d8\0\u370e\0\u01b0\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c"+
    "\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\66"+
    "\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\11\1\22\1\23\1\24\1\25\2\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\11\1\52\1\53\1\11\1\54\1\55"+
    "\1\56\1\57\1\60\1\56\70\0\1\11\1\61\1\11"+
    "\1\62\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\11\11\1\0\1\11\1\63\4\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\3\11"+
    "\1\64\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\4\11\1\65\4\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\11\11"+
    "\1\0\5\11\1\66\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\3\11\1\67\5\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\11\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\1\11\1\70\1\11\1\71\2\11\1\72\2\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\1\11\1\73\4\11\1\74\2\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\13\0\1\75\5\0"+
    "\1\76\53\0\11\11\1\77\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\1\11\1\100\3\11\7\0\11\11\1\0"+
    "\1\11\1\101\4\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\6\11\1\102\2\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\1\11\1\103"+
    "\1\104\6\11\1\0\5\11\1\105\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\2\11\1\106\6\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\107\1\11\24\0\3\11"+
    "\1\110\1\11\12\0\1\111\5\0\1\112\41\0\1\112"+
    "\12\0\1\11\1\113\7\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\1\11\1\114\1\11"+
    "\1\115\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\35\0\1\116\66\0\1\117\75\0\1\120"+
    "\65\0\1\121\65\0\1\122\65\0\1\123\67\0\1\124"+
    "\1\125\65\0\1\126\23\0\4\11\1\127\4\11\1\0"+
    "\1\130\5\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\3\11\1\131\5\11\1\112\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\1\11\1\132\3\11\60\0\1\133"+
    "\4\0\1\54\6\0\60\134\2\0\4\134\61\135\1\0"+
    "\1\136\3\135\32\137\1\140\26\137\1\0\4\137\1\0"+
    "\2\11\1\141\5\11\1\142\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\2\11\1\143\6\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\11\11\1\0\6\11\1\144\2\11\2\0\1\11"+
    "\24\0\2\11\1\145\2\11\7\0\5\11\1\146\3\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\5\11\1\147\3\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\3\11\1\150\5\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\2\11\1\151\6\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\5\11\1\152\3\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\10\11\1\153\1\0\6\11\1\0\1\154\1\11"+
    "\2\0\1\11\24\0\5\11\7\0\4\11\1\155\4\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\2\11\1\156\4\11\1\157\1\11\1\0\6\11"+
    "\1\160\2\11\2\0\1\11\24\0\2\11\1\161\2\11"+
    "\7\0\4\11\1\162\4\11\1\0\1\11\1\163\4\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\17\0\1\164"+
    "\1\165\41\0\1\165\27\0\1\166\53\0\1\167\62\0"+
    "\3\11\1\170\5\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\1\11\1\171\7\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\6\11\1\172\2\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\2\11\1\173\6\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\6\11\1\174\2\11\1\175\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\1\11\1\176\3\11\7\0\11\11\1\0"+
    "\2\11\1\177\3\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\1\11\1\200\7\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\22\0\1\201\56\0"+
    "\1\202\61\0\11\11\1\0\1\11\1\203\4\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\10\11\1\204"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\2\11\1\205\6\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\10\11\1\206\1\165"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\1\11\1\207"+
    "\3\11\7\0\11\11\1\0\3\11\1\210\2\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\11\11\1\0"+
    "\1\11\1\211\4\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\4\11\1\212\4\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\65\0\1\213\66\0"+
    "\1\214\5\0\61\137\1\0\4\137\32\140\1\137\26\140"+
    "\1\215\4\140\1\0\11\11\1\216\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\1\11\1\217\3\11\7\0\7\11"+
    "\1\220\1\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\6\11\1\221\2\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\3\11"+
    "\1\222\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\1\223\10\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\11\11\1\0"+
    "\1\224\5\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\6\11\1\225\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\226\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\1\11\1\227\3\11"+
    "\7\0\3\11\1\230\5\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\7\11\1\231\1\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\1\11\1\232\7\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\3\11\1\233\5\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\15\0\1\234\57\0\6\11\1\235\2\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\5\11"+
    "\1\236\3\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\11\11\1\0\5\11\1\237\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\22\0\1\240\62\0"+
    "\1\241\57\0\1\242\3\0\1\243\63\0\1\244\61\0"+
    "\4\11\1\245\4\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\11\11\1\0\1\246\5\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\11\11"+
    "\1\0\1\11\1\247\4\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\1\11\1\250\7\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\5\11"+
    "\1\251\2\11\1\252\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\1\253\65\0\1\254\10\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\11\11\1\0\1\11\1\255\4\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\0\3\11"+
    "\1\256\2\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\12\0\1\257\70\0\1\260\57\0\11\11\1\0\6\11"+
    "\1\261\2\11\2\0\1\11\24\0\2\11\1\262\2\11"+
    "\7\0\3\11\1\263\5\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\3\11\1\264\5\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\11\11\1\0\1\11\1\265\4\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\10\11\1\266\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\2\11\1\267\3\11\1\270\2\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\3\11\1\271"+
    "\5\11\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\6\11\1\272\2\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\6\0\32\215\1\273"+
    "\33\215\7\0\1\274\57\0\6\11\1\275\2\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\1\11\1\276\7\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\2\11\1\277\6\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\2\11\1\300\6\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\6\11\1\301\2\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\11\11\1\302\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\1\11\1\303\3\11\7\0\11\11\1\0\6\11\1\304"+
    "\2\11\2\0\1\11\24\0\2\11\1\305\2\11\21\0"+
    "\1\306\53\0\11\11\1\0\1\307\5\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\10\11\1\310\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\3\11\1\311\5\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\10\11\1\312\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\4\11"+
    "\1\313\4\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\11\11\1\314\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\1\11\1\315\3\11\7\0\11\11"+
    "\1\0\1\316\5\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\26\0\1\317\57\0\1\320\41\0\1\320\23\0"+
    "\1\321\41\0\1\321\14\0\1\322\70\0\1\323\60\0"+
    "\5\11\1\324\3\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\1\11\1\325\7\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\3\11\1\326\5\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\3\11\1\327\5\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\10\0"+
    "\1\330\64\0\1\11\1\331\7\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\11\11\1\332"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\1\11\1\333"+
    "\3\11\7\0\11\11\1\0\6\11\1\0\1\11\1\334"+
    "\2\0\1\11\24\0\5\11\17\0\1\335\63\0\1\336"+
    "\57\0\6\11\1\337\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\2\11\1\340\6\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\7\11\1\341\1\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\0\5\11"+
    "\1\342\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\11\11\1\320\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\1\11\1\343\3\11\7\0\11\11\1\321\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\1\11\1\344\3\11\7\0"+
    "\2\11\1\345\6\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\10\11\1\346\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\71\0\1\347"+
    "\3\0\7\11\1\350\1\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\4\11\1\351\4\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\6\11\1\352\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\13\0\1\353\61\0\4\11"+
    "\1\354\4\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\10\0\1\355\64\0\1\11\1\356\7\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\5\11\1\357\3\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\5\11\1\360\2\11"+
    "\1\361\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\5\11\1\362\3\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\1\11\1\363"+
    "\7\11\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\13\0\1\364\61\0\4\11\1\365\4\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\4\11\1\366\4\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\20\0\1\367\41\0\1\367\20\0"+
    "\1\370\71\0\1\371\60\0\1\372\62\0\1\373\63\0"+
    "\2\11\1\374\6\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\2\11\1\375\6\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\11\11\1\0\4\11\1\376\1\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\11\11\1\0\6\11\1\377"+
    "\2\11\2\0\1\11\24\0\2\11\1\u0100\2\11\16\0"+
    "\1\u0101\56\0\7\11\1\u0102\1\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\17\0\1\u0103\55\0"+
    "\10\11\1\u0104\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\11\11\1\u0105\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\1\11\1\u0106\3\11\17\0\1\u0107"+
    "\55\0\1\11\1\u0108\7\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\367\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\1\11\1\u0109\3\11"+
    "\7\0\6\11\1\u010a\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\0\1\u010b"+
    "\5\11\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\5\11\1\u010c\3\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\10\11\1\u010d\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\3\11"+
    "\1\u010e\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\1\11\1\u010f\7\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\10\0\1\u0110"+
    "\64\0\1\11\1\u0111\7\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\22\0\1\u0112\52\0\11\11"+
    "\1\0\1\11\1\u0113\4\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\6\11\1\u0114\2\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\6\11"+
    "\1\u0115\2\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\7\0\1\11\1\u0116\7\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\7\0\3\11"+
    "\1\u0117\5\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\26\0\1\u0118\46\0\11\11\1\0\5\11"+
    "\1\u0119\1\0\2\11\2\0\1\11\24\0\5\11\7\0"+
    "\1\11\1\u011a\7\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\11\0\1\u011b\74\0\1\u011c\41\0"+
    "\1\u011c\13\0\1\u011d\65\0\1\u011e\64\0\1\11\1\u011f"+
    "\7\11\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\11\11\1\0\6\11\1\0\1\11\1\u0120"+
    "\2\0\1\11\24\0\5\11\7\0\11\11\1\u0121\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\1\11\1\u0122\3\11"+
    "\10\0\1\u0123\64\0\1\11\1\u0124\7\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\15\0\1\u0125"+
    "\57\0\6\11\1\u0126\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\15\0\1\u0127\57\0\6\11"+
    "\1\u0128\2\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\33\0\1\u0129\30\0\1\u0129\10\0\11\11"+
    "\1\0\6\11\1\0\2\11\1\0\1\u0129\1\11\24\0"+
    "\3\11\1\u012a\1\11\20\0\1\u012b\41\0\1\u012b\12\0"+
    "\2\11\1\u012c\6\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\11\11\1\u011c\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\1\11\1\u012d\3\11\7\0"+
    "\1\11\1\u012e\7\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\11\11\1\u012b\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\1\11\1\u012f\3\11\7\0"+
    "\2\11\1\u0130\6\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\7\0\2\11\1\u0131\6\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\11\0"+
    "\1\u0132\63\0\2\11\1\u0133\6\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\7\11\1\u0134"+
    "\1\11\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\7\0\7\11\1\u0135\1\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\7\0\2\11\1\u0136"+
    "\6\11\1\0\6\11\1\0\2\11\2\0\1\11\24\0"+
    "\5\11\10\0\1\u0137\64\0\1\11\1\u0138\7\11\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\34\0"+
    "\1\u0139\42\0\1\u013a\65\0\1\u013b\103\0\1\u013c\33\0"+
    "\1\u013c\11\0\11\11\1\0\6\11\1\u013c\2\11\2\0"+
    "\1\11\24\0\2\11\1\u013d\2\11\7\0\11\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\u013e\1\11\24\0\3\11"+
    "\1\u013f\1\11\16\0\1\u0140\56\0\7\11\1\u0141\1\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\11\0\1\u0142\63\0\2\11\1\u0143\6\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\10\0\1\u0144"+
    "\64\0\1\11\1\u0145\7\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\15\0\1\u0146\57\0\11\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\u0147\24\0\5\11"+
    "\7\0\2\11\1\u0148\6\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\2\11\1\u0149\6\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\6\11\1\u014a\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\6\11\1\u014b\2\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\7\0\6\11\1\u014c\2\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\7\0\1\11\1\u014d\7\11"+
    "\1\0\6\11\1\0\2\11\2\0\1\11\24\0\5\11"+
    "\11\0\1\u014e\63\0\2\11\1\u014f\6\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\31\0\1\u0150"+
    "\51\0\1\u0151\57\0\6\11\1\u0152\2\11\1\0\6\11"+
    "\1\0\2\11\2\0\1\11\24\0\5\11\11\0\1\u0153"+
    "\63\0\2\11\1\u0154\6\11\1\0\6\11\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\13\0\1\u0155\61\0\11\11"+
    "\1\0\6\11\1\0\1\11\1\u0156\2\0\1\11\24\0"+
    "\5\11\7\0\4\11\1\u0157\4\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\33\0\1\u0158\30\0"+
    "\1\u0158\35\0\1\u0159\40\0\11\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\u015a\24\0\5\11\7\0\11\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\u0158\1\11\24\0\3\11"+
    "\1\u015b\1\11\30\0\1\u015c\44\0\11\11\1\0\6\11"+
    "\1\0\1\u015d\1\11\2\0\1\11\24\0\5\11\26\0"+
    "\1\u015e\46\0\11\11\1\0\5\11\1\u015f\1\0\2\11"+
    "\2\0\1\11\24\0\5\11\13\0\1\u0160\61\0\4\11"+
    "\1\u0161\4\11\1\0\6\11\1\0\2\11\2\0\1\11"+
    "\24\0\5\11\17\0\1\u0162\55\0\10\11\1\u0163\1\0"+
    "\6\11\1\0\2\11\2\0\1\11\24\0\5\11\20\0"+
    "\1\u0164\41\0\1\u0164\12\0\11\11\1\u0164\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\1\11\1\u0165\3\11\15\0"+
    "\1\u0166\57\0\6\11\1\u0167\2\11\1\0\6\11\1\0"+
    "\2\11\2\0\1\11\24\0\5\11\13\0\1\u0168\61\0"+
    "\4\11\1\u0169\4\11\1\0\6\11\1\0\2\11\2\0"+
    "\1\11\24\0\5\11\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14796];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\2\1\5\11\6\1\7\11"+
    "\4\1\1\11\16\1\3\0\7\1\1\11\1\1\1\0"+
    "\4\1\11\11\4\1\3\0\1\11\5\1\1\11\13\1"+
    "\1\0\3\1\4\0\5\1\1\0\3\1\2\0\11\1"+
    "\1\11\2\0\7\1\1\0\5\1\1\11\3\1\5\0"+
    "\6\1\1\0\3\1\1\0\1\11\1\0\11\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\11\1\1\1\0\5\1"+
    "\1\0\2\1\5\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\10\1\1\11\3\1\1\0\1\1\1\0"+
    "\6\1\1\0\2\1\1\0\1\11\3\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\10\1\1\0\1\1\1\11\5\1\1\0\2\1\4\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\6\1\1\11\4\1\1\0"+
    "\1\1\1\0\3\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\7\1\1\11\1\1"+
    "\1\0\1\11\1\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Graphik_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { //String errLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline)+" y columna: "+yycolumn;
        TitusNotificaciones.InsertarError(Constante.TErrorLexico,"Simbolo " + yytext() + " no reconocido", yyline, yycolumn);
          }
        case 77: break;
        case 2: 
          { System.out.println(yytext()); return  new Symbol(sym.Id, yyline, yycolumn, yytext());
          }
        case 78: break;
        case 3: 
          { System.out.println(yytext()); return  new Symbol(sym.TInterrogacion, yyline, yycolumn, yytext());
          }
        case 79: break;
        case 4: 
          { System.out.println(yytext()); return  new Symbol(sym.TMas, yyline, yycolumn, yytext());
          }
        case 80: break;
        case 5: 
          { System.out.println(yytext()); return  new Symbol(sym.TMenos, yyline, yycolumn, yytext());
          }
        case 81: break;
        case 6: 
          { System.out.println(yytext()); return  new Symbol(sym.TPor, yyline, yycolumn, yytext());
          }
        case 82: break;
        case 7: 
          { System.out.println(yytext()); return  new Symbol(sym.TDivision, yyline, yycolumn, yytext());
          }
        case 83: break;
        case 8: 
          { System.out.println(yytext()); return  new Symbol(sym.TPotencia, yyline, yycolumn, yytext());
          }
        case 84: break;
        case 9: 
          { System.out.println(yytext()); return  new Symbol(sym.TParentesis_Abre, yyline, yycolumn, yytext());
          }
        case 85: break;
        case 10: 
          { System.out.println(yytext()); return  new Symbol(sym.TParentesis_Cierra, yyline, yycolumn, yytext());
          }
        case 86: break;
        case 11: 
          { System.out.println(yytext()); return  new Symbol(sym.TMayor, yyline, yycolumn, yytext());
          }
        case 87: break;
        case 12: 
          { System.out.println(yytext()); return  new Symbol(sym.TMenor, yyline, yycolumn, yytext());
          }
        case 88: break;
        case 13: 
          { System.out.println(yytext()); return  new Symbol(sym.TIgual, yyline, yycolumn, yytext());
          }
        case 89: break;
        case 14: 
          { System.out.println(yytext()); return  new Symbol(sym.TNot, yyline, yycolumn, yytext());
          }
        case 90: break;
        case 15: 
          { System.out.println(yytext()); return  new Symbol(sym.TCorchete_Abre, yyline, yycolumn, yytext());
          }
        case 91: break;
        case 16: 
          { System.out.println(yytext()); return  new Symbol(sym.TCorchete_Cierra, yyline, yycolumn, yytext());
          }
        case 92: break;
        case 17: 
          { System.out.println(yytext()); return  new Symbol(sym.TLlave_Abre, yyline, yycolumn, yytext());
          }
        case 93: break;
        case 18: 
          { System.out.println(yytext()); return  new Symbol(sym.TLlave_Cierra, yyline, yycolumn, yytext());
          }
        case 94: break;
        case 19: 
          { System.out.println(yytext()); return  new Symbol(sym.TComa, yyline, yycolumn, yytext());
          }
        case 95: break;
        case 20: 
          { System.out.println(yytext()); return  new Symbol(sym.TDosPuntos, yyline, yycolumn, yytext());
          }
        case 96: break;
        case 21: 
          { System.out.println(yytext()); return  new Symbol(sym.TPunto, yyline, yycolumn, yytext());
          }
        case 97: break;
        case 22: 
          { System.out.println(yytext()); return  new Symbol(sym.Entero, yyline, yycolumn, yytext());
          }
        case 98: break;
        case 23: 
          { 
          }
        case 99: break;
        case 24: 
          { System.out.println(yytext());
          }
        case 100: break;
        case 25: 
          { System.out.println(yytext()); return  new Symbol(sym.TGk, yyline, yycolumn, yytext());
          }
        case 101: break;
        case 26: 
          { System.out.println(yytext()); return  new Symbol(sym.TSi, yyline, yycolumn, yytext());
          }
        case 102: break;
        case 27: 
          { System.out.println(yytext()); return  new Symbol(sym.TAumento, yyline, yycolumn, yytext());
          }
        case 103: break;
        case 28: 
          { System.out.println(yytext()); return  new Symbol(sym.TDisminucion, yyline, yycolumn, yytext());
          }
        case 104: break;
        case 29: 
          { System.out.println(yytext()); return  new Symbol(sym.TMayorIgual, yyline, yycolumn, yytext());
          }
        case 105: break;
        case 30: 
          { System.out.println(yytext()); return  new Symbol(sym.TMenorIgual, yyline, yycolumn, yytext());
          }
        case 106: break;
        case 31: 
          { System.out.println(yytext()); return  new Symbol(sym.TIgualacion, yyline, yycolumn, yytext());
          }
        case 107: break;
        case 32: 
          { System.out.println(yytext()); return  new Symbol(sym.TDiferenciacion, yyline, yycolumn, yytext());
          }
        case 108: break;
        case 33: 
          { System.out.println(yytext()); return  new Symbol(sym.TAnd, yyline, yycolumn, yytext());
          }
        case 109: break;
        case 34: 
          { System.out.println(yytext()); return  new Symbol(sym.TXor, yyline, yycolumn, yytext());
          }
        case 110: break;
        case 35: 
          { System.out.println(yytext()); return  new Symbol(sym.TOr, yyline, yycolumn, yytext());
          }
        case 111: break;
        case 36: 
          { System.out.println(yytext()); return  new Symbol(sym.Cadena, yyline, yycolumn, yytext());
          }
        case 112: break;
        case 37: 
          { System.out.println(yytext()); return  new Symbol(sym.TVar, yyline, yycolumn, yytext());
          }
        case 113: break;
        case 38: 
          { System.out.println(yytext()); return  new Symbol(sym.TAls, yyline, yycolumn, yytext());
          }
        case 114: break;
        case 39: 
          { System.out.println(yytext()); return  new Symbol(sym.Decimal, yyline, yycolumn, yytext());
          }
        case 115: break;
        case 40: 
          { System.out.println(yytext()); return  new Symbol(sym.Caracter, yyline, yycolumn, yytext());
          }
        case 116: break;
        case 41: 
          { System.out.println(yytext()); return  new Symbol(sym.TCaso, yyline, yycolumn, yytext());
          }
        case 117: break;
        case 42: 
          { System.out.println(yytext()); return  new Symbol(sym.TBool, yyline, yycolumn, yytext());
          }
        case 118: break;
        case 43: 
          { System.out.println(yytext()); return  new Symbol(sym.TPara, yyline, yycolumn, yytext());
          }
        case 119: break;
        case 44: 
          { System.out.println(yytext()); return  new Symbol(sym.TSino, yyline, yycolumn, yytext());
          }
        case 120: break;
        case 45: 
          { System.out.println(yytext()); return  new Symbol(sym.TVacio, yyline, yycolumn, yytext());
          }
        case 121: break;
        case 46: 
          { System.out.println(yytext()); return  new Symbol(sym.TNuevo, yyline, yycolumn, yytext());
          }
        case 122: break;
        case 47: 
          { System.out.println(yytext()); return  new Symbol(sym.TDatos, yyline, yycolumn, yytext());
          }
        case 123: break;
        case 48: 
          { System.out.println(yytext()); return  new Symbol(sym.TDonde, yyline, yycolumn, yytext());
          }
        case 124: break;
        case 49: 
          { System.out.println(yytext()); return  new Symbol(sym.Falso, yyline, yycolumn, yytext());
          }
        case 125: break;
        case 50: 
          { System.out.println(yytext()); return  new Symbol(sym.THacer, yyline, yycolumn, yytext());
          }
        case 126: break;
        case 51: 
          { System.out.println(yytext()); return  new Symbol(sym.TEntero, yyline, yycolumn, yytext());
          }
        case 127: break;
        case 52: 
          { System.out.println(yytext()); return  new Symbol(sym.TCadena, yyline, yycolumn, yytext());
          }
        case 128: break;
        case 53: 
          { System.out.println(yytext()); return  new Symbol(sym.TInicio, yyline, yycolumn, yytext());
          }
        case 129: break;
        case 54: 
          { System.out.println(yytext()); return  new Symbol(sym.TLlamar, yyline, yycolumn, yytext());
          }
        case 130: break;
        case 55: 
          { System.out.println(yytext()); return  new Symbol(sym.THereda, yyline, yycolumn, yytext());
          }
        case 131: break;
        case 56: 
          { System.out.println(yytext()); return  new Symbol(sym.TDecimal, yyline, yycolumn, yytext());
          }
        case 132: break;
        case 57: 
          { System.out.println(yytext()); return  new Symbol(sym.TDefecto, yyline, yycolumn, yytext());
          }
        case 133: break;
        case 58: 
          { System.out.println(yytext()); return  new Symbol(sym.TColumna, yyline, yycolumn, yytext());
          }
        case 134: break;
        case 59: 
          { System.out.println(yytext()); return  new Symbol(sym.TPrivado, yyline, yycolumn, yytext());
          }
        case 135: break;
        case 60: 
          { System.out.println(yytext()); return  new Symbol(sym.TPublico, yyline, yycolumn, yytext());
          }
        case 136: break;
        case 61: 
          { System.out.println(yytext()); return  new Symbol(sym.TRetornar, yyline, yycolumn, yytext());
          }
        case 137: break;
        case 62: 
          { System.out.println(yytext()); return  new Symbol(sym.TTerminar, yyline, yycolumn, yytext());
          }
        case 138: break;
        case 63: 
          { System.out.println(yytext()); return  new Symbol(sym.TCaracter, yyline, yycolumn, yytext());
          }
        case 139: break;
        case 64: 
          { System.out.println(yytext()); return  new Symbol(sym.TImprimir, yyline, yycolumn, yytext());
          }
        case 140: break;
        case 65: 
          { System.out.println(yytext()); return  new Symbol(sym.TImportar, yyline, yycolumn, yytext());
          }
        case 141: break;
        case 66: 
          { System.out.println(yytext()); return  new Symbol(sym.TMientras, yyline, yycolumn, yytext());
          }
        case 142: break;
        case 67: 
          { System.out.println(yytext()); return  new Symbol(sym.TLlamarHk, yyline, yycolumn, yytext());
          }
        case 143: break;
        case 68: 
          { System.out.println(yytext()); return  new Symbol(sym.TProcesar, yyline, yycolumn, yytext());
          }
        case 144: break;
        case 69: 
          { System.out.println(yytext()); return  new Symbol(sym.Verdadero, yyline, yycolumn, yytext());
          }
        case 145: break;
        case 70: 
          { System.out.println(yytext()); return  new Symbol(sym.TDondeTodo, yyline, yycolumn, yytext());
          }
        case 146: break;
        case 71: 
          { System.out.println(yytext()); return  new Symbol(sym.TDondeCada, yyline, yycolumn, yytext());
          }
        case 147: break;
        case 72: 
          { System.out.println(yytext()); return  new Symbol(sym.TContinuar, yyline, yycolumn, yytext());
          }
        case 148: break;
        case 73: 
          { System.out.println(yytext()); return  new Symbol(sym.TProtegido, yyline, yycolumn, yytext());
          }
        case 149: break;
        case 74: 
          { System.out.println(yytext()); return  new Symbol(sym.TSeleccion, yyline, yycolumn, yytext());
          }
        case 150: break;
        case 75: 
          { System.out.println(yytext()); return  new Symbol(sym.TIncluye, yyline, yycolumn, yytext());
          }
        case 151: break;
        case 76: 
          { System.out.println(yytext()); return  new Symbol(sym.TGraphikar_Funcion, yyline, yycolumn, yytext());
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
