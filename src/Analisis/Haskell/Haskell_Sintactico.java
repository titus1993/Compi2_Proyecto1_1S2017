
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 08 08:09:51 CST 2017
//----------------------------------------------------

package Analisis.Haskell;

import Constante.Constante;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 08 08:09:51 CST 2017
  */
public class Haskell_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Haskell_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\006" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\007\000\002\011" +
    "\011\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\013\004\000\002\014\006\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\004\004\001\002\000\006\004\012\036" +
    "\014\001\002\000\006\002\000\004\004\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\036\ufffa\070\ufffa\001\002\000\006\036\102\070" +
    "\101\001\002\000\010\021\022\041\016\062\017\001\002" +
    "\000\014\021\ufff6\041\ufff6\061\ufff6\062\ufff6\064\ufff6\001" +
    "\002\000\004\004\060\001\002\000\006\005\031\006\032" +
    "\001\002\000\004\061\030\001\002\000\014\021\ufff7\041" +
    "\ufff7\061\ufff7\062\ufff7\064\ufff7\001\002\000\004\021\027" +
    "\001\002\000\014\021\ufff5\041\ufff5\061\ufff5\062\ufff5\064" +
    "\ufff5\001\002\000\014\021\ufff4\041\ufff4\061\ufff4\062\ufff4" +
    "\064\ufff4\001\002\000\014\021\022\041\016\061\ufff9\062" +
    "\017\064\ufff9\001\002\000\014\021\ufff8\041\ufff8\061\ufff8" +
    "\062\ufff8\064\ufff8\001\002\000\014\021\uffe8\041\uffe8\061" +
    "\uffe8\062\uffe8\064\uffe8\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\026\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\040\uffea\063\uffea\070\uffea\001\002" +
    "\000\026\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\040\uffe9\063\uffe9\070\uffe9\001\002\000\022" +
    "\012\035\013\040\014\041\015\042\016\043\017\037\020" +
    "\034\063\036\001\002\000\006\005\031\006\032\001\002" +
    "\000\006\005\031\006\032\001\002\000\010\021\022\041" +
    "\016\062\017\001\002\000\006\005\031\006\032\001\002" +
    "\000\006\005\031\006\032\001\002\000\006\005\031\006" +
    "\032\001\002\000\006\005\031\006\032\001\002\000\006" +
    "\005\031\006\032\001\002\000\026\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\037\020\034\040\uffed\063\uffed" +
    "\070\uffed\001\002\000\026\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\037\020\034\040\uffee\063\uffee\070\uffee" +
    "\001\002\000\026\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\037\020\034\040\uffef\063\uffef\070\uffef\001\002" +
    "\000\026\012\ufff0\013\ufff0\014\041\015\042\016\043\017" +
    "\037\020\034\040\ufff0\063\ufff0\070\ufff0\001\002\000\026" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\037\020" +
    "\034\040\uffec\063\uffec\070\uffec\001\002\000\006\061\053" +
    "\064\052\001\002\000\010\021\022\041\016\062\017\001" +
    "\002\000\014\021\ufff3\041\ufff3\061\ufff3\062\ufff3\064\ufff3" +
    "\001\002\000\004\061\055\001\002\000\014\021\ufff2\041" +
    "\ufff2\061\ufff2\062\ufff2\064\ufff2\001\002\000\026\012\ufff1" +
    "\013\ufff1\014\041\015\042\016\043\017\037\020\034\040" +
    "\ufff1\063\ufff1\070\ufff1\001\002\000\026\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\037\020\034\040\uffeb\063" +
    "\uffeb\070\uffeb\001\002\000\004\036\061\001\002\000\004" +
    "\037\063\001\002\000\014\021\uffe7\041\uffe7\061\uffe7\062" +
    "\uffe7\064\uffe7\001\002\000\010\005\031\006\032\037\070" +
    "\001\002\000\004\040\100\001\002\000\006\040\uffe4\070" +
    "\076\001\002\000\006\040\uffe2\070\uffe2\001\002\000\024" +
    "\012\035\013\040\014\041\015\042\016\043\017\037\020" +
    "\034\040\uffdf\070\uffdf\001\002\000\006\005\031\006\032" +
    "\001\002\000\006\040\uffe5\070\072\001\002\000\006\005" +
    "\031\006\032\001\002\000\024\012\035\013\040\014\041" +
    "\015\042\016\043\017\037\020\034\040\uffe0\070\uffe0\001" +
    "\002\000\006\040\075\070\072\001\002\000\006\040\uffe1" +
    "\070\uffe1\001\002\000\004\037\070\001\002\000\006\040" +
    "\uffe3\070\uffe3\001\002\000\014\021\uffe6\041\uffe6\061\uffe6" +
    "\062\uffe6\064\uffe6\001\002\000\004\004\105\001\002\000" +
    "\010\021\022\041\016\062\017\001\002\000\004\061\104" +
    "\001\002\000\006\002\ufffd\004\ufffd\001\002\000\006\036" +
    "\ufffb\070\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\010\002\006\003\004\004\005\001\001\000" +
    "\004\005\012\001\001\000\004\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\017" +
    "\007\024\010\020\011\014\013\022\014\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\025\011\014" +
    "\013\022\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\056\001\001\000\004\012" +
    "\055\001\001\000\016\006\050\007\024\010\020\011\014" +
    "\013\022\014\023\001\001\000\004\012\047\001\001\000" +
    "\004\012\046\001\001\000\004\012\045\001\001\000\004" +
    "\012\044\001\001\000\004\012\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\053\007" +
    "\024\010\020\011\014\013\022\014\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\061" +
    "\001\001\000\002\001\001\000\014\012\066\016\063\017" +
    "\070\020\064\021\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\066\017\073\001\001\000\002\001\001\000\004\012\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\102\007\024\010" +
    "\020\011\014\013\022\014\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Haskell_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Haskell_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Haskell_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Lexema "+s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Lexema "+s.value + " no reconocido." );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Haskell_Sintactico$actions {

//Codigo de acciones
      

  private final Haskell_Sintactico parser;

  /** Constructor */
  CUP$Haskell_Sintactico$actions(Haskell_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Haskell_Sintactico$do_action(
    int                        CUP$Haskell_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Haskell_Sintactico$parser,
    java.util.Stack            CUP$Haskell_Sintactico$stack,
    int                        CUP$Haskell_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Haskell_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Haskell_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_EXP ::= EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_EXP ::= LISTA_EXP TComa EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIMENSION ::= TCorchete_Abre LISTA_EXP TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",15, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_DIMENSION ::= DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_DIMENSION ::= LISTA_DIMENSION TComa DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIMENSIONES ::= LISTA_DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIMENSIONES ::= LISTA_EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MULTIDIMENSION ::= TCorchete_Abre DIMENSIONES TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIDIMENSION",11, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_LISTA ::= TLet Id TIgual MULTIDIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADA_FUNCION ::= TDolar TDolar 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",9, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= Caracter 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP TRaiz EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP TPotencia EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP TModulo EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP TDivision EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP TPor EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP TMenos EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP TMas EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_IF ::= TIf EXP TThen CUERPO TElse CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA_IF ::= TIf EXP TThen CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION_LISTA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= LISTA_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_PARAMETROS ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_PARAMETROS ::= LISTA_PARAMETROS TComa Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= Id TIgual CUERPO TEnd 
            {
              Object RESULT =null;
		 System.out.println("EXITO"); 
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= Id LISTA_PARAMETROS TIgual CUERPO TEnd 
            {
              Object RESULT =null;
		 System.out.println("EXITO"); 
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_FUNCION ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_FUNCION ::= LISTA_FUNCION FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Haskell_Sintactico$parser.done_parsing();
          return CUP$Haskell_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

