package Analisis.Haskell;

import Constante.Constante;
import Funciones.*;
import Ejecucion.*;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

:}

action code
{://Codigo de acciones
      
:}

terminal Id, Numero, Caracter, Cadena, TMas, TMenos, TPor, TDivision, TModulo, TPotencia, TRaiz, TDolar, TParentesis_Abre, TParentesis_Cierra;

terminal TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion, TAnd, TOr, TIgual, TCorchete_Abre, TCorchete_Cierra;

terminal TLet, TCalcular, TSucc, TDecc, TMin, TMax;

terminal TSum, TProduct, TRevers, TImpr, TPar, TAsc, TDesc, TLength, TAumento, TIndiceLista;

terminal TEnd, TIf, TThen, TElse, TCase, TLlave_Abre, TLlave_Cierra, TComa, TPuntoyComa, TDosPuntos;

nonterminal INICIO, LISTA_FUNCION, FUNCION, LISTA_PARAMETROS, CUERPO, LISTA_SENTENCIAS, SENTENCIA, SENTENCIA_IF, EXP, LLAMADA_METODO;

nonterminal DECLARACION_LISTA, ARREGLO, LISTA_EXP, METODO; 

nonterminal METODO_CONCATENACION, METODO_INDICE, METODO_OPERACION_LISTAS;

nonterminal SENTENCIA_CASE, LISTA_CASOS, CASO, VALOR, METODO_CUALQUIERA, LOGICO, RELACIONAL, METODO_LISTA;

precedence left TAnd, TOr;
precedence left TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion;

precedence left TIndiceLista;
precedence left TAumento;
precedence left TMas, TMenos;
precedence left TPor, TDivision, TModulo; 
precedence right TPotencia, TRaiz; 



start with INICIO;

INICIO     ::=  LISTA_FUNCION {: TitusNotificaciones.ImprimirConsola("EXITO"); :}; 


LISTA_FUNCION ::= LISTA_FUNCION FUNCION
                | FUNCION;



FUNCION ::=     Id LISTA_PARAMETROS TIgual CUERPO TEnd 
                | Id TIgual CUERPO TEnd ;

LISTA_PARAMETROS ::=    LISTA_PARAMETROS TComa Id
                        | Id;

CUERPO ::=  LISTA_SENTENCIAS;


LISTA_SENTENCIAS ::=    LISTA_SENTENCIAS SENTENCIA{::}
                        | SENTENCIA;

SENTENCIA ::=   SENTENCIA_IF
                | SENTENCIA_CASE
                | EXP
                | DECLARACION_LISTA;

DECLARACION_LISTA ::=   TLet Id TIgual EXP;

SENTENCIA_IF ::=    TIf LOGICO TThen CUERPO TElse CUERPO TEnd;

SENTENCIA_CASE ::=  TCase:t EXP:exp LISTA_CASOS TEnd  {:
                                                        TablaVariables.InsertarVariable(new Variable(Constante.TVacio, "prueba", Constante.TVariable, tleft, tright, null, (FNodoExpresion)exp));
                                                    :};

LISTA_CASOS ::=     LISTA_CASOS CASO
                    |CASO;

CASO ::=    VALOR TDosPuntos CUERPO TPuntoyComa;

VALOR ::=   Numero:t  {: RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t); :}
            | Caracter:t  {: RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t); :};

LOGICO ::=  LOGICO:izq TAnd:t LOGICO:der    {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAnd, Constante.TAnd, tleft, tright, null);
                                            :}
            | LOGICO:izq TOr:t LOGICO:der   {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TOr, Constante.TOr, tleft, tright, null);
                                            :}
            | RELACIONAL:t  {:
                                RESULT = t;
                            :};

RELACIONAL ::=  RELACIONAL:izq TMayor:t RELACIONAL:der      {:
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayor, Constante.TMayor, tleft, tright, null);
                                                            :}
                | RELACIONAL:izq TMenor:t RELACIONAL:der    {:
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenor, Constante.TMenor, tleft, tright, null);
                                                            :}
                | RELACIONAL:izq TMayorIgual:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayorIgual, Constante.TMayorIgual, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TMenorIgual:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenorIgual, Constante.TMenorIgual, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TIgualacion:t RELACIONAL:der   {:
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIgualacion, Constante.TIgualacion, tleft, tright, null);
                                                                :}
                | RELACIONAL:izq TDiferenciacion:t RELACIONAL:der   {:
                                                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDiferenciacion, Constante.TDiferenciacion, tleft, tright, null);
                                                                    :}
                | EXP:t     {:
                                RESULT = t;
                            :};

EXP ::=     EXP:izq TMas:t EXP:der  {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMas, Constante.TMas, tleft, tright, null);                                    
                                    :}
            | EXP:izq TMenos:t EXP:der    {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null);                                    
                                :}
            | EXP:izq TPor:t EXP:der  {:
                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPor, Constante.TPor, tleft, tright, null); 
                            :}
            | EXP:izq TDivision:t EXP:der {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDivision, Constante.TDivision, tleft, tright, null); 
                                :}
            | EXP:izq TModulo:t EXP:der   {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TModulo, Constante.TModulo, tleft, tright, null); 
                                :}
            | EXP:izq TPotencia:t EXP:der {:
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPotenciaH, Constante.TPotenciaH, tleft, tright, null); 
                                :}
            | EXP:izq TRaiz:t EXP:der   {:
                                            RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TRaiz, Constante.TRaiz, tleft, tright, null); 
                                        :}         
            | TMenos:t EXP:der  {:
                                    RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                :}
            | Numero:t      {:
                                RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t); 
                            :}
            | Id:t  {:
                        RESULT = new FNodoExpresion(null, null, Constante.TVariable, t.toString(), tleft, tright, null); 
                    :}
            | LLAMADA_METODO:t  {:
                                    RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, t); 
                                :}
            | TParentesis_Abre LOGICO:t TParentesis_Cierra  {:
                                                                RESULT = t; 
                                                            :}
            | Cadena:t  {:
                            RESULT =  new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo(t.toString(), tleft, tright));
                        :}
            | ARREGLO:t     {:
                                RESULT =  t;
                            :}
            | Caracter:t    {:
                                RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t);
                            :}
            | EXP:izq TAumento:t EXP:der    {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAumento, Constante.TAumento, tleft, tright, null); 
                                            :}
            | EXP:izq TIndiceLista:t EXP:der    {:
                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIndiceLista, Constante.TIndiceLista, tleft, tright, null); 
                                                :}
            ;

LLAMADA_METODO ::= TDolar METODO:t TDolar {: RESULT = t; :}
                    |METODO_LISTA:t     {: RESULT = t; :};

METODO_LISTA ::=    METODO_CONCATENACION:t {: RESULT = t; :}
                    | METODO_INDICE:t {: RESULT = t; :};

METODO ::=  METODO_OPERACION_LISTAS:t   {: RESULT = t; :}
            | METODO_CUALQUIERA:t {: RESULT = t; :};

METODO_CUALQUIERA ::= Id:t TLlave_Abre LISTA_EXP:lista TLlave_Cierra    {:
                                                                            RESULT = new FLlamadaMetodo(t.toString(), (ArrayList<FNodoExpresion>)lista, tleft, tright);
                                                                        :};

METODO_OPERACION_LISTAS ::=     TSum:t EXP:exp  {:
                                                    ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                    aux.add((FNodoExpresion)exp);
                                                    RESULT = new FLlamadaMetodo(Constante.TSum, aux, tleft, tright);
                                                :}
                                | TProduct:t EXP:exp    {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TProduct, aux, tleft, tright);
                                                        :}
                                | TRevers:t EXP:exp     {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TRevers, aux, tleft, tright);
                                                        :}
                                | TImpr:t EXP:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TImpr, aux, tleft, tright);
                                                    :}
                                | TPar:t EXP:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TPar, aux, tleft, tright);
                                                    :}
                                | TAsc:t EXP:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TAsc, aux, tleft, tright);
                                                    :}
                                | TDesc:t EXP:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDesc, aux, tleft, tright);
                                                    :}
                                | TLength:t EXP:exp     {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TLength, aux, tleft, tright);
                                                        :}
                                | TDecc:t EXP:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDecc, aux, tleft, tright);
                                                    :}
                                | TSucc:t EXP:exp   {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TSucc, aux, tleft, tright);
                                                    :}
                                | TMax:t EXP:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMax, aux, tleft, tright);
                                                    :}
                                | TMin:t EXP:exp    {:
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMin, aux, tleft, tright);
                                                    :}
                                | TCalcular:t EXP:exp   {:
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TCalcular, aux, tleft, tright);
                                                        :};


ARREGLO ::= TCorchete_Abre:t LISTA_EXP:arreglo TCorchete_Cierra   {:
                                                                    RESULT = new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo((ArrayList<FNodoExpresion>)arreglo));
                                                                :};

LISTA_EXP ::=   LISTA_EXP:listaaux TComa EXP:exp     {:
                                                                ArrayList<FNodoExpresion> lista = (ArrayList<FNodoExpresion>)listaaux;
                                                                lista.add((FNodoExpresion)exp);
                                                                RESULT = lista;
                                                            :}
                | EXP:t   {:
                                        ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                        lista.add((FNodoExpresion)t);
                                        RESULT = lista; 
                                    :};