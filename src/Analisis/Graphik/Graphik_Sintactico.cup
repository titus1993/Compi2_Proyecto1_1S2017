package Analisis.Graphik;

import Constante.Constante;
import Funciones_GraphiK.*;
import Ejecucion_GraphiK.*;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;
import java.util.ArrayList;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible
    public Archivo Ejecucion = null;
    public String archivonombre = "";

    public void syntax_error(Symbol s){
        TitusNotificaciones.InsertarError("Sintactico",s.value + " no reconocido", s.left, s.right);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la LÃ­nea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

:}

action code
{://Codigo de acciones
      
:}

terminal Id, Entero, Decimal, Caracter, Cadena, Verdadero, Falso, TMas, TMenos, TPor, TDivision, TPotencia, TAumento, TDisminucion, TParentesis_Abre, TParentesis_Cierra;

terminal TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion, TAnd, TOr, TXor, TNot, TIgual, TCorchete_Abre, TCorchete_Cierra;

terminal TLlave_Abre, TLlave_Cierra, TComa, TVar, TPublico, TPrivado, TProtegido, TDosPuntos, TCaso, TDefecto, TPara, THacer;

terminal TInicio, TProcesar, TDonde, TDondeCada, TDondeTodo, TImprimir, TGraphikar_Funcion, TDatos, TColumna, TLlamar, TLlamarHk, TIncluye, TImportar, TGk, THereda, TRetornar, TInterrogacion, TContinuar, TTerminar, TEntero, TCadena, TVacio, TDecimal, TCaracter, TBool, TAls, TPunto, TNuevo, TSi, TSino, TSeleccion, TMientras;
nonterminal INICIO, PROCESAR, DONDE, METODO_DATOS, METODO_INICIO, LLAMADA_IMPRIMIR, LLAMADA_GRAPHIKAR, LLAMADA_METODO, LLAMADA_AUMENTO, LLAMADA_DISMINUCION, LISTA_EXP_FUNCION, LLAMADA_FUNCION, LLAMADA_HASKELL, LISTA_HASKELL, HASKELL, IMPORTACIONES_GRAPHIK, LISTA_GRAPHIK, GRAPHIK, HERENCIA, ALS, LISTA_ALS, TIPO_DATO_METODO, METODO, PARAMETRO, LISTA_PARAMETROS, LISTA_PARAMETRO, LISTA_METODOS, LISTA_EXP, ARREGLO, SENTENCIA_HACER_MIENTRAS, SENTENCIA_MIENTRAS, DECLARACION_PARA, SENTENCIA_PARA, ACCION_ANTERIOR, LISTA_CASOS, CASOS, PUNTUAL, SENTENCIA_SELECCION, CUERPO, SENTENCIA_IF, ASIGNACION, LISTA_SENTENCIAS, SENTENCIA, DECLARACION, TIPO_DATO, LISTA_ID, VISIBILIDAD, VALOR_ASIGNACION, EXP, OBJETO, HIJO, LISTA_DIMENSIONES, DEFECTO, NUEVO_OBJETO;

precedence left TOr;
precedence left TXor;
precedence left TAnd;
precedence left TNot;
precedence left TMayor, TMenor, TMayorIgual, TMenorIgual, TIgualacion, TDiferenciacion;

precedence left TMas, TMenos;
precedence left TPor, TDivision; 
precedence right TPotencia; 
precedence left TAumento, TDisminucion;



start with INICIO;

INICIO ::= IMPORTACIONES_GRAPHIK:g LLAMADA_HASKELL:h LISTA_ALS:a   {: Archivo archivo = new Archivo(parser.archivonombre, (ArrayList<Simbolo>)a, (ArrayList<String>)h, (ArrayList<String>)g); 
                                                                        ArrayList<Simbolo> als = (ArrayList<Simbolo>)a;
                                                                        for(Simbolo sim : als){
                                                                            FAls f = (FAls)sim.Valor;
                                                                            f.ArchivoPadre = archivo;

                                                                        }
                                                                        parser.Ejecucion = archivo; :};

IMPORTACIONES_GRAPHIK ::= LISTA_GRAPHIK:t {: RESULT = t; :}
                        | {: RESULT = new ArrayList<String>(); :};

LISTA_GRAPHIK ::= LISTA_GRAPHIK:l GRAPHIK:m {:
                                                        ArrayList<String> lista = (ArrayList<String>)l;
                                                        ArrayList<String> sent = (ArrayList<String>)m;
                                                        for(String sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}
                |GRAPHIK:t {: RESULT = t; :};

GRAPHIK ::= TImportar Id:t TPunto TGk TInterrogacion {: ArrayList<String> lista = new ArrayList<>(); lista.add(t.toString().toLowerCase()); RESULT = lista; :};

LLAMADA_HASKELL ::= LISTA_HASKELL:t {: RESULT = t; :}
                    |{: RESULT = new ArrayList<String>(); :};


LISTA_HASKELL::=     LISTA_HASKELL:l HASKELL:m {:
                                                        ArrayList<String> lista = (ArrayList<String>)l;
                                                        ArrayList<String> sent = (ArrayList<String>)m;
                                                        for(String sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}
                    |HASKELL:t {: RESULT = t; :};

HASKELL::= TIncluye Id:t TInterrogacion     {: ArrayList<String> lista = new ArrayList<>(); lista.add(t.toString().toLowerCase()); RESULT = lista; :};

LISTA_ALS ::= LISTA_ALS:l ALS:m {:
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)m;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}
                |ALS:m {: RESULT = m; :};

ALS::= TAls Id:t HERENCIA:h VISIBILIDAD:v TLlave_Abre LISTA_METODOS:c TLlave_Cierra   {:
                                                                                        Ambito ambito = new Ambito(t.toString().toLowerCase(), (ArrayList<Simbolo>)c);
                                                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                                                            sim.Ambito.Padre = ambito;
                                                                                        }
                                                                                        FAls als = new FAls(t.toString().toLowerCase(), h.toString().toLowerCase(), ambito);
                                                                                        Simbolo s = new Simbolo(v.toString().toLowerCase(), Constante.TAls, t.toString().toLowerCase(), Constante.TAls, tleft, tright, ambito, als); 
                                                                                        ArrayList<Simbolo> listapadre = new ArrayList<>();
                                                                                        listapadre.add(s);
                                                                                        Ambito ambitopadre = new Ambito(t.toString().toLowerCase(), listapadre);
                                                                                        ambito.Padre = ambitopadre;
                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                        lista.add(s);
                                                                                        RESULT = lista;
                                                                                    :};

HERENCIA ::= THereda Id:t {: RESULT = t.toString().toLowerCase(); :}
            |{: RESULT = ""; :};

LISTA_METODOS ::= LISTA_METODOS:l METODO:s  {:
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)s;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}
                    |METODO:m {: RESULT = m; :};

TIPO_DATO_METODO ::= TIPO_DATO:t {: RESULT = t.toString().toLowerCase(); :}
                    | TVacio {: RESULT = Constante.TVacio; :};

METODO::=    TIPO_DATO_METODO:td Id:t TParentesis_Abre LISTA_PARAMETROS:p TParentesis_Cierra VISIBILIDAD:v TLlave_Abre CUERPO:c TLlave_Cierra {:
                                                                                                                                                Ambito ambito = new Ambito(t.toString().toLowerCase(), (ArrayList<Simbolo>)c);
                                                                                                                                                for(Simbolo sim : ambito.TablaSimbolo){
                                                                                                                                                    sim.Ambito.Padre = ambito;
                                                                                                                                                }
                                                                                                                                                ArrayList<Simbolo>pp = (ArrayList<Simbolo>)p;
                                                                                                                                                for(Simbolo sim : pp){
                                                                                                                                                    sim.Ambito.Padre = ambito;
                                                                                                                                                }
                                                                                                                                                FMetodo metodo = new FMetodo(v.toString().toLowerCase(), pp, ambito, tleft, tright, td.toString().toLowerCase(), t.toString().toLowerCase());
                                                                                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                                                                ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                                                                lista.add(s);
                                                                                                                                                RESULT = lista;
                                                                                                                                                :}
            | METODO_DATOS:t {:RESULT = t;:}
            | METODO_INICIO:t {: RESULT = t; :}
            | DECLARACION:t TInterrogacion {: RESULT = t;:}
            | ASIGNACION:t TInterrogacion  {:
                                            ArrayList<Simbolo> lista = new ArrayList<>();
                                            lista.add((Simbolo)t);
                                            RESULT = lista; 
                                            :};

METODO_DATOS ::= TVacio TDatos:t TParentesis_Abre TParentesis_Cierra TLlave_Abre PROCESAR:p DONDE:d TLlave_Cierra {:
                                                                                                        Ambito ambito = new Ambito(Constante.TDatos, new ArrayList<>());
                                                                                                        Simbolo a = new Simbolo(Constante.TPublico, Constante.TProcesar, Constante.TProcesar, Constante.TProcesar, tleft, tright, null, (FProcesar)p);                                                                                                         
                                                                                                        Simbolo b = new Simbolo(Constante.TPublico, Constante.TDonde, Constante.TDonde, Constante.TDonde, tleft, tright, null, (FDonde)d);                                                                                                         
                                                                                                        ambito.TablaSimbolo.add(a);
                                                                                                        ambito.TablaSimbolo.add(b);
                                                                                                        FMetodo metodo = new FMetodo(Constante.TPublico, new ArrayList<Simbolo>(), ambito, tleft, tright, Constante.TVacio, t.toString().toLowerCase());
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TDatos, Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                        lista.add(s);
                                                                                                        RESULT = lista;
                                                                                                        :};



PROCESAR ::= TProcesar:t TIgual EXP:exp TInterrogacion {: RESULT = new FProcesar((FNodoExpresion)exp, tleft, tright); :};

DONDE ::= TDonde:t TParentesis_Abre EXP:exp1 TParentesis_Cierra TIgual EXP:exp2 TInterrogacion {: RESULT = new FDonde(Constante.TDonde, (FNodoExpresion)exp1, (FNodoExpresion)exp2, tleft, tright);:}
            |TDondeCada:t TParentesis_Abre EXP:exp1 TParentesis_Cierra TInterrogacion {: RESULT = new FDonde(Constante.TDondeCada, (FNodoExpresion)exp1, null, tleft, tright);:}
            |TDondeTodo:t TParentesis_Abre EXP:exp1 TParentesis_Cierra TInterrogacion {: RESULT = new FDonde(Constante.TDondeTodo, (FNodoExpresion)exp1, null, tleft, tright);:}
    ;



METODO_INICIO ::= TVacio TInicio:t TParentesis_Abre TParentesis_Cierra TLlave_Abre CUERPO:c TLlave_Cierra{:
                                                                                                        Ambito ambito = new Ambito(Constante.TInicio, (ArrayList<Simbolo>)c);
                                                                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                        }
                                                                                                        FMetodo metodo = new FMetodo(Constante.TPublico, new ArrayList<Simbolo>(), ambito, tleft, tright, Constante.TVacio, t.toString().toLowerCase());
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TInicio, Constante.TMetodo, tleft, tright, ambito, metodo); 
                                                                                                        ArrayList<Simbolo> lista = new ArrayList<>();
                                                                                                        lista.add(s);
                                                                                                        RESULT = lista;
                                                                                                        :};

LISTA_PARAMETROS ::= LISTA_PARAMETRO:l {: RESULT = l; :}
                    | {: RESULT = new ArrayList<Simbolo>(); :};

LISTA_PARAMETRO ::=    LISTA_PARAMETRO:l TComa PARAMETRO:p  {:
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)p;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}

                        | PARAMETRO:p {: RESULT = p; :};

PARAMETRO ::= TIPO_DATO:td Id:t     {: 
                                        FDeclaracion fd = new FDeclaracion(Constante.TPublico, Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright); 
                                        Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                        ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                        lista.add(s);
                                        RESULT = lista;
                                    :};


CUERPO::=   LISTA_SENTENCIAS:l {: RESULT = l; :}
                | {:RESULT = new ArrayList<Simbolo>();:};

LISTA_SENTENCIAS ::= LISTA_SENTENCIAS:l SENTENCIA:s {:
                                                        ArrayList<Simbolo> lista = (ArrayList<Simbolo>)l;
                                                        ArrayList<Simbolo> sent = (ArrayList<Simbolo>)s;
                                                        for(Simbolo sim : sent){
                                                            lista.add(sim);
                                                        }
                                                        RESULT = lista;
                                                    :}
                    |SENTENCIA:s {: RESULT = s; :};

SENTENCIA ::= DECLARACION:t TInterrogacion {: RESULT = t; :}
                |ASIGNACION:t TInterrogacion {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |SENTENCIA_IF:t {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |SENTENCIA_SELECCION:t {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |SENTENCIA_PARA:t {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |SENTENCIA_MIENTRAS:t {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |SENTENCIA_HACER_MIENTRAS:t TInterrogacion{: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}
                |TContinuar:t TInterrogacion {: Simbolo s = new Simbolo(Constante.TPublico, Constante.TContinuar, Constante.TContinuar, Constante.TContinuar, tleft, tright, new Ambito(Constante.TContinuar, new ArrayList<Simbolo>()), null);
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; 
                                                :}
                |TTerminar:t TInterrogacion {: Simbolo s = new Simbolo(Constante.TPublico, Constante.TTerminar, Constante.TTerminar, Constante.TTerminar, tleft, tright, new Ambito(Constante.TTerminar, new ArrayList<Simbolo>()), null); 
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l;
                                                :}
                |TRetornar:t EXP:exp TInterrogacion {: Simbolo s = new Simbolo(Constante.TPublico, Constante.TRetornar, Constante.TRetornar, Constante.TRetornar, tleft, tright, new Ambito(Constante.TRetornar, new ArrayList<Simbolo>()), (FNodoExpresion)exp); 
                                                        ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                        l.add(s);
                                                        RESULT = l;
                                                        :}
                |LLAMADA_METODO:t TInterrogacion {: 
                                                Simbolo s = (Simbolo)t;
                                                ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                l.add(s);
                                                RESULT = l; :}

                |TLlamar TDatos:t TParentesis_Abre TParentesis_Cierra TInterrogacion{:Simbolo s = new Simbolo(Constante.TPublico, Constante.TDatos, Constante.TDatos, Constante.TDatos, tleft, tright, new Ambito(Constante.TDatos, new ArrayList<Simbolo>()), null); 
                                                                                    ArrayList<Simbolo> l = new ArrayList<Simbolo>();
                                                                                    l.add(s);
                                                                                    RESULT = l;:};

LLAMADA_METODO ::= LLAMADA_FUNCION:t {:
                                    FLlamadaObjeto lo = (FLlamadaObjeto)t; 
                                    RESULT = new Simbolo(Constante.TPublico, Constante.TMetodo, Constante.TMetodo, Constante.TMetodo, lo.Fila, lo.Columna, new Ambito(Constante.TMetodo, new ArrayList<Simbolo>()), lo); :}
                    | LLAMADA_GRAPHIKAR:t {: RESULT = t; :}
                    | LLAMADA_IMPRIMIR:t {: RESULT = t; :};

LLAMADA_AUMENTO ::= OBJETO:o Id:t TAumento  {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAumento, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                    |Id:t TAumento  {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAumento, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                    |OBJETO:o Id:t LISTA_DIMENSIONES:l TAumento     {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAumento,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :}
                    |Id:t LISTA_DIMENSIONES:l TAumento  {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAumento, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAumento, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :};

LLAMADA_DISMINUCION ::= OBJETO:o Id:t TDisminucion  {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TDisminucion, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                    |Id:t TDisminucion  {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TDisminucion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                    |OBJETO:o Id:t LISTA_DIMENSIONES:l TDisminucion     {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TDisminucion,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :}
                    |Id:t LISTA_DIMENSIONES:l TDisminucion  {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TDisminucion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TDisminucion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :};

LLAMADA_GRAPHIKAR ::= TGraphikar_Funcion:t TParentesis_Abre EXP:exp1 TComa EXP:exp2 TParentesis_Cierra {:
                                                                                                        FGraphikar fg = new FGraphikar((FNodoExpresion)exp1 ,(FNodoExpresion)exp2, new Ambito(Constante.TGraficarFuncion, new ArrayList<Simbolo>()));
                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TGraficarFuncion, Constante.TGraficarFuncion, tleft, tright, fg.Ambito, fg);
                                                                                                        RESULT = s;
                                                                                                    :};

LLAMADA_IMPRIMIR ::= TImprimir:t TParentesis_Abre EXP:exp TParentesis_Cierra    {:
                                                                                FImprimir fg = new FImprimir((FNodoExpresion)exp);
                                                                                Simbolo s = new Simbolo(Constante.TPublico, Constante.TVacio, Constante.TImprimir, Constante.TImprimir, tleft, tright, fg.Ambito, fg);
                                                                                RESULT = s;
                                                                            :};

DECLARACION ::= TVar TIPO_DATO:td Id:t VISIBILIDAD:v LISTA_ID:l     {: 
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright); 
                                                                                ArrayList<FDeclaracion> listad = (ArrayList<FDeclaracion>)l;
                                                                                listad.add(fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();
                                                                                for(FDeclaracion dec : listad){
                                                                                    dec.Tipo = td.toString().toLowerCase();
                                                                                    Simbolo s = new Simbolo(dec.Visibilidad, dec.Tipo, dec.Nombre, Constante.TDeclaracion, tleft, tright, new Ambito(dec.Nombre, new ArrayList<Simbolo>()), dec);
                                                                                    lista.add(s);
                                                                                }
                                                                                RESULT = lista;
                                                                                :} 
                | TVar TIPO_DATO:td Id:t VISIBILIDAD:v VALOR_ASIGNACION:exp    {: 
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp, tleft, tright); 
                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                                :}
                | TVar TIPO_DATO:td Id:t LISTA_DIMENSIONES:l VISIBILIDAD:v VALOR_ASIGNACION:exp{: 
                                                                                FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, (FNodoExpresion)exp);
                                                                                FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                                Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                                :}
                | TVar TIPO_DATO:td Id:t LISTA_DIMENSIONES:l VISIBILIDAD:v {: 
                                                                    FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, null);
                                                                    FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase(), Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                    Simbolo s = new Simbolo(v.toString().toLowerCase(), td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                    ArrayList<Simbolo> lista = new ArrayList<Simbolo>();;
                                                                                lista.add(s);
                                                                                RESULT = lista;
                                                                    :}
                ;



ASIGNACION::=   OBJETO:o Id:t LISTA_DIMENSIONES:l TIgual EXP:exp  {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAsignacion,flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :}
                |Id:t LISTA_DIMENSIONES:l TIgual EXP:exp    {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FAsignacion fa = new FAsignacion(Constante.TVariableArreglo, Constante.TAsignacion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                    RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                    :}
                | OBJETO:o Id:t VALOR_ASIGNACION:exp    {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                            flo.InsertarHijo(hijo);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAsignacion, flo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                | Id:t VALOR_ASIGNACION:exp   {:                            
                                                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                                                            FAsignacion fa = new FAsignacion(Constante.TVariable, Constante.TAsignacion, hijo, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp);
                                                            RESULT = new Simbolo(Constante.TPublico, Constante.TAsignacion, t.toString().toLowerCase(), Constante.TAsignacion, tleft, tright, fa.Ambito , fa); 
                                                        :}
                | LLAMADA_AUMENTO:t {: RESULT = t; :}
                | LLAMADA_DISMINUCION:t {: RESULT = t; :};



VALOR_ASIGNACION ::= TIgual EXP:exp {: RESULT = exp; :}
                        | TIgual NUEVO_OBJETO:exp {: RESULT = exp; :}
                        ;

NUEVO_OBJETO ::=    TNuevo Id:t TParentesis_Abre TParentesis_Cierra {: RESULT = new FNodoExpresion(null, null, Constante.TNuevo, t.toString().toLowerCase(), tleft, tright, null); :};

LISTA_ID ::= TComa Id:t VISIBILIDAD:v LISTA_ID:l {:
                                                        FDeclaracion fd = new FDeclaracion(v.toString().toLowerCase() ,Constante.TVariable, "", t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), null, tleft, tright);
                                                        ArrayList<FDeclaracion> lista = (ArrayList<FDeclaracion>)l;
                                                        lista.add(fd);
                                                        RESULT = lista;          
                                                    :}
            | {:RESULT = new ArrayList<FDeclaracion>();:};

VISIBILIDAD ::= TDosPuntos TPublico {:RESULT = Constante.TPublico;:}
                | TDosPuntos TPrivado {:RESULT = Constante.TPrivado;:}
                | TDosPuntos TProtegido {:RESULT = Constante.TProtegido;:}
                | {:RESULT = Constante.TPublico;:};

TIPO_DATO ::= TEntero:t {:RESULT = Constante.TEntero;:}
              | TDecimal {:RESULT = Constante.TDecimal;:}
              | TCadena {:RESULT = Constante.TCadena;:}
              | TCaracter {:RESULT = Constante.TCaracter;:}
              | TBool {:RESULT = Constante.TBool;:}
              | Id:t {:RESULT = t.toString().toLowerCase();:};


SENTENCIA_IF::= TSi:t TParentesis_Abre EXP:exp TParentesis_Cierra TLlave_Abre CUERPO:cs TLlave_Cierra
               {:
                    Ambito ambitosi = new Ambito(Constante.TSi, (ArrayList<Simbolo>)cs);
                    Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
                            
                    for(Simbolo sim: ambitosi.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }                    
                            
                    FSi fs = new FSi((FNodoExpresion)exp, ambitosi, null, ambito);
                    Simbolo s = new Simbolo(Constante.TPublico, Constante.TSi, Constante.TSi, Constante.TSi, tleft, tright, fs.Ambito, fs);
                    RESULT = s;
                :} 
                | TSi:t TParentesis_Abre EXP:exp TParentesis_Cierra TLlave_Abre CUERPO:cs TLlave_Cierra TSino TLlave_Abre CUERPO:csn TLlave_Cierra
                {:
                    Ambito ambitosi = new Ambito(Constante.TSi, (ArrayList<Simbolo>)cs);
                    Ambito ambitosino = new Ambito(Constante.TSiNo, (ArrayList<Simbolo>)csn);
                    Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
                            
                    for(Simbolo sim: ambitosi.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }
                    
                    for(Simbolo sim: ambitosino.TablaSimbolo){
                        sim.Ambito.Padre = ambito;
                    }        
                    FSi fs = new FSi((FNodoExpresion)exp, ambitosi, ambitosino, ambito);
                    Simbolo s = new Simbolo(Constante.TPublico, Constante.TSi, Constante.TSi, Constante.TSi, tleft, tright, fs.Ambito, fs);
                    RESULT = s;
                :}
                    ;


SENTENCIA_SELECCION::=  TSeleccion:t TParentesis_Abre EXP:exp TParentesis_Cierra TLlave_Abre LISTA_CASOS:l DEFECTO:d TLlave_Cierra 
                        {:
                            Ambito ambito = new Ambito(Constante.TSeleccion, (ArrayList<Simbolo>)l);
                            ArrayList<FCaso> casos = (ArrayList<FCaso>)l;
                            for(FCaso caso: casos){
                                for(Simbolo sim: caso.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                                }
                            }
                            FCaso defecto = (FCaso)d;
                            for(Simbolo sim: defecto.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                            }
                            FSelecciona fs = new FSelecciona((FNodoExpresion)exp,casos,defecto,ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, tleft, tright, fs.Ambito, fs);
                            RESULT = s;
                            :}

                        | TSeleccion:t TParentesis_Abre EXP:exp TParentesis_Cierra TLlave_Abre LISTA_CASOS:l TLlave_Cierra 
                        {:
                            Ambito ambito = new Ambito(Constante.TSeleccion, (ArrayList<Simbolo>)l);
                            ArrayList<FCaso> casos = (ArrayList<FCaso>)l;
                            for(FCaso caso: casos){
                                for(Simbolo sim: caso.Ambito.TablaSimbolo){
                                    sim.Ambito.Padre = ambito;
                                }
                            }

                            FSelecciona fs = new FSelecciona((FNodoExpresion)exp, casos,null,ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, tleft, tright, fs.Ambito, fs);
                            RESULT = s;
                            :};

LISTA_CASOS::= LISTA_CASOS:l CASOS:c    {:
                                            ArrayList<FCaso> lista = (ArrayList<FCaso>)l;
                                            lista.add((FCaso)c);
                                            RESULT = lista;
                                        :} 
                |CASOS:c    {:
                                ArrayList<FCaso> lista = new ArrayList<>();
                                lista.add((FCaso)c);
                                RESULT = lista;
                            :};

CASOS::=    TCaso:t PUNTUAL:p TDosPuntos CUERPO:c   {:
                                                        Ambito ambito = new Ambito(Constante.TCaso, (ArrayList<Simbolo>)c);
                                                        for(Simbolo sim : ambito.TablaSimbolo){
                                                            sim.Ambito.Padre = ambito;
                                                        }
                                                        FNodoExpresion puntual = (FNodoExpresion)p;
                                                        FCaso caso = new FCaso(puntual, ambito);
                                                        RESULT = caso;
                                                    :};

DEFECTO ::= TDefecto:t TDosPuntos CUERPO:c {:
                                                Ambito ambito = new Ambito(Constante.TCaso, (ArrayList<Simbolo>)c);
                                                for(Simbolo sim : ambito.TablaSimbolo){
                                                    sim.Ambito.Padre = ambito;
                                                }
                                                FCaso caso = new FCaso(null, ambito);
                                                RESULT = caso;
                                            :}; 

PUNTUAL ::= Entero:t  {: RESULT = new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, tleft, tright, t.toString().toLowerCase());  :}
            |Decimal:t {: RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t.toString().toLowerCase());  :}
            |Cadena:t {: RESULT = new FNodoExpresion(null, null, Constante.TCadena, Constante.TCadena, tleft, tright, t.toString().toLowerCase());  :}
            |Caracter:t {: RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t.toString().toLowerCase());  :};


SENTENCIA_PARA ::=  TPara:t TParentesis_Abre ACCION_ANTERIOR:aa TDosPuntos EXP:exp TDosPuntos ASIGNACION:ap TParentesis_Cierra TLlave_Abre CUERPO:c TLlave_Cierra

                        {:
                            Ambito ambito = new Ambito(Constante.TPara, (ArrayList<Simbolo>)c);
                            for(Simbolo sim: ambito.TablaSimbolo){
                                sim.Ambito.Padre = ambito;
                            }
                            FPara fp = new FPara((Simbolo)aa,(FNodoExpresion)exp,(Simbolo)ap, ambito);
                            Simbolo s = new Simbolo(Constante.TPublico, Constante.TPara, Constante.TPara, Constante.TPara, tleft, tright, fp.Ambito, fp);
                            RESULT = s;
                        :};

ACCION_ANTERIOR::= DECLARACION_PARA:t {: RESULT = t; :}
                    |ASIGNACION:t {: RESULT = t; :};

DECLARACION_PARA ::= TVar TIPO_DATO:td Id:t VALOR_ASIGNACION:exp {: 
                                                                                FDeclaracion fd = new FDeclaracion(Constante.TPublico ,Constante.TVariable, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), (FNodoExpresion)exp, tleft, tright); 
                                                                                Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                RESULT = s;
                                                                                :}
                | TVar TIPO_DATO:td Id:t LISTA_DIMENSIONES:d TIgual EXP:exp {: 
                                                                                FArreglo fa = new FArreglo(td.toString().toLowerCase(), t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)d, (FNodoExpresion)exp);
                                                                                FDeclaracion fd = new FDeclaracion(Constante.TPublico, Constante.TVariableArreglo, td.toString().toLowerCase(), t.toString().toLowerCase(), new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fa, tleft, tright); 
                                                                                Simbolo s = new Simbolo(Constante.TPublico, td.toString().toLowerCase(), t.toString().toLowerCase(), Constante.TDeclaracion, tleft, tright, new Ambito(t.toString().toLowerCase(), new ArrayList<Simbolo>()), fd);
                                                                                RESULT = s;
                                                                                :}
                ;

SENTENCIA_MIENTRAS ::=  TMientras:t TParentesis_Abre EXP:exp TParentesis_Cierra TLlave_Abre CUERPO:c TLlave_Cierra  {:  
                                                                                                                        Ambito ambito = new Ambito(Constante.TMientras, (ArrayList<Simbolo>)c);
                                                                                                                        for(Simbolo sim: ambito.TablaSimbolo){
                                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                                        }
                                                                                                                        FMientras m = new FMientras((FNodoExpresion)exp, ambito);
                                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.TMientras, Constante.TMientras, Constante.TMientras, tleft, tright, m.Ambito, m);
                                                                                                                        RESULT = s;
                                                                                                                    :};

SENTENCIA_HACER_MIENTRAS ::= THacer:t TLlave_Abre CUERPO:c TLlave_Cierra TMientras TParentesis_Abre EXP:exp TParentesis_Cierra  {:  
                                                                                                                        Ambito ambito = new Ambito(Constante.TMientras, (ArrayList<Simbolo>)c);
                                                                                                                        for(Simbolo sim: ambito.TablaSimbolo){
                                                                                                                            sim.Ambito.Padre = ambito;
                                                                                                                        }
                                                                                                                        FHacerMientras m = new FHacerMientras((FNodoExpresion)exp, ambito);
                                                                                                                        Simbolo s = new Simbolo(Constante.TPublico, Constante.THacer, Constante.THacer, Constante.THacer, tleft, tright, m.Ambito, m);
                                                                                                                        RESULT = s;
                                                                                                                    :};

EXP ::= EXP:izq TOr:t EXP:der       {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TOr, Constante.TOr, tleft, tright, null); 
                                    :}
        | EXP:izq TXor:t EXP:der    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TXor, Constante.TXor, tleft, tright, null); 
                                    :}
        | EXP:izq TAnd:t EXP:der    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAnd, Constante.TAnd, tleft, tright, null); 
                                    :}
        | TNot:t EXP:der  {:
                            RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TNot, Constante.TNot, tleft, tright, null); 
                        :}
        | EXP:izq TMayor:t EXP:der  {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayor, Constante.TMayor, tleft, tright, null); 
                                    :}
        | EXP:izq TMenor:t EXP:der  {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenor, Constante.TMenor, tleft, tright, null); 
                                    :}
        | EXP:izq TMayorIgual:t EXP:der     {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayorIgual, Constante.TMayorIgual, tleft, tright, null); 
                                            :}
        | EXP:izq TMenorIgual:t EXP:der     {:
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenorIgual, Constante.TMenorIgual, tleft, tright, null); 
                                            :}        
        | EXP:izq TIgualacion:t EXP:der {:
                                            RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIgualacion, Constante.TIgualacion, tleft, tright, null); 
                                        :}
        | EXP:izq TDiferenciacion:t EXP:der     {:
                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDiferenciacion, Constante.TDiferenciacion, tleft, tright, null); 
                                                :}
        | EXP:izq TMas:t EXP:der    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMas, Constante.TMas, tleft, tright, null); 
                                    :}
        | EXP:izq TMenos:t EXP:der  {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                    :}
        | EXP:izq TPor:t EXP:der    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPor, Constante.TPor, tleft, tright, null); 
                                    :}
        | EXP:izq TDivision:t EXP:der   {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDivision, Constante.TDivision, tleft, tright, null); 
                                    :}
        | EXP:izq TPotencia:t EXP:der   {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPotenciaG, Constante.TPotenciaG, tleft, tright, null); 
                                    :}
        | EXP:izq TAumento:t    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, null, Constante.TAumento, Constante.TAumento, tleft, tright, null); 
                                    :}
        | EXP:izq TDisminucion:t    {:
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, null, Constante.TDecremento, Constante.TDecremento, tleft, tright, null); 
                                    :}
        | TMenos:t EXP:der  {:
                                        RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                    :}
        | TParentesis_Abre EXP:t TParentesis_Cierra     {:
                                                            RESULT = t; 
                                                        :}
        | Entero:t  {:
                        RESULT = new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, tleft, tright, t.toString().toLowerCase()); 
                    :}
        | Decimal:t     {:
                        RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t.toString().toLowerCase()); 
                    :}
        | Caracter:t    {:
                        RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, t.toString().toLowerCase().substring(1, t.toString().toLowerCase().length()-1)); 
                    :}
        | Cadena:t  {:
                        RESULT = new FNodoExpresion(null, null, Constante.TCadena, Constante.TCadena, tleft, tright, t.toString().toLowerCase().substring(1, t.toString().toLowerCase().length()-1)); 
                    :}
        | Verdadero:t   {:
                        RESULT = new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, tleft, tright, true); 
                    :}
        | Falso:t   {:
                        RESULT = new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, tleft, tright, false); 
                    :}
        | OBJETO:o Id:t   {:                            
                            FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                            FLlamadaObjeto flo = (FLlamadaObjeto)o;
                            flo.InsertarHijo(hijo);
                            RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, flo); 
                        :}
        | Id:t  {:
                        FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                        RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, hijo); 
                    :}
        | OBJETO:o Id:t LISTA_DIMENSIONES:l     {:
                                                    FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l);
                                                    FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                    FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                    flo.InsertarHijo(hijo);
                                                    RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, flo); 
                    :}
        | Id:t LISTA_DIMENSIONES:listat     {:
                                                FLlamadaArreglo fla = new FLlamadaArreglo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)listat);
                                                FLlamadaObjeto hijo = new FLlamadaObjeto(Constante.TVariableArreglo, t.toString().toLowerCase(), tleft, tright, fla);
                                                RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, hijo);  
                                            :}
        | ARREGLO:t   {:
                        RESULT = t; 
                    :}
        | LLAMADA_FUNCION:t   {:
                        RESULT = new FNodoExpresion(null, null, Constante.TAls, Constante.TAls, tleft, tright, (FLlamadaObjeto)t); 
                    :}
        | TColumna:t TParentesis_Abre EXP:exp TParentesis_Cierra {: RESULT = new FNodoExpresion(null, null, Constante.TColumna, Constante.TColumna, tleft, tright, (FNodoExpresion)exp); :};  


ARREGLO ::= TLlave_Abre:a LISTA_EXP:t TLlave_Cierra {:
                                                    FNodoArreglo fa = new FNodoArreglo((ArrayList<FNodoExpresion>)t);
                                                    FNodoExpresion fe = new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, aleft, aright, fa); 
                                                    RESULT = fe;:};

LISTA_EXP::= LISTA_EXP:listaux TComa EXP:exp    {:
                                                    ArrayList<FNodoExpresion> lista = (ArrayList<FNodoExpresion>)listaux;
                                                    lista.add((FNodoExpresion)exp);
                                                    RESULT = lista;
                                                :} 
            | EXP:t     {:
                                ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                lista.add((FNodoExpresion)t);
                                RESULT = lista; 
                            :};


OBJETO ::= OBJETO:p HIJO:h   {:
                                FLlamadaObjeto padre = (FLlamadaObjeto)p;
                                FLlamadaObjeto hijo = (FLlamadaObjeto)h;
                                padre.InsertarHijo(hijo);
                                RESULT = padre;
                            :}
        |HIJO:t {: RESULT = t;:};

HIJO ::= Id:t TPunto {:
                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TVariable, t.toString().toLowerCase(), tleft, tright, null);
                        RESULT = lo;
                    :}
        |Id:t TParentesis_Abre LISTA_EXP_FUNCION:l TParentesis_Cierra TPunto    {:
                                                                                    FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                    FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                    RESULT = lo;
                                                                                :};


LLAMADA_FUNCION ::= TLlamar OBJETO:o Id:t TParentesis_Abre LISTA_EXP_FUNCION:l TParentesis_Cierra   {:
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        FLlamadaObjeto flo = (FLlamadaObjeto)o;
                                                                                                        flo.InsertarHijo(lo);
                                                                                                        RESULT = flo; 
                                                                                                    :}
                    |TLlamar Id:t TParentesis_Abre LISTA_EXP_FUNCION:l TParentesis_Cierra   {:
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Graphik);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        RESULT = lo; 
                                                                                                    :}

                    | TLlamarHk Id:t TParentesis_Abre LISTA_EXP_FUNCION:l TParentesis_Cierra    {:
                                                                                                        FLlamadaMetodo lm = new FLlamadaMetodo(t.toString().toLowerCase(), (ArrayList<FNodoExpresion>)l, tleft, tright, Constante.Haskell);
                                                                                                        FLlamadaObjeto lo = new FLlamadaObjeto(Constante.TMetodo, t.toString().toLowerCase(), tleft, tright, lm);
                                                                                                        RESULT = lo; 
                                                                                                    :};

LISTA_EXP_FUNCION ::= LISTA_EXP:L {: RESULT = L;:}
                        | {: RESULT = new ArrayList<FNodoExpresion>(); :};


LISTA_DIMENSIONES ::= LISTA_DIMENSIONES:ld TCorchete_Abre EXP:exp TCorchete_Cierra   {:
                                                            ArrayList<FNodoExpresion> listadimension = (ArrayList<FNodoExpresion>)ld;
                                                            listadimension.add((FNodoExpresion)exp);
                                                            RESULT = listadimension;

                                                    :}
                    | TCorchete_Abre EXP:exp TCorchete_Cierra {: 
                                                        ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                                        lista.add((FNodoExpresion)exp);
                                                        RESULT = lista;:};

