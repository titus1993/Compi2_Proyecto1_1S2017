
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 12 13:41:44 CST 2017
//----------------------------------------------------

package Analisis.Haskell;

import Constante.Constante;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 12 13:41:44 CST 2017
  */
public class Haskell_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Haskell_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\006" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\007\000\002\011\011\000\002\034\006\000\002\035\004" +
    "\000\002\035\003\000\002\036\006\000\002\037\003\000" +
    "\002\037\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\013\005\000\002" +
    "\041\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\040\006\000\002\023\004\000\002\024\004\000\002" +
    "\025\004\000\002\027\004\000\002\030\004\000\002\031" +
    "\005\000\002\032\005\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\014" +
    "\006\000\002\014\006\000\002\015\005\000\002\016\003" +
    "\000\002\016\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\004\004\001\002\000\006\004\012\034" +
    "\014\001\002\000\006\002\000\004\004\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\034\ufffa\066\ufffa\001\002\000\006\034\236\066" +
    "\235\001\002\000\012\017\024\037\020\060\017\063\026" +
    "\001\002\000\020\017\ufff6\037\ufff6\057\ufff6\060\ufff6\062" +
    "\ufff6\063\ufff6\067\ufff6\001\002\000\020\017\ufff5\037\ufff5" +
    "\057\ufff5\060\ufff5\062\ufff5\063\ufff5\067\ufff5\001\002\000" +
    "\026\004\034\005\037\006\076\007\075\011\032\017\024" +
    "\020\035\022\031\023\033\035\074\001\002\000\004\004" +
    "\222\001\002\000\020\017\ufff7\037\ufff7\057\ufff7\060\ufff7" +
    "\062\ufff7\063\ufff7\067\ufff7\001\002\000\004\057\221\001" +
    "\002\000\020\017\ufff4\037\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\063\ufff4\067\ufff4\001\002\000\042\004\167\007\160\035" +
    "\074\040\143\041\154\042\150\043\155\044\161\045\172" +
    "\046\163\047\164\050\165\051\146\052\153\053\171\054" +
    "\166\001\002\000\020\017\ufff3\037\ufff3\057\ufff3\060\ufff3" +
    "\062\ufff3\063\ufff3\067\ufff3\001\002\000\020\004\034\005" +
    "\037\011\032\017\024\020\035\022\031\023\033\001\002" +
    "\000\020\017\024\037\020\057\ufff9\060\017\062\ufff9\063" +
    "\026\067\ufff9\001\002\000\020\017\ufff8\037\ufff8\057\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\067\ufff8\001\002\000\060\005" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4" +
    "\061\uffd4\065\uffd4\066\uffd4\001\002\000\020\004\034\005" +
    "\037\011\032\017\024\020\035\022\031\023\033\001\002" +
    "\000\060\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\036\uffd5\061\uffd5\065\uffd5\066\uffd5\001\002\000\060" +
    "\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\036" +
    "\uffd2\061\uffd2\065\uffd2\066\uffd2\001\002\000\026\004\034" +
    "\005\037\006\076\007\075\011\032\017\024\020\035\022" +
    "\031\023\033\035\074\001\002\000\060\005\uffd1\006\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\061\uffd1\065" +
    "\uffd1\066\uffd1\001\002\000\060\005\uffd3\006\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\036\uffd3\061\uffd3\065\uffd3\066" +
    "\uffd3\001\002\000\024\005\053\006\050\010\044\011\043" +
    "\012\054\013\052\014\046\015\041\016\051\001\002\000" +
    "\020\004\034\005\037\011\032\017\024\020\035\022\031" +
    "\023\033\001\002\000\004\070\065\001\002\000\020\004" +
    "\034\005\037\011\032\017\024\020\035\022\031\023\033" +
    "\001\002\000\020\004\034\005\037\011\032\017\024\020" +
    "\035\022\031\023\033\001\002\000\010\005\uffee\006\uffee" +
    "\057\uffee\001\002\000\020\004\034\005\037\011\032\017" +
    "\024\020\035\022\031\023\033\001\002\000\010\005\053" +
    "\006\050\057\060\001\002\000\004\070\uffeb\001\002\000" +
    "\020\004\034\005\037\011\032\017\024\020\035\022\031" +
    "\023\033\001\002\000\020\004\034\005\037\011\032\017" +
    "\024\020\035\022\031\023\033\001\002\000\004\070\uffec" +
    "\001\002\000\020\004\034\005\037\011\032\017\024\020" +
    "\035\022\031\023\033\001\002\000\060\005\uffdb\006\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\041\016" +
    "\051\017\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\061\uffdb\065" +
    "\uffdb\066\uffdb\001\002\000\060\005\uffda\006\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\041\016\051\017" +
    "\uffda\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\036\uffda\061\uffda\065\uffda\066" +
    "\uffda\001\002\000\060\005\uffd7\006\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\041\016\051\017\uffd7\021" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\036\uffd7\061\uffd7\065\uffd7\066\uffd7\001" +
    "\002\000\020\017\ufff0\037\ufff0\057\ufff0\060\ufff0\062\ufff0" +
    "\063\ufff0\067\ufff0\001\002\000\010\005\uffef\006\uffef\057" +
    "\uffef\001\002\000\060\005\uffd9\006\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\041\016\051\017\uffd9\021" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\036\uffd9\061\uffd9\065\uffd9\066\uffd9\001" +
    "\002\000\060\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012\054" +
    "\013\052\014\046\015\041\016\051\017\uffdd\021\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\036\uffdd\061\uffdd\065\uffdd\066\uffdd\001\002\000" +
    "\060\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\054\013\052" +
    "\014\046\015\041\016\051\017\uffdc\021\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\036\uffdc\061\uffdc\065\uffdc\066\uffdc\001\002\000\012\017" +
    "\024\037\020\060\017\063\026\001\002\000\004\067\067" +
    "\001\002\000\010\005\uffed\006\uffed\057\uffed\001\002\000" +
    "\060\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\041\016\051\017\uffd8\021\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\036\uffd8\061\uffd8\065\uffd8\066\uffd8\001\002\000\010\021" +
    "\134\032\132\033\133\001\002\000\026\021\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\061\uffce\001\002\000\026\021\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\061" +
    "\uffdf\001\002\000\022\004\034\005\037\011\032\017\024" +
    "\020\035\022\031\023\033\035\116\001\002\000\026\021" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\061\uffe0\001\002\000\026\021\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\061\uffde\001\002\000\026\021\uffe8\024\105\025" +
    "\104\026\101\027\102\030\103\031\106\032\uffe8\033\uffe8" +
    "\061\uffe8\001\002\000\044\010\044\011\043\012\054\013" +
    "\052\014\046\015\041\016\051\021\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\061" +
    "\uffe1\001\002\000\026\004\034\005\037\006\076\007\075" +
    "\011\032\017\024\020\035\022\031\023\033\035\074\001" +
    "\002\000\026\004\034\005\037\006\076\007\075\011\032" +
    "\017\024\020\035\022\031\023\033\035\074\001\002\000" +
    "\026\004\034\005\037\006\076\007\075\011\032\017\024" +
    "\020\035\022\031\023\033\035\074\001\002\000\026\004" +
    "\034\005\037\006\076\007\075\011\032\017\024\020\035" +
    "\022\031\023\033\035\074\001\002\000\026\004\034\005" +
    "\037\006\076\007\075\011\032\017\024\020\035\022\031" +
    "\023\033\035\074\001\002\000\026\004\034\005\037\006" +
    "\076\007\075\011\032\017\024\020\035\022\031\023\033" +
    "\035\074\001\002\000\026\021\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\061\uffe2" +
    "\001\002\000\026\021\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\061\uffe7\001\002" +
    "\000\026\021\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\061\uffe6\001\002\000\026" +
    "\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\061\uffe3\001\002\000\026\021\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\061\uffe4\001\002\000\026\021\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\061\uffe5\001\002\000\004\036\131\001\002\000\020" +
    "\004\034\005\037\011\032\017\024\020\035\022\031\023" +
    "\033\001\002\000\006\036\uffad\066\125\001\002\000\006" +
    "\036\uffab\066\uffab\001\002\000\026\010\044\011\043\012" +
    "\054\013\052\014\046\015\041\016\051\036\uffa8\065\uffa8" +
    "\066\uffa8\001\002\000\006\036\uffae\066\123\001\002\000" +
    "\020\004\034\005\037\011\032\017\024\020\035\022\031" +
    "\023\033\001\002\000\026\010\044\011\043\012\054\013" +
    "\052\014\046\015\041\016\051\036\uffa9\065\uffa9\066\uffa9" +
    "\001\002\000\004\035\116\001\002\000\006\036\uffac\066" +
    "\uffac\001\002\000\006\036\130\066\123\001\002\000\006" +
    "\036\uffaa\066\uffaa\001\002\000\050\017\uffaf\021\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\037\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\067\uffaf\001\002\000\026\004\034" +
    "\005\037\006\076\007\075\011\032\017\024\020\035\022" +
    "\031\023\033\035\074\001\002\000\026\004\034\005\037" +
    "\006\076\007\075\011\032\017\024\020\035\022\031\023" +
    "\033\035\074\001\002\000\060\005\uffd0\006\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\036\uffd0\061\uffd0\065\uffd0\066" +
    "\uffd0\001\002\000\012\021\uffe9\032\uffe9\033\uffe9\061\uffe9" +
    "\001\002\000\012\021\uffea\032\uffea\033\uffea\061\uffea\001" +
    "\002\000\060\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\054" +
    "\013\052\014\046\015\041\016\051\017\uffd6\021\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\036\uffd6\061\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\004\017\uffc7\001\002\000\004\017\uffcd\001\002\000\004" +
    "\017\uffc6\001\002\000\020\004\034\005\037\011\032\017" +
    "\024\020\035\022\031\023\033\001\002\000\006\055\214" +
    "\056\215\001\002\000\024\017\uffb2\037\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\067\uffb2\001\002" +
    "\000\010\004\174\007\160\035\074\001\002\000\004\017" +
    "\uffca\001\002\000\020\004\034\005\037\011\032\017\024" +
    "\020\035\022\031\023\033\001\002\000\004\017\uffc9\001" +
    "\002\000\004\017\uffc5\001\002\000\010\004\174\007\160" +
    "\035\074\001\002\000\020\004\034\005\037\011\032\017" +
    "\024\020\035\022\031\023\033\001\002\000\010\004\174" +
    "\007\160\035\074\001\002\000\004\017\uffc8\001\002\000" +
    "\004\017\206\001\002\000\024\017\uffb4\037\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\062\uffb4\063\uffb4\067\uffb4\001" +
    "\002\000\010\004\174\007\160\035\074\001\002\000\004" +
    "\017\uffcb\001\002\000\010\004\174\007\160\035\074\001" +
    "\002\000\010\004\174\007\160\035\074\001\002\000\010" +
    "\004\174\007\160\035\074\001\002\000\010\004\174\007" +
    "\160\035\074\001\002\000\010\055\uffb3\056\uffb3\064\176" +
    "\001\002\000\004\017\uffcc\001\002\000\010\004\174\007" +
    "\160\035\074\001\002\000\010\004\174\007\160\035\074" +
    "\001\002\000\004\017\uffbc\001\002\000\022\017\uffb3\037" +
    "\uffb3\055\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\067\uffb3" +
    "\001\002\000\004\017\uffb6\001\002\000\020\004\034\005" +
    "\037\011\032\017\024\020\035\022\031\023\033\001\002" +
    "\000\006\065\200\066\123\001\002\000\004\017\uffc4\001" +
    "\002\000\004\017\uffb5\001\002\000\004\017\uffb9\001\002" +
    "\000\004\017\uffba\001\002\000\004\017\uffbb\001\002\000" +
    "\004\017\uffbf\001\002\000\074\005\uffcf\006\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\021\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\001\002\000\004\017\uffc0\001\002\000\022\010\044\011" +
    "\043\012\054\013\052\014\046\015\041\016\051\017\uffc2" +
    "\001\002\000\004\017\uffb7\001\002\000\022\010\044\011" +
    "\043\012\054\013\052\014\046\015\041\016\051\017\uffc1" +
    "\001\002\000\004\017\uffb8\001\002\000\010\004\174\007" +
    "\160\035\074\001\002\000\004\017\024\001\002\000\004" +
    "\017\uffbd\001\002\000\020\017\uffbe\037\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\063\uffbe\067\uffbe\001\002\000\022\010\044" +
    "\011\043\012\054\013\052\014\046\015\041\016\051\017" +
    "\uffc3\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004" +
    "\034\223\001\002\000\010\004\174\007\160\035\074\001" +
    "\002\000\022\017\uffb1\037\uffb1\055\214\057\uffb1\060\uffb1" +
    "\062\uffb1\063\uffb1\067\uffb1\001\002\000\020\017\uffb0\037" +
    "\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\067\uffb0\001\002" +
    "\000\010\032\132\033\133\061\227\001\002\000\012\017" +
    "\024\037\020\060\017\063\026\001\002\000\006\057\232" +
    "\062\231\001\002\000\012\017\024\037\020\060\017\063" +
    "\026\001\002\000\020\017\ufff2\037\ufff2\057\ufff2\060\ufff2" +
    "\062\ufff2\063\ufff2\067\ufff2\001\002\000\004\057\234\001" +
    "\002\000\020\017\ufff1\037\ufff1\057\ufff1\060\ufff1\062\ufff1" +
    "\063\ufff1\067\ufff1\001\002\000\004\004\241\001\002\000" +
    "\012\017\024\037\020\060\017\063\026\001\002\000\004" +
    "\057\240\001\002\000\006\002\ufffd\004\ufffd\001\002\000" +
    "\006\034\ufffb\066\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\010\002\006\003\004\004\005\001\001\000" +
    "\004\005\012\001\001\000\004\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\021" +
    "\007\026\010\020\011\014\013\022\014\024\034\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\077" +
    "\013\035\015\071\041\072\042\225\043\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\144\022\156\023\140\024\167\025" +
    "\161\026\143\027\146\030\150\031\155\032\141\033\137" +
    "\040\151\001\001\000\002\001\001\000\006\012\037\013" +
    "\035\001\001\000\014\010\027\011\014\013\022\014\024" +
    "\034\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\136\013\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\077\013\035\015\071\041\072\042" +
    "\070\043\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\046\036\044\037\041\001\001\000\006\012" +
    "\067\013\035\001\001\000\002\001\001\000\006\012\063" +
    "\013\035\001\001\000\006\012\062\013\035\001\001\000" +
    "\002\001\001\000\006\012\061\013\035\001\001\000\006" +
    "\036\060\037\041\001\001\000\002\001\001\000\006\012" +
    "\056\013\035\001\001\000\006\012\055\013\035\001\001" +
    "\000\002\001\001\000\006\012\054\013\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\065\007\026\010\020" +
    "\011\014\013\022\014\024\034\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\120\013" +
    "\035\016\114\017\121\020\116\021\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\077\013\035\015\071\041\072\043\113" +
    "\001\001\000\014\012\077\013\035\015\071\041\072\043" +
    "\112\001\001\000\014\012\077\013\035\015\071\041\072" +
    "\043\111\001\001\000\014\012\077\013\035\015\071\041" +
    "\072\043\110\001\001\000\014\012\077\013\035\015\071" +
    "\041\072\043\107\001\001\000\014\012\077\013\035\015" +
    "\071\041\072\043\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\120" +
    "\013\035\017\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\123" +
    "\013\035\001\001\000\002\001\001\000\004\021\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\077\013\035\015\071\041" +
    "\072\042\135\043\076\001\001\000\016\012\077\013\035" +
    "\015\071\041\072\042\134\043\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\217\013\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\144\026\212\001\001\000\002\001" +
    "\001\000\006\012\211\013\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\144\026\210\001\001\000" +
    "\006\012\207\013\035\001\001\000\006\015\144\026\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\144\026\204\001\001\000\002\001\001" +
    "\000\006\015\144\026\203\001\001\000\006\015\144\026" +
    "\202\001\001\000\006\015\144\026\201\001\001\000\006" +
    "\015\144\026\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\144\026\174\001\001\000\006\015\144" +
    "\026\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\120\013\035\017\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\144\026\216\001\001\000\004\013\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\144\026" +
    "\223\031\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\227\007\026\010\020\011" +
    "\014\013\022\014\024\034\015\001\001\000\002\001\001" +
    "\000\020\006\232\007\026\010\020\011\014\013\022\014" +
    "\024\034\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\236\007" +
    "\026\010\020\011\014\013\022\014\024\034\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Haskell_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Haskell_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Haskell_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Haskell_Sintactico$actions {

//Codigo de acciones
      

  private final Haskell_Sintactico parser;

  /** Constructor */
  CUP$Haskell_Sintactico$actions(Haskell_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Haskell_Sintactico$do_action(
    int                        CUP$Haskell_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Haskell_Sintactico$parser,
    java.util.Stack            CUP$Haskell_Sintactico$stack,
    int                        CUP$Haskell_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Haskell_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Haskell_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_EXP ::= EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_EXP ::= LISTA_EXP TComa EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DIMENSION ::= TCorchete_Abre LISTA_EXP TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",15, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_DIMENSION ::= DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_DIMENSION ::= LISTA_DIMENSION TComa DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DIMENSIONES ::= LISTA_DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DIMENSIONES ::= LISTA_EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MULTIDIMENSION ::= TCorchete_Abre DIMENSIONES TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIDIMENSION",11, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_LISTA ::= TLet Id TIgual METODO_CONCATENACION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_LISTA ::= TLet Id TIgual LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST ::= MULTIDIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LIST ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST ::= Cadena 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODO_OPERACION_LISTAS ::= TLength LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO_OPERACION_LISTAS ::= TDesc LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO_OPERACION_LISTAS ::= TAsc LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO_OPERACION_LISTAS ::= TPar LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO_OPERACION_LISTAS ::= TImpr LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODO_OPERACION_LISTAS ::= TRevers LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO_OPERACION_LISTAS ::= TProduct LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO_OPERACION_LISTAS ::= TSum LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODO_INDICE ::= LIST TIndiceLista LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_INDICE",24, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODO_CONCATENACION ::= LIST TAumento LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODO_MAX ::= TMax LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_MAX",22, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO_MIN ::= TMin LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_MIN",21, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METODO_DECC ::= TDecc EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_DECC",19, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODO_SUCC ::= TSucc EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_SUCC",18, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO_CALCULAR ::= TCalcular EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CALCULAR",17, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METODO_CUALQUIERA ::= Id TLlave_Abre LISTA_EXP TLlave_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CUALQUIERA",30, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODO ::= METODO_CUALQUIERA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= METODO_INDICE 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= METODO_OPERACION_LISTAS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= METODO_CONCATENACION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= METODO_MAX 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO ::= METODO_MIN 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METODO ::= METODO_DECC 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METODO ::= METODO_SUCC 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METODO ::= METODO_CALCULAR 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LLAMADA_LISTA ::= MULTIDIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_LISTA",31, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LLAMADA_METODO ::= TDolar METODO TDolar 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",9, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= TParentesis_Abre LOGICO TParentesis_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= TFalso 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= TVerdadero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= TMenos EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP TRaiz EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP TPotencia EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP TModulo EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP TDivision EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP TPor EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP TMenos EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP TMas EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RELACIONAL ::= Caracter 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RELACIONAL ::= LLAMADA_LISTA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RELACIONAL ::= Cadena 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RELACIONAL ::= EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RELACIONAL ::= RELACIONAL TDiferenciacion RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RELACIONAL ::= RELACIONAL TIgualacion RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RELACIONAL ::= RELACIONAL TMenorIgual RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RELACIONAL ::= RELACIONAL TMayorIgual RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RELACIONAL ::= RELACIONAL TMenor RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RELACIONAL ::= RELACIONAL TMayor RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",33, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LOGICO ::= RELACIONAL 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",32, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LOGICO ::= LOGICO TOr LOGICO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",32, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LOGICO ::= LOGICO TAnd LOGICO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",32, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= Caracter 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",29, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",29, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASO ::= VALOR TDosPuntos CUERPO TPuntoyComa 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",28, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_CASOS ::= CASO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",27, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",27, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_CASE ::= TCase EXP LISTA_CASOS TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",26, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_IF ::= TIf LOGICO TThen CUERPO TElse CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_IF ::= TIf LOGICO TThen CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION_LISTA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= LISTA_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_PARAMETROS ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_PARAMETROS ::= LISTA_PARAMETROS TComa Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= Id TIgual CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= Id LISTA_PARAMETROS TIgual CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_FUNCION ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_FUNCION ::= LISTA_FUNCION FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_FUNCION 
            {
              Object RESULT =null;
		 TitusNotificaciones.ImprimirConsola("EXITO"); 
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Haskell_Sintactico$parser.done_parsing();
          return CUP$Haskell_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

