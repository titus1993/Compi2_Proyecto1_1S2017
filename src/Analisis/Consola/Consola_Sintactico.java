
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 19 19:52:33 CST 2017
//----------------------------------------------------

package Analisis.Consola;

import Constante.Constante;
import Funciones.*;
import Ejecucion.*;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;
import java.util.ArrayList;
import Ejecucion.Ambito;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 19 19:52:33 CST 2017
  */
public class Consola_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Consola_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Consola_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Consola_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\015" +
    "\003\000\002\015\003\000\002\005\006\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\007\000\002\004\005\000" +
    "\002\010\003\000\002\010\003\000\002\012\006\000\002" +
    "\012\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\006\005\000\002\007\005\000\002\007" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\026\004\017\005\006\006\020\007\012\011" +
    "\022\017\025\020\005\033\021\035\010\055\014\001\002" +
    "\000\060\002\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034" +
    "\uffe4\053\uffe4\054\uffe4\057\uffe4\060\uffe4\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\060\002\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\034\uffea\053\uffea\054\uffea\057" +
    "\uffea\060\uffea\001\002\000\056\002\ufff3\010\103\011\106" +
    "\012\110\013\107\014\111\015\105\016\102\017\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\034\ufff3\053\104\057\ufff3\060\ufff3\001" +
    "\002\000\004\004\144\001\002\000\036\002\ufffa\017\ufffa" +
    "\021\ufffa\022\134\023\133\024\130\025\131\026\132\027" +
    "\135\030\ufffa\031\ufffa\034\ufffa\057\ufffa\060\ufffa\001\002" +
    "\000\060\002\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\034" +
    "\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\001\002\000\004" +
    "\002\uffff\001\002\000\060\002\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\034\uffe8\053\uffe8\054\uffe8\057\uffe8\060\uffe8" +
    "\001\002\000\004\002\000\001\002\000\060\002\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\034\uffe7\053\uffe7\054\uffe7" +
    "\057\uffe7\060\uffe7\001\002\000\060\002\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\034\uffe9\053\uffe9\054\124\057\uffe9" +
    "\060\uffe9\001\002\000\060\002\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\034\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3" +
    "\001\002\000\024\004\017\005\006\006\020\007\012\011" +
    "\022\017\025\020\005\033\021\055\014\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\010\002\ufffe\030\050" +
    "\031\051\001\002\000\004\002\100\001\002\000\036\004" +
    "\030\036\040\037\037\040\026\041\034\042\044\043\036" +
    "\044\033\045\031\046\032\047\042\050\046\051\035\052" +
    "\043\001\002\000\024\004\017\005\006\006\020\007\012" +
    "\011\022\017\025\020\005\033\021\055\014\001\002\000" +
    "\004\017\uffdd\001\002\000\004\056\070\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\024\004\017\005\006" +
    "\006\020\007\012\011\022\017\025\020\005\033\021\055" +
    "\014\001\002\000\024\004\017\005\006\006\020\007\012" +
    "\011\022\017\025\020\005\033\021\055\014\001\002\000" +
    "\024\004\017\005\006\006\020\007\012\011\022\017\025" +
    "\020\005\033\021\055\014\001\002\000\024\004\017\005" +
    "\006\006\020\007\012\011\022\017\025\020\005\033\021" +
    "\055\014\001\002\000\024\004\017\005\006\006\020\007" +
    "\012\011\022\017\025\020\005\033\021\055\014\001\002" +
    "\000\024\004\017\005\006\006\020\007\012\011\022\017" +
    "\025\020\005\033\021\055\014\001\002\000\024\004\017" +
    "\005\006\006\020\007\012\011\022\017\025\020\005\033" +
    "\021\055\014\001\002\000\004\017\uffde\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\024\004\017\005\006" +
    "\006\020\007\012\011\022\017\025\020\005\033\021\055" +
    "\014\001\002\000\024\004\017\005\006\006\020\007\012" +
    "\011\022\017\025\020\005\033\021\055\014\001\002\000" +
    "\004\017\054\001\002\000\024\004\017\005\006\006\020" +
    "\007\012\011\022\017\025\020\005\033\021\055\014\001" +
    "\002\000\010\017\uffd5\030\050\031\051\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\024\004\017\005\006" +
    "\006\020\007\012\011\022\017\025\020\005\033\021\055" +
    "\014\001\002\000\022\002\ufffb\017\ufffb\021\ufffb\030\ufffb" +
    "\031\ufffb\034\ufffb\057\ufffb\060\ufffb\001\002\000\022\002" +
    "\ufffc\017\ufffc\021\ufffc\030\ufffc\031\ufffc\034\ufffc\057\ufffc" +
    "\060\ufffc\001\002\000\060\002\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\034\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf" +
    "\001\002\000\010\017\uffd0\030\050\031\051\001\002\000" +
    "\010\017\uffd3\030\050\031\051\001\002\000\010\017\uffd6" +
    "\030\050\031\051\001\002\000\010\017\uffce\030\050\031" +
    "\051\001\002\000\010\017\uffd1\030\050\031\051\001\002" +
    "\000\010\017\uffda\030\050\031\051\001\002\000\010\017" +
    "\uffd4\030\050\031\051\001\002\000\010\017\uffcf\030\050" +
    "\031\051\001\002\000\010\017\uffd9\030\050\031\051\001" +
    "\002\000\010\017\uffd7\030\050\031\051\001\002\000\010" +
    "\017\uffd8\030\050\031\051\001\002\000\026\004\017\005" +
    "\006\006\020\007\012\011\022\017\025\020\005\033\021" +
    "\055\014\057\072\001\002\000\014\030\050\031\051\034" +
    "\uffcb\057\uffcb\060\uffcb\001\002\000\004\017\uffdb\001\002" +
    "\000\006\057\075\060\074\001\002\000\024\004\017\005" +
    "\006\006\020\007\012\011\022\017\025\020\005\033\021" +
    "\055\014\001\002\000\004\017\uffdc\001\002\000\014\030" +
    "\050\031\051\034\uffcc\057\uffcc\060\uffcc\001\002\000\010" +
    "\017\uffd2\030\050\031\051\001\002\000\004\002\001\001" +
    "\002\000\060\002\uffeb\010\uffeb\011\uffeb\012\110\013\107" +
    "\014\111\015\105\016\102\017\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\034\uffeb\053\uffeb\054\uffeb\057\uffeb\060\uffeb\001\002\000" +
    "\024\004\017\005\006\006\020\007\012\011\022\017\025" +
    "\020\005\033\021\055\014\001\002\000\024\004\017\005" +
    "\006\006\020\007\012\011\022\017\025\020\005\033\021" +
    "\055\014\001\002\000\024\004\017\005\006\006\020\007" +
    "\012\011\022\017\025\020\005\033\021\055\014\001\002" +
    "\000\024\004\017\005\006\006\020\007\012\011\022\017" +
    "\025\020\005\033\021\055\014\001\002\000\024\004\017" +
    "\005\006\006\020\007\012\011\022\017\025\020\005\033" +
    "\021\055\014\001\002\000\024\004\017\005\006\006\020" +
    "\007\012\011\022\017\025\020\005\033\021\055\014\001" +
    "\002\000\024\004\017\005\006\006\020\007\012\011\022" +
    "\017\025\020\005\033\021\055\014\001\002\000\024\004" +
    "\017\005\006\006\020\007\012\011\022\017\025\020\005" +
    "\033\021\055\014\001\002\000\060\002\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\105\016\102\017\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\034\uffee\053\uffee\054\uffee\057\uffee" +
    "\060\uffee\001\002\000\060\002\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\105\016\102\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\034\ufff0\053\ufff0\054\ufff0\057\ufff0\060\ufff0" +
    "\001\002\000\060\002\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\105\016\102\017\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\034\uffef\053\uffef\054\uffef\057\uffef\060\uffef\001\002" +
    "\000\060\002\ufff1\010\ufff1\011\ufff1\012\110\013\107\014" +
    "\111\015\105\016\102\017\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\034" +
    "\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1\001\002\000\060" +
    "\002\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\105\016\102\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\034\uffed\053" +
    "\uffed\054\uffed\057\uffed\060\uffed\001\002\000\060\002\uffe2" +
    "\010\103\011\106\012\110\013\107\014\111\015\105\016" +
    "\102\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2\053\uffe2\054" +
    "\uffe2\057\uffe2\060\uffe2\001\002\000\060\002\ufff2\010\ufff2" +
    "\011\ufff2\012\110\013\107\014\111\015\105\016\102\017" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\034\ufff2\053\ufff2\054\ufff2\057" +
    "\ufff2\060\ufff2\001\002\000\060\002\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\105\016\102\017\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\034\uffec\053\uffec\054\uffec\057\uffec\060" +
    "\uffec\001\002\000\006\034\123\060\074\001\002\000\060" +
    "\002\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd\053" +
    "\uffcd\054\uffcd\057\uffcd\060\uffcd\001\002\000\024\004\017" +
    "\005\006\006\020\007\012\011\022\017\025\020\005\033" +
    "\021\055\014\001\002\000\060\002\uffe1\010\103\011\106" +
    "\012\110\013\107\014\111\015\105\016\102\017\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\034\uffe1\053\104\054\uffe1\057\uffe1\060" +
    "\uffe1\001\002\000\024\004\017\005\006\006\020\007\012" +
    "\011\022\017\025\020\005\033\021\055\014\001\002\000" +
    "\060\002\uffe0\010\103\011\106\012\110\013\107\014\111" +
    "\015\105\016\102\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\034\uffe0" +
    "\053\104\054\uffe0\057\uffe0\060\uffe0\001\002\000\024\004" +
    "\017\005\006\006\020\007\012\011\022\017\025\020\005" +
    "\033\021\055\014\001\002\000\024\004\017\005\006\006" +
    "\020\007\012\011\022\017\025\020\005\033\021\055\014" +
    "\001\002\000\024\004\017\005\006\006\020\007\012\011" +
    "\022\017\025\020\005\033\021\055\014\001\002\000\024" +
    "\004\017\005\006\006\020\007\012\011\022\017\025\020" +
    "\005\033\021\055\014\001\002\000\024\004\017\005\006" +
    "\006\020\007\012\011\022\017\025\020\005\033\021\055" +
    "\014\001\002\000\024\004\017\005\006\006\020\007\012" +
    "\011\022\017\025\020\005\033\021\055\014\001\002\000" +
    "\036\002\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\034\ufff4\057" +
    "\ufff4\060\ufff4\001\002\000\036\002\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\034\ufff9\057\ufff9\060\ufff9\001\002\000\036" +
    "\002\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\034\ufff8\057\ufff8" +
    "\060\ufff8\001\002\000\036\002\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\034\ufff5\057\ufff5\060\ufff5\001\002\000\036\002" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\034\ufff6\057\ufff6\060" +
    "\ufff6\001\002\000\036\002\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\034\ufff7\057\ufff7\060\ufff7\001\002\000\004\032\145" +
    "\001\002\000\024\004\017\005\006\006\020\007\012\011" +
    "\022\017\025\020\005\033\021\055\014\001\002\000\010" +
    "\002\ufffd\030\050\031\051\001\002\000\010\021\150\030" +
    "\050\031\051\001\002\000\060\002\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\034\uffe6\053\uffe6\054\uffe6\057\uffe6\060" +
    "\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\022\002\023\003\006\004\015\005\012\006" +
    "\003\013\022\014\010\015\014\001\001\000\002\001\001" +
    "\000\014\003\006\004\015\006\003\013\146\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\006\004\015\006" +
    "\003\007\121\013\070\014\010\001\001\000\010\003\100" +
    "\004\015\006\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\044\011\040\012\026\001\001\000\014" +
    "\003\006\004\015\006\003\013\076\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\006\004\015" +
    "\006\003\013\066\014\010\001\001\000\014\003\006\004" +
    "\015\006\003\013\065\014\010\001\001\000\014\003\006" +
    "\004\015\006\003\013\064\014\010\001\001\000\014\003" +
    "\006\004\015\006\003\013\063\014\010\001\001\000\014" +
    "\003\006\004\015\006\003\013\062\014\010\001\001\000" +
    "\014\003\006\004\015\006\003\013\061\014\010\001\001" +
    "\000\014\003\006\004\015\006\003\013\060\014\010\001" +
    "\001\000\014\003\006\004\015\006\003\013\057\014\010" +
    "\001\001\000\002\001\001\000\014\003\006\004\015\006" +
    "\003\013\056\014\010\001\001\000\014\003\006\004\015" +
    "\006\003\013\055\014\010\001\001\000\014\003\006\004" +
    "\015\006\003\013\054\014\010\001\001\000\002\001\001" +
    "\000\014\003\006\004\015\006\003\013\046\014\010\001" +
    "\001\000\002\001\001\000\014\003\006\004\015\006\003" +
    "\013\052\014\010\001\001\000\014\003\006\004\015\006" +
    "\003\013\051\014\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\006\004\015\006\003\007\072\013\070\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\006\004\015\006\003\013\075\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\120\004" +
    "\015\006\003\001\001\000\010\003\117\004\015\006\003" +
    "\001\001\000\010\003\116\004\015\006\003\001\001\000" +
    "\010\003\115\004\015\006\003\001\001\000\010\003\114" +
    "\004\015\006\003\001\001\000\010\003\113\004\015\006" +
    "\003\001\001\000\010\003\112\004\015\006\003\001\001" +
    "\000\010\003\111\004\015\006\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\124\004\015\006\003\001\001\000\002\001\001\000" +
    "\010\003\126\004\015\006\003\001\001\000\002\001\001" +
    "\000\012\003\006\004\015\006\003\014\142\001\001\000" +
    "\012\003\006\004\015\006\003\014\141\001\001\000\012" +
    "\003\006\004\015\006\003\014\140\001\001\000\012\003" +
    "\006\004\015\006\003\014\137\001\001\000\012\003\006" +
    "\004\015\006\003\014\136\001\001\000\012\003\006\004" +
    "\015\006\003\014\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\006" +
    "\004\015\006\003\013\145\014\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Consola_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Consola_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Consola_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public Simbolo simbolo = null;

    public void syntax_error(Symbol s){
        TitusNotificaciones.InsertarError("Sintactico",s.value + " no reconocido", s.left, s.right);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error sintactico en la Línea " + (s.left) +" Columna "+s.right+ ". Lexema "+s.value + " no reconocido." );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Consola_Sintactico$actions {

//Codigo de acciones
      

  private final Consola_Sintactico parser;

  /** Constructor */
  CUP$Consola_Sintactico$actions(Consola_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Consola_Sintactico$do_action(
    int                        CUP$Consola_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Consola_Sintactico$parser,
    java.util.Stack            CUP$Consola_Sintactico$stack,
    int                        CUP$Consola_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Consola_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Consola_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_EXP ::= LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                ArrayList<FNodoExpresion> lista = new ArrayList<>();
                                lista.add((FNodoExpresion)t);
                                RESULT = lista; 
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",5, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_EXP ::= LISTA_EXP TComa LOGICO 
            {
              Object RESULT =null;
		int listaauxleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int listaauxright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object listaaux = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                ArrayList<FNodoExpresion> lista = (ArrayList<FNodoExpresion>)listaaux;
                                                                lista.add((FNodoExpresion)exp);
                                                                RESULT = lista;
                                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",5, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARREGLO ::= TCorchete_Abre LISTA_EXP TCorchete_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		
                                                                    RESULT = new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo((ArrayList<FNodoExpresion>)arreglo));
                                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METODO_OPERACION_LISTAS ::= TCalcular LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TCalcular, aux, tleft, tright);
                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODO_OPERACION_LISTAS ::= TMin LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMin, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO_OPERACION_LISTAS ::= TMax LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TMax, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO_OPERACION_LISTAS ::= TSucc LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TSucc, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO_OPERACION_LISTAS ::= TDecc LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDecc, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO_OPERACION_LISTAS ::= TLength LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TLength, aux, tleft, tright);
                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO_OPERACION_LISTAS ::= TDesc LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TDesc, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO_OPERACION_LISTAS ::= TAsc LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TAsc, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODO_OPERACION_LISTAS ::= TPar LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TPar, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO_OPERACION_LISTAS ::= TImpr LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                        aux.add((FNodoExpresion)exp);
                                                        RESULT = new FLlamadaMetodo(Constante.TImpr, aux, tleft, tright);
                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_OPERACION_LISTAS ::= TRevers LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TRevers, aux, tleft, tright);
                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_OPERACION_LISTAS ::= TProduct LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                            ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                            aux.add((FNodoExpresion)exp);
                                                            RESULT = new FLlamadaMetodo(Constante.TProduct, aux, tleft, tright);
                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_OPERACION_LISTAS ::= TSum LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                    ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                    aux.add((FNodoExpresion)exp);
                                                    RESULT = new FLlamadaMetodo(Constante.TSum, aux, tleft, tright);
                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",7, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_CUALQUIERA ::= Id TLlave_Abre TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		
                                                                            RESULT = new FLlamadaMetodo(t.toString(), new ArrayList<FNodoExpresion>(), tleft, tright);
                                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CUALQUIERA",8, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_CUALQUIERA ::= Id TLlave_Abre LISTA_EXP TLlave_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		
                                                                            RESULT = new FLlamadaMetodo(t.toString(), (ArrayList<FNodoExpresion>)lista, tleft, tright);
                                                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CUALQUIERA",8, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= METODO_CUALQUIERA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",6, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO ::= METODO_OPERACION_LISTAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",6, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADA_METODO ::= TDolar METODO TDolar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		 RESULT = t; 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",2, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= Id TIndiceLista EXP TIndiceLista EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-4)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-4)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)).value;
		int der1left = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int der1right = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object der1 = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int der2left = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int der2right = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der2 = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                        ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                                        aux.add((FNodoExpresion)izq);
                                                                        aux.add((FNodoExpresion)der1);
                                                                        aux.add((FNodoExpresion)der2);
                                                                        FLlamadaMetodo metodo = new FLlamadaMetodo(Constante.TIndiceLista, aux, tleft, tright);
                                                                        RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo);
                                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= Id TIndiceLista EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                    ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                    aux.add((FNodoExpresion)izq);
                                                    aux.add((FNodoExpresion)der);
                                                    FLlamadaMetodo metodo = new FLlamadaMetodo(Constante.TIndiceLista, aux, tleft, tright);
                                                    RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo);
                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP TAumento EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                ArrayList<FNodoExpresion> aux = new ArrayList<>();
                                                aux.add((FNodoExpresion)izq);
                                                aux.add((FNodoExpresion)der);
                                                FLlamadaMetodo metodo = new FLlamadaMetodo(Constante.TAumento, aux, tleft, tright);
                                                RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo);
                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= Caracter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                char c = t.toString().charAt(1);                              
                                RESULT = new FNodoExpresion(null, null, Constante.TCaracter, Constante.TCaracter, tleft, tright, c);
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= ARREGLO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                RESULT =  t;
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                            RESULT =  new FNodoExpresion(null, null, Constante.TArreglo, Constante.TArreglo, tleft, tright, new FArreglo(t.toString(), tleft, tright));
                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= TParentesis_Abre LOGICO TParentesis_Cierra 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		
                                                                RESULT = t; 
                                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= LLAMADA_METODO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, tleft, tright, t); 
                                    
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= TPorcentaje 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TVariable, t.toString(), tleft, tright, null); 
                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= Id 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                        RESULT = new FNodoExpresion(null, null, Constante.TVariable, t.toString(), tleft, tright, null); 
                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= Numero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                RESULT = new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, tleft, tright, t); 
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= TMenos EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion(null, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null); 
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP TRaiz EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                            RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TRaiz, Constante.TRaiz, tleft, tright, null); 
                                        
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP TPotencia EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPotenciaH, Constante.TPotenciaH, tleft, tright, null); 
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP TModulo EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TModulo, Constante.TModulo, tleft, tright, null); 
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP TDivision EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDivision, Constante.TDivision, tleft, tright, null); 
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP TPor EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TPor, Constante.TPor, tleft, tright, null); 
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP TMenos EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenos, Constante.TMenos, tleft, tright, null);                                    
                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP TMas EXP 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMas, Constante.TMas, tleft, tright, null);                                    
                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RELACIONAL ::= EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                RESULT = t;
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RELACIONAL ::= RELACIONAL TDiferenciacion RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                        RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TDiferenciacion, Constante.TDiferenciacion, tleft, tright, null);
                                                                    
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RELACIONAL ::= RELACIONAL TIgualacion RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TIgualacion, Constante.TIgualacion, tleft, tright, null);
                                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RELACIONAL ::= RELACIONAL TMenorIgual RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenorIgual, Constante.TMenorIgual, tleft, tright, null);
                                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RELACIONAL ::= RELACIONAL TMayorIgual RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                    RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayorIgual, Constante.TMayorIgual, tleft, tright, null);
                                                                
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RELACIONAL ::= RELACIONAL TMenor RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMenor, Constante.TMenor, tleft, tright, null);
                                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RELACIONAL ::= RELACIONAL TMayor RELACIONAL 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TMayor, Constante.TMayor, tleft, tright, null);
                                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LOGICO ::= RELACIONAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                RESULT = t;
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",9, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LOGICO ::= LOGICO TOr LOGICO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TOr, Constante.TOr, tleft, tright, null);
                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",9, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LOGICO ::= LOGICO TAnd LOGICO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		
                                                RESULT = new FNodoExpresion((FNodoExpresion)izq, (FNodoExpresion)der, Constante.TAnd, Constante.TAnd, tleft, tright, null);
                                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",9, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_LISTA ::= TLet Id TIgual LOGICO 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 RESULT = new Simbolo(Constante.TArreglo, nombre.toString(), Constante.TVariable, nombreleft, nombreright, new Ambito(nombre.toString()), (FNodoExpresion)valor); 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",3, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SIMBOLO ::= LOGICO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 
                                        FNodoExpresion nodo = (FNodoExpresion)t;
                                        if(nodo.Tipo == Constante.TMetodo){
                                            FLlamadaMetodo metodo = (FLlamadaMetodo)nodo.Metodo;                                            
                                            RESULT = new Simbolo(Constante.TMetodo, Constante.TMetodo, Constante.TMetodo, tleft, tright, metodo.Ambito, metodo);

                                        }else{
                                            TitusNotificaciones.ImprimirConsola("No se puede llamar una expresion");
                                            nodo.ResolverExpresion();
                                            RESULT = new Simbolo(Constante.TError, Constante.TError, Constante.TError, tleft, tright, new Ambito(Constante.TError), null);
                                        }
                            
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("SIMBOLO",11, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SIMBOLO ::= DECLARACION_LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("SIMBOLO",11, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SIMBOLO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.peek()).value;
		 parser.simbolo = (Simbolo)t; 
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Consola_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Consola_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.elementAt(CUP$Consola_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Consola_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Consola_Sintactico$parser.done_parsing();
          return CUP$Consola_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

