/* The following code was generated by JFlex 1.4.1 on 3/24/17 4:20 PM */

/*
 * Generated on 3/24/17 4:20 PM
 */

package Interface;
import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class GraphikSyntax extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\54\1\61\1\15"+
    "\1\17\1\1\1\26\1\63\1\7\1\30\1\30\1\30\1\31\1\30"+
    "\1\24\1\22\1\21\1\4\3\4\4\6\2\3\1\43\1\26\1\65"+
    "\1\62\1\65\1\30\1\27\1\45\1\46\1\50\1\5\1\23\1\37"+
    "\1\56\1\32\1\41\1\1\1\57\1\42\1\55\1\51\1\47\1\35"+
    "\1\1\1\53\1\36\1\33\1\12\1\60\1\44\3\1\1\30\1\11"+
    "\1\30\1\25\1\2\1\0\1\45\1\14\1\50\1\5\1\23\1\40"+
    "\1\56\1\66\1\41\1\1\1\57\1\42\1\55\1\52\1\47\1\35"+
    "\1\1\1\13\1\36\1\34\1\12\1\60\1\67\3\1\1\25\1\64"+
    "\1\25\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\1\7\2\10\1\1\2\10\15\1\1\10\2\1"+
    "\1\11\1\12\10\11\1\13\6\11\1\0\1\14\1\0"+
    "\1\14\3\1\1\3\1\15\1\0\1\3\2\1\2\5"+
    "\1\16\1\17\1\20\10\1\1\21\14\1\1\22\3\11"+
    "\2\0\1\11\2\0\3\11\2\0\1\11\3\0\1\20"+
    "\1\0\4\1\1\3\1\23\2\3\1\15\1\3\2\1"+
    "\1\5\1\24\1\5\17\1\1\21\12\1\3\11\2\0"+
    "\1\11\2\0\3\11\2\0\1\11\3\0\3\1\1\3"+
    "\1\1\1\5\25\1\2\11\1\0\1\11\1\25\1\0"+
    "\2\11\1\0\1\11\1\26\2\0\2\1\1\21\1\3"+
    "\1\1\1\5\12\1\1\21\4\1\2\0\1\11\3\0"+
    "\2\1\1\3\1\1\1\5\4\1\1\21\12\1\1\21"+
    "\5\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\250\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\250\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\250\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\250\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u02d8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\250\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\250\0\250\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\250\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\250\0\u1768\0\u17a0\0\u0c08"+
    "\0\u17d8\0\u1810\0\u1848\0\u1880\0\250\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\340\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0"+
    "\0\u2e28\0\250\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u28e8"+
    "\0\u2f78\0\u2fb0\0\u2a38\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3218"+
    "\0\u33a0\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\7\1\6\1\10\1\11\1\4"+
    "\1\5\1\12\1\13\1\14\1\4\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\17\2\4\1\17\1\23\1\24"+
    "\2\25\1\26\1\27\2\30\1\31\1\32\1\17\1\5"+
    "\1\33\1\13\1\5\1\34\2\35\1\12\1\16\1\36"+
    "\1\37\1\5\1\40\2\41\1\42\1\43\1\41\1\24"+
    "\1\5\10\44\1\45\10\44\1\46\10\44\1\47\4\44"+
    "\1\50\1\51\3\44\1\52\21\44\1\53\1\54\10\55"+
    "\1\56\21\55\1\57\4\55\1\60\1\61\3\55\1\62"+
    "\21\55\1\63\1\64\71\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\0\4\5"+
    "\5\0\2\5\3\66\2\6\1\66\1\6\2\0\4\66"+
    "\2\0\1\66\2\0\1\67\1\70\3\0\1\66\2\0"+
    "\11\66\1\0\10\66\1\0\4\66\5\0\2\66\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\71\6\0\11\5"+
    "\1\0\1\5\1\72\1\5\1\73\4\5\1\0\4\5"+
    "\5\0\2\5\7\74\1\75\1\76\1\77\56\74\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\100\6\0\11\5"+
    "\1\0\10\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\3\5\1\101\4\5\1\0\4\5\5\0\2\5\10\14"+
    "\1\102\1\103\3\14\1\104\52\14\21\0\1\105\66\0"+
    "\1\16\33\0\1\16\16\0\2\106\1\0\1\106\62\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\11\5"+
    "\1\0\5\5\2\107\1\5\1\0\4\5\5\0\2\5"+
    "\24\0\1\17\74\0\1\17\37\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\110\6\0\11\5\1\0\1\5\1\111"+
    "\6\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\112\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\1\113\1\114\1\5\6\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\115\5\5\1\114\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\116\6\0"+
    "\7\5\1\117\1\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\1\5\1\120\6\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\11\5\1\0\5\5\2\121\1\5\1\0"+
    "\1\122\3\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\10\5\1\123\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\10\5\1\124\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\1\5\1\125"+
    "\1\5\1\126\4\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\1\127\2\5\6\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\7\5"+
    "\1\130\1\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\1\5\1\131\1\5\6\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\131\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\132\6\0\11\5\1\0\1\5\1\133\6\5\1\0"+
    "\4\5\5\0\2\5\62\0\1\17\70\0\2\17\67\0"+
    "\1\17\3\0\10\44\1\0\10\44\1\0\16\44\1\0"+
    "\25\44\21\0\1\134\50\0\10\44\1\0\10\44\1\0"+
    "\11\44\2\135\3\44\1\0\25\44\2\0\10\44\1\0"+
    "\10\44\1\0\11\44\2\136\3\44\1\0\1\137\24\44"+
    "\35\0\2\140\4\0\1\141\26\0\10\44\1\0\10\44"+
    "\1\0\16\44\1\0\3\44\1\142\21\44\1\0\1\143"+
    "\33\0\2\144\77\0\1\143\22\0\1\143\10\55\1\0"+
    "\27\55\1\0\25\55\2\0\10\55\1\0\22\55\2\145"+
    "\3\55\1\0\25\55\2\0\10\55\1\0\22\55\2\146"+
    "\3\55\1\0\1\147\24\55\35\0\2\150\4\0\1\151"+
    "\26\0\10\55\1\0\27\55\1\0\3\55\1\152\21\55"+
    "\1\0\1\153\33\0\2\154\77\0\1\153\22\0\1\153"+
    "\12\0\1\155\55\0\7\66\2\0\4\66\2\0\1\66"+
    "\3\0\1\66\3\0\1\66\2\0\11\66\1\0\10\66"+
    "\1\0\4\66\5\0\5\66\2\156\1\66\1\156\2\0"+
    "\4\66\2\0\1\66\3\0\1\66\1\157\2\0\1\66"+
    "\1\0\1\157\11\66\1\0\10\66\1\0\4\66\5\0"+
    "\2\66\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\5\5\2\160\2\5\1\0\4\5\1\161\3\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\1\5\2\162\6\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\5\5"+
    "\2\163\1\5\1\0\4\5\5\0\2\5\7\164\1\165"+
    "\1\0\57\164\7\0\1\165\60\0\4\164\1\166\1\164"+
    "\1\167\1\170\1\0\1\74\1\171\3\74\16\164\1\74"+
    "\3\164\1\74\11\164\1\74\15\164\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\1\5\2\172\6\5"+
    "\1\0\10\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\3\5\1\173\4\5\1\0\4\5\5\0\2\5\11\102"+
    "\1\174\3\102\1\175\56\102\1\14\1\102\2\14\1\0"+
    "\1\14\1\176\3\14\16\102\1\14\3\102\1\14\11\102"+
    "\1\14\15\102\3\66\2\106\1\66\1\106\2\0\4\66"+
    "\2\0\1\66\3\0\1\70\3\0\1\66\2\0\11\66"+
    "\1\0\10\66\1\0\4\66\5\0\2\66\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\1\5\2\177"+
    "\6\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\1\5\1\200\1\5\6\0\1\5"+
    "\6\0\11\5\1\0\7\5\1\200\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\4\5\1\201\3\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\1\5\1\202"+
    "\1\5\6\0\1\5\6\0\11\5\1\0\7\5\1\202"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\2\5\1\203\6\0\1\5\6\0\11\5\1\0\2\5"+
    "\1\203\5\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\7\5\1\204"+
    "\1\5\1\0\3\5\1\205\4\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\1\5\1\206\1\5"+
    "\6\0\1\5\6\0\11\5\1\0\7\5\1\206\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\10\5\1\207\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\5\5\2\210\1\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\10\5\1\211\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\7\5\1\212\1\5\1\0"+
    "\4\5\1\213\3\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\3\5"+
    "\1\214\5\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\215\6\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\4\5\1\216\4\5\1\0\10\5\1\0\4\5"+
    "\5\0\2\5\1\0\4\5\1\217\1\5\2\0\1\65"+
    "\1\5\1\220\1\5\6\0\1\5\6\0\4\5\1\221"+
    "\4\5\1\0\7\5\1\220\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\10\5\1\222\1\0\5\5\2\223\1\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\224\6\0\11\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\225"+
    "\6\0\11\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\226\6\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\1\5\1\227\1\5"+
    "\6\0\1\5\6\0\11\5\1\0\7\5\1\227\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\1\5"+
    "\1\216\1\5\6\0\1\5\6\0\11\5\1\0\4\5"+
    "\1\230\2\5\1\216\1\0\4\5\5\0\2\5\10\44"+
    "\1\0\10\44\1\0\11\44\2\231\3\44\1\0\25\44"+
    "\2\0\10\44\1\0\10\44\1\0\13\44\1\232\2\44"+
    "\1\0\25\44\2\0\10\44\1\0\10\44\1\0\16\44"+
    "\1\0\1\44\1\233\23\44\37\0\1\234\74\0\1\235"+
    "\25\0\10\44\1\0\10\44\1\0\16\44\1\0\3\44"+
    "\1\236\21\44\1\0\1\237\44\0\1\237\22\0\1\237"+
    "\33\0\2\240\33\0\10\55\1\0\22\55\2\241\3\55"+
    "\1\0\25\55\2\0\10\55\1\0\24\55\1\242\2\55"+
    "\1\0\25\55\2\0\10\55\1\0\27\55\1\0\1\55"+
    "\1\243\23\55\37\0\1\244\74\0\1\245\25\0\10\55"+
    "\1\0\27\55\1\0\3\55\1\246\21\55\1\0\1\247"+
    "\44\0\1\247\22\0\1\247\33\0\2\250\36\0\4\251"+
    "\5\0\1\251\6\0\1\251\13\0\2\251\4\0\2\251"+
    "\1\0\1\251\17\0\3\66\2\156\1\66\1\156\2\0"+
    "\4\66\2\0\1\66\3\0\1\66\3\0\1\66\2\0"+
    "\11\66\1\0\10\66\1\0\4\66\5\0\2\66\3\0"+
    "\2\156\1\0\1\156\62\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\252\6\0\11\5\1\0\10\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\253\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\3\5\1\124\4\5"+
    "\1\0\4\5\5\0\2\5\1\0\4\5\1\254\1\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\7\164\1\75\1\0"+
    "\63\164\1\167\1\164\1\167\1\165\1\0\63\164\1\74"+
    "\1\164\1\74\1\165\1\0\62\164\4\255\1\75\1\0"+
    "\3\164\1\255\6\164\1\255\13\164\2\255\4\164\2\255"+
    "\1\164\1\255\17\164\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\3\5\1\256\4\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\10\5\1\216\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\10\102\1\0\62\102\4\257"+
    "\2\102\1\174\2\102\1\257\1\175\5\102\1\257\13\102"+
    "\2\257\4\102\2\257\1\102\1\257\17\102\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\260\6\0\11\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\261\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\262\6\0\11\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\0\1\263"+
    "\3\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\10\5\1\264\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\0\3\5"+
    "\1\265\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\1\5\2\266\6\5\1\0\4\5"+
    "\1\267\3\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\1\5\1\216\6\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\270\6\0\11\5"+
    "\1\0\10\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\3\5\1\216\4\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\4\5"+
    "\1\210\4\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\11\5\1\0\4\5\1\230\3\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\10\5\1\271\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\1\5\1\272\1\5"+
    "\6\0\1\5\6\0\11\5\1\0\3\5\1\273\3\5"+
    "\1\272\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\0\1\274\3\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\275\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\1\5\1\276"+
    "\6\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\3\5"+
    "\1\277\4\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\1\300\2\5\6\0\1\5\6\0\11\5"+
    "\1\0\10\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\1\5\2\301"+
    "\6\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\11\5"+
    "\1\0\10\5\1\0\3\5\1\210\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\11\5"+
    "\1\0\5\5\2\302\1\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\3\5\1\303\5\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\4\5\1\304\1\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\210\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\10\44\1\0\10\44\1\0\13\44"+
    "\1\305\2\44\1\0\25\44\2\0\10\44\1\0\10\44"+
    "\1\0\16\44\1\0\2\44\1\306\22\44\2\0\10\44"+
    "\1\0\10\44\1\0\1\44\1\232\14\44\1\0\25\44"+
    "\45\0\1\307\47\0\1\234\44\0\10\44\1\0\10\44"+
    "\1\0\1\310\15\44\1\0\25\44\24\0\1\311\102\0"+
    "\1\312\32\0\10\55\1\0\24\55\1\313\2\55\1\0"+
    "\25\55\2\0\10\55\1\0\27\55\1\0\2\55\1\314"+
    "\22\55\2\0\10\55\1\0\12\55\1\242\14\55\1\0"+
    "\25\55\45\0\1\315\47\0\1\244\44\0\10\55\1\0"+
    "\11\55\1\316\15\55\1\0\25\55\24\0\1\317\102\0"+
    "\1\320\35\0\4\321\5\0\1\321\6\0\1\321\13\0"+
    "\2\321\4\0\2\321\1\0\1\321\20\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\4\5"+
    "\1\322\3\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\0\1\323\3\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\324\6\0\11\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\3\164\4\325\1\75"+
    "\1\0\3\164\1\325\6\164\1\325\13\164\2\325\4\164"+
    "\2\325\1\164\1\325\17\164\1\0\6\5\2\0\1\65"+
    "\1\5\1\326\1\5\6\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\326\1\0\4\5\5\0\2\5\3\102\4\327"+
    "\2\102\1\174\2\102\1\327\1\175\5\102\1\327\13\102"+
    "\2\327\4\102\2\327\1\102\1\327\17\102\1\0\6\5"+
    "\2\0\1\65\1\5\1\210\1\5\6\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\210\1\0\4\5\5\0\2\5"+
    "\1\0\4\5\1\206\1\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\1\5\1\216\1\5"+
    "\6\0\1\5\6\0\11\5\1\0\7\5\1\216\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\7\5\1\326\1\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\7\5\1\330\1\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\331\6\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\332\6\0\11\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\333\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\4\5\1\334"+
    "\3\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\1\335\2\5\6\0\1\5\6\0\11\5\1\0"+
    "\10\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\7\5\1\336\1\5"+
    "\1\0\10\5\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\1\5\1\337\1\5\6\0\1\5\6\0"+
    "\11\5\1\0\7\5\1\337\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\11\5\1\0\1\5\1\340\6\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\5\5\2\206\1\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\11\5\1\0\4\5\1\341\3\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\342\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\0\1\275\3\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\343\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\1\5\2\344\6\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\1\345\10\5\1\0\10\5"+
    "\1\0\4\5\5\0\1\345\1\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\346\6\5\1\0\4\5\5\0\2\5\10\44\1\0"+
    "\10\44\1\0\14\44\1\232\1\44\1\0\2\44\1\306"+
    "\22\44\2\0\10\44\1\0\10\44\1\347\16\44\1\0"+
    "\25\44\23\0\1\347\46\0\1\44\7\310\1\0\1\44"+
    "\3\310\2\44\1\310\1\44\1\311\3\310\1\44\12\310"+
    "\1\311\13\310\1\44\7\310\2\44\2\311\1\0\1\311"+
    "\1\350\4\311\1\350\2\0\3\311\2\0\1\350\1\0"+
    "\1\311\1\350\1\311\1\350\1\0\4\350\11\311\1\350"+
    "\10\311\1\0\4\311\3\350\2\0\2\311\36\0\1\234"+
    "\4\0\1\307\24\0\10\55\1\0\25\55\1\242\1\55"+
    "\1\0\2\55\1\314\22\55\2\0\10\55\1\0\10\55"+
    "\1\351\16\55\1\0\25\55\23\0\1\352\46\0\1\55"+
    "\7\316\1\0\1\55\3\316\2\55\1\316\1\55\4\316"+
    "\1\55\12\316\1\317\13\316\1\55\7\316\2\55\2\317"+
    "\1\0\1\317\1\353\4\317\1\353\2\0\3\317\2\0"+
    "\1\353\1\0\1\317\1\353\1\317\1\353\1\0\4\353"+
    "\11\317\1\353\10\317\1\0\4\317\3\353\2\0\2\317"+
    "\36\0\1\244\4\0\1\315\27\0\4\354\5\0\1\354"+
    "\6\0\1\354\13\0\2\354\4\0\2\354\1\0\1\354"+
    "\20\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\1\5\2\210\6\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\1\5\1\173\6\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\1\5\2\355\6\5\1\0\4\5\1\356"+
    "\3\5\1\0\4\5\5\0\2\5\3\164\4\357\1\75"+
    "\1\0\3\164\1\357\6\164\1\357\13\164\2\357\4\164"+
    "\2\357\1\164\1\357\17\164\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\5\5\2\360"+
    "\1\5\1\0\4\5\5\0\2\5\3\102\4\361\2\102"+
    "\1\174\2\102\1\361\1\175\5\102\1\361\13\102\2\361"+
    "\4\102\2\361\1\102\1\361\17\102\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\4\5"+
    "\1\210\3\5\1\0\4\5\5\0\2\5\1\0\4\5"+
    "\1\210\1\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\11\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\11\5"+
    "\1\0\10\5\1\0\1\5\1\362\2\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\4\5\1\360\4\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\4\5\1\363\3\5\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\364\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\10\5\1\0\1\365"+
    "\3\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\1\5\2\360\6\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\1\5\1\366\1\5\6\0\1\5\6\0\11\5\1\0"+
    "\7\5\1\366\1\0\4\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\1\5\2\201"+
    "\6\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\11\5"+
    "\1\0\5\5\2\367\1\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\1\5\1\370\1\5\6\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\370\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\371\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\4\5\1\177\1\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\21\0\1\311\46\0\10\55"+
    "\1\0\10\55\1\316\16\55\1\0\25\55\23\0\1\317"+
    "\51\0\4\5\5\0\1\5\6\0\1\5\13\0\2\5"+
    "\4\0\2\5\1\0\1\5\20\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\3\5\1\331"+
    "\4\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\261\6\5\1\0\4\5\5\0\2\5\3\164\4\74"+
    "\1\75\1\0\3\164\1\74\6\164\1\74\13\164\2\74"+
    "\4\164\2\74\1\164\1\74\17\164\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\1\5"+
    "\1\262\6\5\1\0\4\5\5\0\2\5\3\102\4\14"+
    "\2\102\1\174\2\102\1\14\1\175\5\102\1\14\13\102"+
    "\2\14\4\102\2\14\1\102\1\14\17\102\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\7\5\1\331"+
    "\1\5\1\0\10\5\1\0\4\5\5\0\2\5\1\0"+
    "\6\5\2\0\1\65\3\5\6\0\1\5\6\0\7\5"+
    "\1\372\1\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\1\5\1\373\1\5\6\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\373\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\7\5\1\374\1\5\1\0\10\5\1\0"+
    "\4\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\1\375\10\5\1\0\10\5\1\0"+
    "\4\5\5\0\1\375\1\5\1\0\6\5\2\0\1\65"+
    "\1\360\2\5\6\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\1\5\1\124"+
    "\6\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\3\5\6\0\1\5\6\0\11\5\1\0\10\5"+
    "\1\0\2\5\1\376\1\5\5\0\2\5\1\0\6\5"+
    "\2\0\1\65\3\5\6\0\1\5\6\0\11\5\1\0"+
    "\3\5\1\377\4\5\1\0\4\5\5\0\2\5\1\0"+
    "\1\5\1\u0100\4\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\1\5\1\u0101\1\5\6\0"+
    "\1\5\6\0\11\5\1\0\7\5\1\u0101\1\0\4\5"+
    "\5\0\2\5\1\0\6\5\2\0\1\65\3\5\6\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\0\2\5\1\216"+
    "\1\5\5\0\2\5\1\0\6\5\2\0\1\65\3\5"+
    "\6\0\1\5\6\0\11\5\1\0\1\5\1\u0102\6\5"+
    "\1\0\4\5\5\0\2\5\1\0\6\5\2\0\1\65"+
    "\3\5\6\0\1\5\6\0\11\5\1\0\5\5\2\216"+
    "\1\5\1\0\4\5\5\0\2\5\1\0\6\5\2\0"+
    "\1\65\1\5\1\u0103\1\5\6\0\1\5\6\0\11\5"+
    "\1\0\7\5\1\u0103\1\0\4\5\5\0\2\5\1\0"+
    "\1\5\1\u0104\4\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\10\5\1\0\4\5\5\0\2\5"+
    "\1\0\6\5\2\0\1\65\3\5\6\0\1\5\6\0"+
    "\5\5\2\u0105\2\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\1\u0106\2\5\6\0"+
    "\1\5\6\0\11\5\1\0\10\5\1\0\4\5\5\0"+
    "\2\5\1\0\6\5\2\0\1\65\3\5\6\0\1\5"+
    "\6\0\11\5\1\0\5\5\2\334\1\5\1\0\4\5"+
    "\5\0\2\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\5\1\1\11\25\1\1\11"+
    "\10\1\1\11\6\1\1\0\1\1\1\0\5\1\1\11"+
    "\1\0\5\1\2\11\26\1\1\11\3\1\2\0\1\1"+
    "\2\0\3\1\2\0\1\1\3\0\1\1\1\0\5\1"+
    "\1\11\7\1\1\11\36\1\2\0\1\1\2\0\3\1"+
    "\2\0\1\1\3\0\35\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\2\0\20\1\1\11\4\1\2\0\1\1"+
    "\3\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public GraphikSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GraphikSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GraphikSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 19: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 24: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 25: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 30: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 31: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 33: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 35: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 36: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 37: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 38: break;
        case 8: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 39: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 41: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 42: break;
        case 9: 
          { 
          }
        case 43: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 263: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 264: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 265: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
