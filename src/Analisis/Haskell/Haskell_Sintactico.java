
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 08 22:57:51 CST 2017
//----------------------------------------------------

package Analisis.Haskell;

import Constante.Constante;
import java_cup.runtime.Symbol;
import Interface.TitusNotificaciones;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 08 22:57:51 CST 2017
  */
public class Haskell_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Haskell_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Haskell_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\006" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\002\000\002\007\004\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\007\000\002\011\011\000\002\034\005" +
    "\000\002\035\004\000\002\035\003\000\002\036\006\000" +
    "\002\037\003\000\002\037\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\040\006\000\002\023\004" +
    "\000\002\024\004\000\002\025\004\000\002\027\004\000" +
    "\002\030\004\000\002\031\005\000\002\032\005\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\014\006\000\002\014\006\000\002" +
    "\015\005\000\002\016\003\000\002\016\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\017\005" +
    "\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\004\004\001\002\000\006\004\012\034" +
    "\014\001\002\000\006\002\000\004\004\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\034\ufffa\066\ufffa\001\002\000\006\034\226\066" +
    "\225\001\002\000\014\017\024\037\020\057\ufff8\060\017" +
    "\063\026\001\002\000\020\017\ufff5\037\ufff5\057\ufff5\060" +
    "\ufff5\062\ufff5\063\ufff5\067\ufff5\001\002\000\020\017\ufff4" +
    "\037\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\067\ufff4\001" +
    "\002\000\020\004\033\005\037\006\035\017\024\020\034" +
    "\022\031\023\032\001\002\000\004\004\212\001\002\000" +
    "\004\057\211\001\002\000\020\017\ufff6\037\ufff6\057\ufff6" +
    "\060\ufff6\062\ufff6\063\ufff6\067\ufff6\001\002\000\020\017" +
    "\ufff3\037\ufff3\057\ufff3\060\ufff3\062\ufff3\063\ufff3\067\ufff3" +
    "\001\002\000\042\004\142\007\132\035\144\040\115\041" +
    "\126\042\122\043\127\044\133\045\145\046\135\047\136" +
    "\050\137\051\120\052\125\053\143\054\140\001\002\000" +
    "\020\017\ufff2\037\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2" +
    "\067\ufff2\001\002\000\020\004\033\005\037\006\035\017" +
    "\024\020\034\022\031\023\032\001\002\000\020\017\024" +
    "\037\020\057\ufff9\060\017\062\ufff9\063\026\067\ufff9\001" +
    "\002\000\020\017\ufff7\037\ufff7\057\ufff7\060\ufff7\062\ufff7" +
    "\063\ufff7\067\ufff7\001\002\000\060\005\uffd9\006\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\061\uffd9\065\uffd9" +
    "\066\uffd9\001\002\000\060\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\036\uffda\061\uffda\065\uffda\066\uffda" +
    "\001\002\000\060\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\036\uffd6\061\uffd6\065\uffd6\066\uffd6\001\002" +
    "\000\020\004\033\005\037\006\035\017\024\020\034\022" +
    "\031\023\032\001\002\000\060\005\uffd7\006\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\036\uffd7\061\uffd7\065\uffd7\066" +
    "\uffd7\001\002\000\060\005\uffd5\006\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\036\uffd5\061\uffd5\065\uffd5\066\uffd5\001" +
    "\002\000\060\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\036\uffd8\061\uffd8\065\uffd8\066\uffd8\001\002\000" +
    "\044\005\045\006\060\010\054\011\061\012\044\013\052" +
    "\014\046\015\053\016\057\024\050\025\062\026\043\027" +
    "\041\030\056\031\047\032\055\033\063\001\002\000\020" +
    "\004\033\005\037\006\035\017\024\020\034\022\031\023" +
    "\032\001\002\000\024\005\045\006\060\017\uffef\037\uffef" +
    "\057\uffef\060\uffef\062\uffef\063\uffef\067\uffef\001\002\000" +
    "\020\004\033\005\037\006\035\017\024\020\034\022\031" +
    "\023\032\001\002\000\020\004\033\005\037\006\035\017" +
    "\024\020\034\022\031\023\032\001\002\000\004\070\uffeb" +
    "\001\002\000\020\004\033\005\037\006\035\017\024\020" +
    "\034\022\031\023\032\001\002\000\020\004\033\005\037" +
    "\006\035\017\024\020\034\022\031\023\032\001\002\000" +
    "\020\004\033\005\037\006\035\017\024\020\034\022\031" +
    "\023\032\001\002\000\024\005\uffed\006\uffed\017\uffed\037" +
    "\uffed\057\uffed\060\uffed\062\uffed\063\uffed\067\uffed\001\002" +
    "\000\020\004\033\005\037\006\035\017\024\020\034\022" +
    "\031\023\032\001\002\000\020\004\033\005\037\006\035" +
    "\017\024\020\034\022\031\023\032\001\002\000\020\004" +
    "\033\005\037\006\035\017\024\020\034\022\031\023\032" +
    "\001\002\000\020\004\033\005\037\006\035\017\024\020" +
    "\034\022\031\023\032\001\002\000\020\004\033\005\037" +
    "\006\035\017\024\020\034\022\031\023\032\001\002\000" +
    "\020\004\033\005\037\006\035\017\024\020\034\022\031" +
    "\023\032\001\002\000\004\070\uffea\001\002\000\020\004" +
    "\033\005\037\006\035\017\024\020\034\022\031\023\032" +
    "\001\002\000\020\004\033\005\037\006\035\017\024\020" +
    "\034\022\031\023\032\001\002\000\020\004\033\005\037" +
    "\006\035\017\024\020\034\022\031\023\032\001\002\000" +
    "\004\070\065\001\002\000\014\017\024\037\020\060\017" +
    "\063\026\067\ufff8\001\002\000\004\067\067\001\002\000" +
    "\024\005\uffec\006\uffec\017\uffec\037\uffec\057\uffec\060\uffec" +
    "\062\uffec\063\uffec\067\uffec\001\002\000\060\005\uffdb\006" +
    "\uffdb\010\054\011\061\012\044\013\052\014\046\015\053" +
    "\016\057\017\uffdb\021\uffdb\024\050\025\062\026\043\027" +
    "\041\030\056\031\047\032\uffdb\033\uffdb\036\uffdb\061\uffdb" +
    "\065\uffdb\066\uffdb\001\002\000\060\005\uffe1\006\uffe1\010" +
    "\054\011\061\012\044\013\052\014\046\015\053\016\057" +
    "\017\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\061\uffe1\065\uffe1" +
    "\066\uffe1\001\002\000\060\005\uffe8\006\uffe8\010\uffe8\011" +
    "\uffe8\012\044\013\052\014\046\015\053\016\057\017\uffe8" +
    "\021\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\036\uffe8\061\uffe8\065\uffe8\066\uffe8" +
    "\001\002\000\060\005\uffe3\006\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\053\016\057\017\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\036\uffe3\061\uffe3\065\uffe3\066\uffe3\001\002" +
    "\000\060\005\uffde\006\uffde\010\054\011\061\012\044\013" +
    "\052\014\046\015\053\016\057\017\uffde\021\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\036\uffde\061\uffde\065\uffde\066\uffde\001\002\000\060" +
    "\005\uffdc\006\uffdc\010\054\011\061\012\044\013\052\014" +
    "\046\015\053\016\057\017\uffdc\021\uffdc\024\050\025\062" +
    "\026\043\027\041\030\056\031\047\032\uffdc\033\uffdc\036" +
    "\uffdc\061\uffdc\065\uffdc\066\uffdc\001\002\000\060\005\uffe9" +
    "\006\uffe9\010\uffe9\011\uffe9\012\044\013\052\014\046\015" +
    "\053\016\057\017\uffe9\021\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\036\uffe9\061" +
    "\uffe9\065\uffe9\066\uffe9\001\002\000\060\005\uffe4\006\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\053\016" +
    "\057\017\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\036\uffe4\061\uffe4\065" +
    "\uffe4\066\uffe4\001\002\000\060\005\uffe6\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\053\016\057\017" +
    "\uffe6\021\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\036\uffe6\061\uffe6\065\uffe6\066" +
    "\uffe6\001\002\000\060\005\uffe2\006\uffe2\010\054\011\061" +
    "\012\044\013\052\014\046\015\053\016\057\017\uffe2\021" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\036\uffe2\061\uffe2\065\uffe2\066\uffe2\001" +
    "\002\000\060\005\uffdd\006\uffdd\010\054\011\061\012\044" +
    "\013\052\014\046\015\053\016\057\017\uffdd\021\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\036\uffdd\061\uffdd\065\uffdd\066\uffdd\001\002\000" +
    "\060\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\053\016\057\017\uffe5\021\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\036\uffe5\061\uffe5\065\uffe5\066\uffe5\001\002\000\060\005" +
    "\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\053\016\057\017\uffe7\021\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\036\uffe7" +
    "\061\uffe7\065\uffe7\066\uffe7\001\002\000\060\005\uffe0\006" +
    "\uffe0\010\054\011\061\012\044\013\052\014\046\015\053" +
    "\016\057\017\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0\061\uffe0" +
    "\065\uffe0\066\uffe0\001\002\000\024\005\uffee\006\uffee\017" +
    "\uffee\037\uffee\057\uffee\060\uffee\062\uffee\063\uffee\067\uffee" +
    "\001\002\000\060\005\uffdf\006\uffdf\010\054\011\061\012" +
    "\044\013\052\014\046\015\053\016\057\017\uffdf\021\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\036\uffdf\061\uffdf\065\uffdf\066\uffdf\001\002" +
    "\000\042\010\054\011\061\012\044\013\052\014\046\015" +
    "\053\016\057\021\111\024\050\025\062\026\043\027\041" +
    "\030\056\031\047\032\055\033\063\001\002\000\060\005" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4" +
    "\061\uffd4\065\uffd4\066\uffd4\001\002\000\004\017\uffd2\001" +
    "\002\000\004\017\uffcc\001\002\000\004\017\uffcb\001\002" +
    "\000\020\004\033\005\037\006\035\017\024\020\034\022" +
    "\031\023\032\001\002\000\004\055\206\001\002\000\022" +
    "\017\uffb7\037\uffb7\055\uffb7\057\uffb7\060\uffb7\062\uffb7\063" +
    "\uffb7\067\uffb7\001\002\000\010\004\147\007\132\035\144" +
    "\001\002\000\004\017\uffcf\001\002\000\020\004\033\005" +
    "\037\006\035\017\024\020\034\022\031\023\032\001\002" +
    "\000\004\017\uffce\001\002\000\004\017\uffca\001\002\000" +
    "\010\004\147\007\132\035\144\001\002\000\020\004\033" +
    "\005\037\006\035\017\024\020\034\022\031\023\032\001" +
    "\002\000\010\004\147\007\132\035\144\001\002\000\004" +
    "\017\uffcd\001\002\000\004\017\200\001\002\000\022\017" +
    "\uffb9\037\uffb9\055\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9" +
    "\067\uffb9\001\002\000\010\004\147\007\132\035\144\001" +
    "\002\000\004\017\uffd0\001\002\000\010\004\147\007\132" +
    "\035\144\001\002\000\010\004\147\007\132\035\144\001" +
    "\002\000\010\004\147\007\132\035\144\001\002\000\010" +
    "\004\147\007\132\035\144\001\002\000\004\017\uffd1\001" +
    "\002\000\010\055\uffb8\056\167\064\166\001\002\000\010" +
    "\004\147\007\132\035\144\001\002\000\022\004\033\005" +
    "\037\006\035\017\024\020\034\022\031\023\032\035\151" +
    "\001\002\000\010\004\147\007\132\035\144\001\002\000" +
    "\004\017\uffc1\001\002\000\022\017\uffb8\037\uffb8\055\uffb8" +
    "\057\uffb8\060\uffb8\062\uffb8\063\uffb8\067\uffb8\001\002\000" +
    "\004\036\164\001\002\000\020\004\033\005\037\006\035" +
    "\017\024\020\034\022\031\023\032\001\002\000\006\036" +
    "\uffb2\066\160\001\002\000\006\036\uffb0\066\uffb0\001\002" +
    "\000\046\010\054\011\061\012\044\013\052\014\046\015" +
    "\053\016\057\024\050\025\062\026\043\027\041\030\056" +
    "\031\047\032\055\033\063\036\uffad\065\uffad\066\uffad\001" +
    "\002\000\006\036\uffb3\066\156\001\002\000\020\004\033" +
    "\005\037\006\035\017\024\020\034\022\031\023\032\001" +
    "\002\000\046\010\054\011\061\012\044\013\052\014\046" +
    "\015\053\016\057\024\050\025\062\026\043\027\041\030" +
    "\056\031\047\032\055\033\063\036\uffae\065\uffae\066\uffae" +
    "\001\002\000\004\035\151\001\002\000\006\036\uffb1\066" +
    "\uffb1\001\002\000\006\036\163\066\156\001\002\000\006" +
    "\036\uffaf\066\uffaf\001\002\000\022\017\uffb4\037\uffb4\055" +
    "\uffb4\057\uffb4\060\uffb4\062\uffb4\063\uffb4\067\uffb4\001\002" +
    "\000\004\017\uffbb\001\002\000\020\004\033\005\037\006" +
    "\035\017\024\020\034\022\031\023\032\001\002\000\020" +
    "\004\033\005\037\006\035\017\024\020\034\022\031\023" +
    "\032\001\002\000\042\010\054\011\061\012\044\013\052" +
    "\014\046\015\053\016\057\017\uffc2\024\050\025\062\026" +
    "\043\027\041\030\056\031\047\032\055\033\063\001\002" +
    "\000\006\065\172\066\156\001\002\000\004\017\uffc9\001" +
    "\002\000\004\017\uffba\001\002\000\004\017\uffbe\001\002" +
    "\000\004\017\uffbf\001\002\000\004\017\uffc0\001\002\000" +
    "\004\017\uffc4\001\002\000\074\005\uffd3\006\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\036\uffd3\037\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\001\002\000\004\017\uffc5\001\002\000\042\010\054\011" +
    "\061\012\044\013\052\014\046\015\053\016\057\017\uffc7" +
    "\024\050\025\062\026\043\027\041\030\056\031\047\032" +
    "\055\033\063\001\002\000\004\017\uffbc\001\002\000\042" +
    "\010\054\011\061\012\044\013\052\014\046\015\053\016" +
    "\057\017\uffc6\024\050\025\062\026\043\027\041\030\056" +
    "\031\047\032\055\033\063\001\002\000\004\017\uffbd\001" +
    "\002\000\010\004\147\007\132\035\144\001\002\000\020" +
    "\017\uffc3\037\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\067" +
    "\uffc3\001\002\000\042\010\054\011\061\012\044\013\052" +
    "\014\046\015\053\016\057\017\uffc8\024\050\025\062\026" +
    "\043\027\041\030\056\031\047\032\055\033\063\001\002" +
    "\000\006\002\ufffc\004\ufffc\001\002\000\004\034\213\001" +
    "\002\000\010\004\147\007\132\035\144\001\002\000\022" +
    "\017\uffb6\037\uffb6\055\206\057\uffb6\060\uffb6\062\uffb6\063" +
    "\uffb6\067\uffb6\001\002\000\020\017\uffb5\037\uffb5\057\uffb5" +
    "\060\uffb5\062\uffb5\063\uffb5\067\uffb5\001\002\000\042\010" +
    "\054\011\061\012\044\013\052\014\046\015\053\016\057" +
    "\024\050\025\062\026\043\027\041\030\056\031\047\032" +
    "\055\033\063\061\217\001\002\000\016\017\024\037\020" +
    "\057\ufff8\060\017\062\ufff8\063\026\001\002\000\006\057" +
    "\222\062\221\001\002\000\014\017\024\037\020\057\ufff8" +
    "\060\017\063\026\001\002\000\020\017\ufff1\037\ufff1\057" +
    "\ufff1\060\ufff1\062\ufff1\063\ufff1\067\ufff1\001\002\000\004" +
    "\057\224\001\002\000\020\017\ufff0\037\ufff0\057\ufff0\060" +
    "\ufff0\062\ufff0\063\ufff0\067\ufff0\001\002\000\004\004\231" +
    "\001\002\000\014\017\024\037\020\057\ufff8\060\017\063" +
    "\026\001\002\000\004\057\230\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\006\034\ufffb\066\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\002\006\003\004\004\005\001\001\000" +
    "\004\005\012\001\001\000\004\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\020" +
    "\007\026\010\021\011\014\013\022\014\024\034\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\215" +
    "\013\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\116\022\130" +
    "\023\111\024\140\025\133\026\115\027\120\030\122\031" +
    "\127\032\113\033\112\040\123\001\001\000\002\001\001" +
    "\000\006\012\037\013\035\001\001\000\014\010\027\011" +
    "\014\013\022\014\024\034\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\107\013\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\041\036\050\037" +
    "\063\001\001\000\006\012\106\013\035\001\001\000\006" +
    "\036\105\037\063\001\001\000\006\012\104\013\035\001" +
    "\001\000\006\012\103\013\035\001\001\000\002\001\001" +
    "\000\006\012\102\013\035\001\001\000\006\012\101\013" +
    "\035\001\001\000\006\012\100\013\035\001\001\000\002" +
    "\001\001\000\006\012\077\013\035\001\001\000\006\012" +
    "\076\013\035\001\001\000\006\012\075\013\035\001\001" +
    "\000\006\012\074\013\035\001\001\000\006\012\073\013" +
    "\035\001\001\000\006\012\072\013\035\001\001\000\002" +
    "\001\001\000\006\012\071\013\035\001\001\000\006\012" +
    "\070\013\035\001\001\000\006\012\067\013\035\001\001" +
    "\000\002\001\001\000\020\006\065\007\026\010\021\011" +
    "\014\013\022\014\024\034\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\207\013\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\116\026\204\001\001\000\002\001\001\000" +
    "\006\012\203\013\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\116\026\202\001\001\000\006\012" +
    "\201\013\035\001\001\000\006\015\116\026\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\116\026\176\001\001\000\002\001\001\000\006" +
    "\015\116\026\175\001\001\000\006\015\116\026\174\001" +
    "\001\000\006\015\116\026\173\001\001\000\006\015\116" +
    "\026\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\116\026\164\001\001\000\016\012\153\013\035" +
    "\016\147\017\154\020\151\021\152\001\001\000\006\015" +
    "\116\026\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\153\013\035\017\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\156\013\035\001\001\000" +
    "\002\001\001\000\004\021\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\153\013\035\017\170\001\001" +
    "\000\006\012\167\013\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\116\026\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\116\026\213\031\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\217\007\026\010" +
    "\021\011\014\013\022\014\024\034\015\001\001\000\002" +
    "\001\001\000\020\006\222\007\026\010\021\011\014\013" +
    "\022\014\024\034\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\226\007\026\010\021\011\014\013\022\014\024\034\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Haskell_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Haskell_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Haskell_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Lexema "+s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Lexema "+s.value + " no reconocido." );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Haskell_Sintactico$actions {

//Codigo de acciones
      

  private final Haskell_Sintactico parser;

  /** Constructor */
  CUP$Haskell_Sintactico$actions(Haskell_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Haskell_Sintactico$do_action(
    int                        CUP$Haskell_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Haskell_Sintactico$parser,
    java.util.Stack            CUP$Haskell_Sintactico$stack,
    int                        CUP$Haskell_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Haskell_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Haskell_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_EXP ::= EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_EXP ::= LISTA_EXP TComa EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",13, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DIMENSION ::= TCorchete_Abre LISTA_EXP TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",15, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_DIMENSION ::= DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_DIMENSION ::= LISTA_DIMENSION TComa DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMENSION",14, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DIMENSIONES ::= LISTA_DIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DIMENSIONES ::= LISTA_EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",12, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MULTIDIMENSION ::= TCorchete_Abre DIMENSIONES TCorchete_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIDIMENSION",11, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_LISTA ::= TLet Id TIgual METODO_CONCATENACION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_LISTA ::= TLet Id TIgual LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",10, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST ::= MULTIDIMENSION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LIST ::= Cadena 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",20, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODO_OPERACION_LISTAS ::= TLength LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO_OPERACION_LISTAS ::= TDesc LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO_OPERACION_LISTAS ::= TAsc LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODO_OPERACION_LISTAS ::= TPar LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODO_OPERACION_LISTAS ::= TImpr LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODO_OPERACION_LISTAS ::= TRevers LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO_OPERACION_LISTAS ::= TProduct LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METODO_OPERACION_LISTAS ::= TSum LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_OPERACION_LISTAS",25, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODO_INDICE ::= Id TIndiceLista EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_INDICE",24, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO_CONCATENACION ::= LIST TAumento LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METODO_MAX ::= TMax LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_MAX",22, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODO_MIN ::= TMin LIST 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_MIN",21, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO_DECC ::= TDecc EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_DECC",19, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO_SUCC ::= TSucc EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_SUCC",18, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO_CALCULAR ::= TCalcular EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CALCULAR",17, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO_CUALQUIERA ::= Id TLlave_Abre LISTA_EXP TLlave_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CUALQUIERA",30, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO ::= METODO_CUALQUIERA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METODO ::= METODO_INDICE 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METODO ::= METODO_OPERACION_LISTAS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METODO ::= METODO_CONCATENACION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METODO ::= METODO_MAX 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODO ::= METODO_MIN 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO ::= METODO_DECC 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO ::= METODO_SUCC 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO ::= METODO_CALCULAR 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LLAMADA_METODO ::= TDolar METODO TDolar 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",9, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= TParentesis_Abre EXP TParentesis_Cierra 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= Caracter 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= TFalso 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= TVerdadero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP TOr EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP TAnd EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP TDiferenciacion EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP TIgualacion EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP TMenorIgual EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP TMayorIgual EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= EXP TMenor EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP TMayor EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP TRaiz EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP TPotencia EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP TModulo EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP TDivision EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP TPor EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP TMenos EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP TMas EXP 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= Caracter 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",29, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",29, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASO ::= VALOR TDosPuntos CUERPO TPuntoyComa 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",28, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_CASOS ::= CASO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",27, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",27, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_CASE ::= TCase EXP LISTA_CASOS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",26, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_IF ::= TIf EXP TThen CUERPO TElse CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_IF ::= TIf EXP TThen CUERPO TEnd 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",7, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARACION_LISTA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= 
            {
              Object RESULT =null;
		  
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= LISTA_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_PARAMETROS ::= Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_PARAMETROS ::= LISTA_PARAMETROS TComa Id 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= Id TIgual CUERPO TEnd 
            {
              Object RESULT =null;
		 System.out.println("EXITO"); 
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= Id LISTA_PARAMETROS TIgual CUERPO TEnd 
            {
              Object RESULT =null;
		 TitusNotificaciones.ImprimirConsola("EXITO"); 
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_FUNCION ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_FUNCION ::= LISTA_FUNCION FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_FUNCION 
            {
              Object RESULT =null;

              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Haskell_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Haskell_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.elementAt(CUP$Haskell_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Haskell_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Haskell_Sintactico$parser.done_parsing();
          return CUP$Haskell_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

